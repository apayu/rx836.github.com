<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CSS | apa]]></title>
  <link href="http://blog.rx836.tw/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://blog.rx836.tw/"/>
  <updated>2013-01-29T14:44:23+08:00</updated>
  <id>http://blog.rx836.tw/</id>
  <author>
    <name><![CDATA[阿帕]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[CSS] 認識OOCSS]]></title>
    <link href="http://blog.rx836.tw/blog/css-oocss/"/>
    <updated>2013-01-16T16:15:00+08:00</updated>
    <id>http://blog.rx836.tw/blog/css-oocss</id>
    <content type="html"><![CDATA[<p>最近在一些國外文章常看到『OOCSS』，另外也在 <a href="http://www.webconf.tw/" target="_blank">WebConf Taiwan 2013</a> 聽到許多講者分享中提到，所以藉此花了一些時間來認識一下OOCSS，並且紀錄在這裡供大家參考參考</p>

<!--more-->


<p>OOCSS其實就是 Object Oriented CSS，照字面來看就是物件導向的CSS，『物件導向』我想對於程式開發人員來說並不陌生，許多程式語言都有存在這個概念，但對於設計師來說可能就會覺得很陌生，不過要我來解釋的話可能會解釋的不清楚，因為自己都學的不好了...XD，所以決定把wiki大神搬出來給大家參考</p>

<p><a href="http://zh.wikipedia.org/wiki/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91" target="_blank">關於物件導向程式設計(OOP)</a></p>

<p>為了怕設計師們直接把這篇文章關掉，我還是要自己解釋一下，其實重點在於"重用"這件事上面，他並不是一個新的語言或是框架，而就只是一個撰寫CSS的方法，讓CSS可以減少代碼，達到優化效能的作用</p>

<h2>OOCSS的兩大原則</h2>

<h3>Separate structure and skin</h3>

<p>結構(Structure)和樣式(skin)的分離，我們可以嘗試著將共用的屬性部分拉出來獨立一個類別(class)，例如原本的CSS可能長這樣</p>

<pre><code>#button{
    width:250px;
    height:100px;
    border: solid 2px #ccc;
    background: red;
}

#box{
    width:400x;
    height:200px;
    border: solid 2px #ccc;
    background: red;
}
</code></pre>

<p>我們發現 button 和 box 都有共同的 border 和 background，所以將它獨立拉出來</p>

<pre><code>.button{
    width:250px;
    height:100px;
}

.box{
    width:400x;
    height:200px;       
}

.skin{
    border: solid 2px #ccc;
    background: red;
}
</code></pre>

<p>將所有的元素都用類別(class)設計，重複出現的樣式就獨立到 skin 的類別，這樣就可以減少CSS的代碼，還可以使CSS更加靈活，另外不要直接在例如&lt;img&gt;這樣的tag上直接加樣式</p>

<h3>Separate container and content</h3>

<p>將容器(container)和內容(content)分離的好處是，可以把內容放在任何容器裡面都可以，而不會被擺放的位置給拘束，例如像下面的例子</p>

<p>HTML部份</p>

<pre><code>&lt;div class="head"&gt;
    &lt;p&gt;
        內容內容內容
    &lt;/p&gt;
&lt;/div&gt;
&lt;div class="foot"&gt;
    &lt;p&gt;
        內容內容內容
    &lt;/p&gt;
&lt;/div&gt;
</code></pre>

<p>css部份</p>

<pre><code>.head p {css code}
.foot p {css code}
</code></pre>

<p>不過 OOCSS 不建議這麼做，他希望的是建立更多的類別獨立出來</p>

<pre><code>.head {css code}
.foot {css code}
.mydata {css code}
</code></pre>

<p>這樣就可以直接在html上添加這些類別</p>

<pre><code>&lt;div class="head"&gt;
    &lt;p class="mydata"&gt;
        內容內容內容
    &lt;/p&gt;
&lt;/div&gt;
&lt;div class="foot"&gt;
    &lt;p class="mydata"&gt;
        內容內容內容
    &lt;/p&gt;
&lt;/div&gt;
</code></pre>

<p>另外一樣將把重複的獨立出來，將樣式模組化，這樣不僅不會被局限在某個位置底下(剛剛的 .head p )，也可以達到CSS重複使用</p>

<h2>結論</h2>

<p>我想這不是甚麼新的觀念，或許有人已經使用自己可能都不知道，OOCSS的優點就是讓網站效能變好(減少程式碼)，而且易於維護(模組化)，但缺點在撰寫之前需要花點時間規劃模組化，對於小型網站來說成本可能比較高，對於大型網站的優勢反而比較明顯</p>

<p>另外也可以參考這個 <a href="https://github.com/stubbornella/oocss" target="_blank">Object Oriented CSS Framework</a></p>

<h3>參考資料:</h3>

<p><a href="http://www.w3cplus.com/css/oocss-concept" target="_blank">OOCSS——概念篇</a></p>

<p><a href="https://github.com/stubbornella/oocss/wiki" target="_blank">Object Oriented CSS</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CSS] 用CSS改變scrollbar]]></title>
    <link href="http://blog.rx836.tw/blog/css-styling-scrollbars/"/>
    <updated>2013-01-04T11:03:00+08:00</updated>
    <id>http://blog.rx836.tw/blog/css-styling-scrollbars</id>
    <content type="html"><![CDATA[<p><img src="https://lh6.googleusercontent.com/-STc4lvK5aJw/UOZ8yP4FfFI/AAAAAAAACIo/oscopBlrZ7k/s202/2013-01-04_110558.jpg" /></p>

<p>scrollbar在網頁裡面算是相當常見的元素，因為資訊爆炸，每個網頁都有許多豐富的內容，為了減少分頁，往往會進而拉長整個網頁的長度，這時候就會產生scrollbar，但原生的 scrollbar 有時候跟網頁的整體UI設計並不符合，看起來就很突兀，為了讓網站整體的UI設計一致，我們可以嘗試改變一下 scrollbar 的樣式</p>

<!--more-->


<h2>準備一個簡單的 scrollbar 頁面</h2>

<p>首先在開始改變 scrollbar 之前，我們必須先知道哪些情境之下會出現scrollbar</p>

<p>1.當網頁內容長度超過瀏覽器視窗的可視範圍時，會在右側出現scrollbar</p>

<p>2.當 textarea 包含足夠的文字時</p>

<p>3.利用 iframe 顯示不同頁面時</p>

<p>4.&lt;div&gt;或其他 block element 有設置 overflow 屬性時</p>

<p>現在我們選擇用第四種設置&lt;div&gt;的屬性 overflow 來當作 demo 練習</p>

<p>html</p>

<pre><code>&lt;div class="container"&gt;
    &lt;p&gt;這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文&lt;/p&gt;
    &lt;p&gt;這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文&lt;/p&gt;
    &lt;p&gt;這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文&lt;/p&gt;
    &lt;p&gt;這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文&lt;/p&gt;dit. In ultrices vehicula pretium.&lt;/p&gt;
    &lt;p&gt;這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文&lt;/p&gt;
    &lt;p&gt;這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文這是一段假文&lt;/p&gt;
&lt;/div&gt;
</code></pre>

<p>css</p>

<pre><code>.container {
      width: 400px;
      height: 300px;
      background-color: #DCDCDC;
      overflow: scroll; /* showing scrollbars */
}
</code></pre>

<p>CSS部份我們替&lt;div&gt;設置了 width 和 height，目的是為了讓內容限制一個範圍，那當超出範圍的部份，我們就設置了另一個屬性 <strong>overflow:scroll</strong>，告訴瀏覽器做 scrollbar 的處理，所以設置完的顯示結果如下</p>

<p><img src="https://lh4.googleusercontent.com/-yinWVlS8WjI/UOZ8yc9bwmI/AAAAAAAACIs/axfVRTRAXK0/s418/2013-01-04_115358.jpg" /></p>

<h2>Webkit瀏覽器的scrollbar</h2>

<p>假設是 Webkit 的瀏覽器(例如: Google Chrome、Apple Safari)，我們可以使用 ::-webkit-scrollbar 這個 pseudo-elements 來做改變</p>

<pre><code>::-webkit-scrollbar {
      width: 50px;
}
::-webkit-scrollbar-track {
      background-color: red;
} 
::-webkit-scrollbar-thumb {
      background-color: blue
}
::-webkit-scrollbar-button {
      background-color: yellow
}
::-webkit-scrollbar-corner {
      background-color: black;
}
</code></pre>

<p>顯示效果如下</p>

<p><img src="https://lh4.googleusercontent.com/-GjRmeALubYA/UOZ8yfCuvaI/AAAAAAAACIw/XuFAQAPU8AM/s419/2013-01-04_122330.jpg" /></p>

<p>很醜，但為了讓大家知道每個屬性的效果，所以特地用顏色做區別，還把寬度設為50px，但現實的專案中千萬別這樣做，還是要像前面所說的，要符合整體的網站UI設計才行</p>

<p>不過以上的寫法只適用於 Webkit browsers</p>

<h2>IE呢？</h2>

<p>其實沒查可能還不知道，IE是第一個支援用CSS來改變 scrollbar 樣式的瀏覽器，早在IE5.5就可以實做，不過僅限於顏色的改變</p>

<p>用我們剛剛的範例當例子，我們可以這樣寫</p>

<pre><code>body {
    scrollbar-face-color: #b46868;
}
</code></pre>

<p>結果如下</p>

<p><img src="https://lh6.googleusercontent.com/-Rqkd_jSbObM/UOZ8y042JnI/AAAAAAAACI0/SHLaovEZDS8/s420/2013-01-04_123209.jpg" /></p>

<h2>jScrollPane</h2>

<p>剛剛只談到 Webkit 的瀏覽器還有IE的寫法，那Firefox怎麼辦呢？有沒有比較方便的方法可以適用於大多數的瀏覽器，其實是有的，可以嘗試 <a href="http://jscrollpane.kelvinluck.com/" target="_blank">jScrollPane</a> 這個jQuery plugin</p>

<p>基本的使用方式如下，在網頁裡面載入jQuery和jquery.jscrollpane.min.js還有jquery.jscrollpane.css</p>

<pre><code>&lt;script type="text/javascript" src="http://code.jquery.com/jquery-1.8.2.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="jquery.jscrollpane.min.js"&gt;&lt;/script&gt;
&lt;link rel="stylesheet" type="text/css" href="jquery.jscrollpane.css" /&gt;
</code></pre>

<p>接著是js部份</p>

<pre><code>$('.container').jScrollPane();
</code></pre>

<p>效果如下</p>

<p><img src="https://lh5.googleusercontent.com/-LkkEeHILftE/UOZ8zOOTPII/AAAAAAAACI8/B4y_gaz4-Dw/s414/2013-01-04_124917.jpg" /></p>

<p>如果要修改樣式的話，可以直接修改jquery.jscrollpane.css這支檔案裡面的幾個類別屬性</p>

<pre><code>.jspTrack
{
    background: #dde; //可以更改顏色
    position: relative;
}

.jspDrag
{
    background: #bbd; //可以更改顏色
    position: relative;
    top: 0;
    left: 0;
    cursor: pointer;
}
</code></pre>

<p>或許會有疑問，為什麼用 jScrollPane 可以支援不同的瀏覽器？其實只要打開 firebug 看看HTML的部份就可以知道</p>

<p><img src="https://lh4.googleusercontent.com/-UNhAOrBS60U/UOZ80MiprjI/AAAAAAAACJM/ClXt8YzMY-Q/s420/2013-01-04_144723.jpg" /></p>

<p>原來 jScrollPane 是用&lt;div&gt;做出假的 scrollbar，至於位移的效果就是改變CSS屬性top的值</p>

<h2>結論</h2>

<p>修改 scrollbar 在許多Web Apps都可以看的到實做，像微軟的 Outlook 信箱服務</p>

<p><img src="https://lh5.googleusercontent.com/-PAU7cSx0tIQ/UOZ8zRWFhII/AAAAAAAACJI/PDzHVetCHv0/s486/2013-01-04_144215.jpg" /></p>

<p>又或是Google的雲端硬碟服務</p>

<p><img src="https://lh4.googleusercontent.com/-OHN4PIVruTQ/UOZ8zg-ErCI/AAAAAAAACJA/Q8WkMSdEt0o/s454/2013-01-04_144319.jpg" /></p>

<p>都有畫龍點睛的效果，善用這方面的方法，可以讓網站的UI看起來更一致，也不必局限於原生HTML元素的呈現，網頁也可以更加活潑</p>

<h3>參考資料:</h3>

<p><a href="phttp://webdesign.tutsplus.com/tutorials/htmlcss-tutorials/quick-tip-styling-scrollbars-to-match-your-ui-design/?utm_source=CSS+Weekly&utm_campaign=CSS_Weekly_Issue_34&utm_medium=web" target="_blank">Quick Tip: Styling Scrollbars to Match Your UI Design</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CSS] 關於CSS Cursor]]></title>
    <link href="http://blog.rx836.tw/blog/css-cursor-rule/"/>
    <updated>2012-12-27T15:09:00+08:00</updated>
    <id>http://blog.rx836.tw/blog/css-cursor-rule</id>
    <content type="html"><![CDATA[<p><img src="https://lh5.googleusercontent.com/-OVdRqH4Q_sA/UNwXOft01eI/AAAAAAAACH4/Kg-eysHdgc8/s461/2012-12-27_152249.jpg" /></p>

<p>在提到CSS Cursor之前，要先說一下我跟CSS Cursor的第一次的認識，在我剛出社會時，做活動網站，常常會使用&lt;div&gt;來當作button來使用，有一天，PM跑過來跟我說，要把那個按鈕的鼠標從箭頭改成指頭，我才了解到鼠標對User的影響</p>

<!--more-->


<h2>Cursor</h2>

<p>先來簡單的介紹鼠標的作用，鼠標其實就是輔助你讓你知道現在可以做些甚麼事情，例如當你將滑鼠移到視窗邊緣時，會出現可以<strong>縮放的標誌</strong>，又或是將鼠標移到文字框時，會出現類似「工」型的圖案，意思是你可以在這邊輸入文字</p>

<p><img src="https://lh5.googleusercontent.com/-RdOW3VCBij4/UNwXOavbpLI/AAAAAAAACH8/JaDJMEYNyzM/s600/cursor_inputs.png" /></p>

<p>這在不管是系統的應用程式上，或是網頁瀏覽時，都是很常看到的輔助標誌，但我們今天主要講的是網頁瀏覽時的鼠標應用，在CSS裡面，如果要更改預設的鼠標，語法會是這樣寫</p>

<pre><code>div{
    cursor:move;
}
</code></pre>

<p><strong>cursor</strong> 是屬性名稱，而 <strong>move</strong> 是屬性值，當然，屬性值不只有move可以使用，更多的屬性值可以參考下面那個網站，也是我本人相當推薦的參考網站</p>

<p><a href="http://webdesigntutsplus.s3.amazonaws.com/tuts/405_cursors/table/table.html" target="_blank">CSS Cursor Values Across Browsers and Platforms</a></p>

<p>看過上面那個網站，會發現到，除了瀏覽器的不同以外，就連User所使用的系統不同，也會有不同的結果</p>

<p>那假如不想使用上面那些預設的圖案呢？我有沒有辦法使用自訂的鼠標？答案是有的，語法如下</p>

<pre><code>div{
    cursor: url('cursor.png'), default;
}
</code></pre>

<p>它跟 <strong>font-family</strong> 一樣，都需要有備用的鼠標，假如第一個鼠標不存在或不支援時，還能使用其它鼠標</p>

<p>也可以加上自訂圖案的位移座標</p>

<pre><code>cursor: url('cursor.png') 10 5, default;
</code></pre>

<p>分別代表x和y，用原始鼠標為起點(0,0)，往左位移10px，往上位移5px</p>

<h2>Cross Browser Cursor Rule</h2>

<p>不過要做到跨瀏覽器有幾點要特別注意的是，IE7、8只支援 <strong>.CUR</strong> 的檔案，所以一般我們都會這樣寫</p>

<pre><code>div{
    cursor: url('/cursors/cursor.png'),
                url('/cursors/cursor.cur'),
                default;
}       
</code></pre>

<p>讓非IE的瀏覽器使用第一個.png圖檔，假如是IE就使用.cur圖檔，都無法讀取時就使用default</p>

<p>特別注意的是，假如你的cursor圖檔與css檔是放在不同資料夾的話，IE的CSS Cursor<strong>並不支援相對路徑</strong>，只支援<strong>相對根路徑</strong>或是<strong>絕對路徑</strong>，所以像下面的寫法IE是不支援的</p>

<pre><code>cursor: url(../cursors/cursor.cur);
</code></pre>

<h2>結論</h2>

<p>現在利用移動設備瀏覽網頁的使用程度上越來越高，觸控式的螢幕輸入占了絕大多數，可能會覺得鼠標的影響已經越來越不重要，但不管如何，除非傳統的web網頁消失，不然建議大家還是要照著Progressive Enhancement(漸進式增強)的原則來設計網頁，達到良好的互動式設計</p>

<h3>參考資料:</h3>

<p><a href="http://webdesign.tutsplus.com/tutorials/htmlcss-tutorials/everything-you-need-to-know-about-the-css-cursor-rule/?utm_source=CSS+Weekly&utm_campaign=CSS_Weekly_Issue_34&utm_medium=web" target="_blank">Everything You Need to Know About the CSS Cursor Rule</a></p>

<p><a href="http://abgne.tw/css/css-mouse-cursor.html" target="_blank">男丁格爾-自訂網頁中的滑鼠游標</a></p>

<p><a href="http://hi.baidu.com/guohuihot/item/c88f6af387dcaec2a835a223" target="_blank">IE不支持CSS相对路径的自定义cursor</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CSS] CSS position 觀念筆記心得]]></title>
    <link href="http://blog.rx836.tw/blog/css-positioning/"/>
    <updated>2012-12-22T11:30:00+08:00</updated>
    <id>http://blog.rx836.tw/blog/css-positioning</id>
    <content type="html"><![CDATA[<p><strong>css position</strong> 對於初學者來說觀念很容易混淆，我在剛學習時也很常搞不清楚relative和absolute之間的關係，但只要抓到幾個訣竅重點，其實可以很輕鬆的掌握它，這篇是紀錄我自己學習css position的心得，搭配幾個簡單易懂的範例，讓大家一起成長</p>

<!--more-->


<h2>Start</h2>

<p>首先，css position 屬性共有四個值，分別為 <strong>static</strong>、<strong>relative</strong>、<strong>absolute</strong>、<strong>fixed</strong>，其中，當你沒有設定position時，預設為static，下面就來介紹這四個值的差別</p>

<h3>static</h3>

<p>就如剛剛所提到的，static是預設值，意思是說，就算你沒宣告position這個屬性，默認還是為static，而通常這時候會影響到元素的位置，就是看它本身是 <strong>block</strong> 或是 <strong>inline</strong>，例如兩個&lt;div&gt;因為是block的關係，所以會上下各占據一行，那如果是兩個&lt;span&gt;，因為是inline，所以會在同一行裡面呈現</p>

<p>css</p>

<pre><code>#d1{
    width: 100px;
    height: 100px;
    background: blue;
}
#d2{
    width: 100px;
    height: 100px;
    background: red;
}
#s1{
        background: blue;
    }
#s2{
        background: red;
    }   
</code></pre>

<p>html</p>

<pre><code>&lt;div id="d1"&gt;
div1
&lt;/div&gt;
&lt;div id="d2"&gt;
div2
&lt;/div&gt;
&lt;span id="s1"&gt;span1&lt;/span&gt;&lt;span id="s2"&gt;span2&lt;/span&gt;
</code></pre>

<p><img src="https://lh6.googleusercontent.com/-k8UTysRkMoQ/UNVYRo_fstI/AAAAAAAACGc/4eVneQSvhDg/s214/2012-12-22_120559.jpg" /></p>

<p><img src="https://lh6.googleusercontent.com/-h58i2I7P0Fg/UNVYRt_asJI/AAAAAAAACGk/BkPXYijQpG0/s99/2012-12-22_120617.jpg" /></p>

<p>特別注意的是，static並不會受 <strong>top</strong>、<strong>bottom</strong>、<strong>left</strong> 和 <strong>right</strong> 這些屬性值影響</p>

<h3>relative</h3>

<p>假如元素的position屬性值設為relative，就會受到 <strong>top</strong>、<strong>bottom</strong>、<strong>left</strong> 和 <strong>right</strong> 這些值影響所在位置，利用剛剛的範例，我們增加position屬性值和一些位移看看結果</p>

<p>css</p>

<pre><code>#d1{
    width: 100px;
    height: 100px;
    background: blue;
    position: relative;
    top: 20px;
    left: 20px;
}
#d2{
    width: 100px;
    height: 100px;
    background: red;
}
</code></pre>

<p>我們在id為d1的&lt;div&gt;裡面加上了 <strong>position: relative</strong> 和 <strong>top:20px</strong> 還有 <strong>left:20px</strong>，會看到下面如圖的結果</p>

<p><img src="https://lh5.googleusercontent.com/-brly4x9g8ck/UNVYRm2M0kI/AAAAAAAACGg/MZagmsZ8e4U/s201/2012-12-22_121717.jpg" /></p>

<p>藍色的div從<strong>原本的位置</strong>往右下角位移了，從原始位置的左上角為起點，遠離左邊(left)20px的差距，遠離上面(top)也是20px的差距，但還是保留<strong>原本位置的空間</strong>，並且覆蓋到d2，注意我這邊特別註明是原本的位置，因為這會跟等下介紹的 <strong>absolute</strong> 有所不同，那有些人或許會有疑問，可以用 <strong>margin</strong> 取代嗎？我們來實驗一下</p>

<pre><code>#d1{
    width: 100px;
    height: 100px;
    background: blue;
    margin-top: 20px;
    margin-left: 20px;
}
#d2{
    width: 100px;
    height: 100px;
    background: red;
}
</code></pre>

<p><img src="https://lh5.googleusercontent.com/-mWSgkOP_EZ4/UNVYSFL7X9I/AAAAAAAACGs/jU3lCto1jGM/s217/2012-12-22_122152.jpg" /></p>

<p>有明顯的發現，利用屬性margin做位移，元素並沒有覆蓋堆疊的問題，但會<strong>影響到其它的元素位置</strong>，這是要特別注意小心的地方，不可不慎</p>

<h3>absolute</h3>

<p><strong>absolute</strong> 跟relative很像，差別在於位移時是從哪個起始點開始算起，剛剛的relative是從原本的位置開始算，而<STRIKE>absolute是從<strong>整個頁面的視窗</strong>開始算起</STRIKE>(感謝網友底下留言補充，這邊應該講從最近一個有 "position: relative" 的 parent node 開始算)，並且並不會保留它原本的<strong>空間</strong>，範例如下</p>

<pre><code>#d1{
    width: 100px;
    height: 100px;
    background: blue;
    position: absolute;;
    top: 20px;
    left: 20px;
}
#d2{
    width: 100px;
    height: 100px;
    background: red;
}
</code></pre>

<p><img src="https://lh5.googleusercontent.com/-gGhHTnjvx2M/UNVYSRKJwcI/AAAAAAAACGo/bqLVeZYOBok/s128/2012-12-22_123254.jpg" /></p>

<p>有發現藍色的&lt;div&gt;完全無視其它的元素存在，也不會干擾到其它的元素，因為它的原始空間也消失了，自己獨立起來自成一格，看起來還蠻容易了解的，不過有一個地方是初學者很容易混淆的，就是當relative和absolute一起使用時，那情形就會跟我們設想的不太一樣，範例如下</p>

<p>css</p>

<pre><code>#d1{
    width: 100px;
    height: 100px;
    background: blue;
    position: absolute;;
    top: 20px;
    left: 20px;
}
#d2{
    width: 100px;
    height: 100px;
    background: red;
}

#d3{
    position: relative;
    width: 300px;
    height: 300px;
    border: solid 1px orange;
}
</code></pre>

<p>html</p>

<pre><code>&lt;div id="d3"&gt;
    &lt;div id="d1"&gt;
    div1
    &lt;/div&gt;
    &lt;div id="d2"&gt;
    div2
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>這裡多用一個id為d3的&lt;div&gt;包住兩個&lt;div&gt;，d3的position屬性值為relative，此時會看到藍色的&lt;div&gt;屬性值position雖然一樣是absolute，但會看到位移不太一樣了</p>

<p><img src="https://lh6.googleusercontent.com/-pxPW5Q1Kocc/UNVYSScFsqI/AAAAAAAACGw/quewGWodrDc/s330/2012-12-22_124729.jpg" /></p>

<p>會發現藍色的&lt;div&gt;是<strong>從id為d3的&lt;div&gt;左上角開始定位</strong>，這代表是說，如果屬性值為absolute的&lt;div&gt;，上面還有被其它元素包住，就要注意位移計算的起始值會有所不同，那如果將relative移除的話呢?</p>

<p><img src="https://lh5.googleusercontent.com/-L0jg9uoCRoI/UNVYS-iDosI/AAAAAAAACG8/_2MhBfq6cA0/s326/2012-12-22_124746.jpg" /></p>

<p>嗯！定位又從頁面視窗的左上角當作起始點囉，如果覺得範例感覺不到效果，可以將top和left的值加大，會更明顯</p>

<h3>fixed</h3>

<p>最後講到的是fixed，它常被用於在Menu bar，位置也是受到 <strong>top</strong>、<strong>bottom</strong>、<strong>left</strong> 和 <strong>right</strong> 這些值影響，跟absolute類似，但有兩個不一樣的地方</p>

<p>1.它的位移起始的依據永遠都是<strong>視窗頁面</strong>，也就是說就算它有relative的父元素，並不會受到影響</p>

<p>2.它會跟著scroll移動，也就是說當畫面被往下拉時，該元素會跟隨著移到相對的位置</p>

<p>基於以上兩點的特色，我們就可以做出永遠固定在視窗某個地方的元素</p>

<p><img src="https://lh3.googleusercontent.com/-S6zIGb8HXio/UNVYTBy6PLI/AAAAAAAACHA/y94BoXH5TO8/s1075/2012-12-22_143751.jpg" /></p>

<p>像是 <a href="http://pinterest.com/" target="_blank">pinterest</a> 就有用到類似的效果，不過記得要搭配 <strong> z-index</strong> 來做元素堆疊</p>

<h2>結論</h2>

<p>其實網路上有很多很好的文章在討論關於css position的用法和觀念，也有很多很漂亮的排版，但只要掌握好基本觀念，我相信對於那些複雜的layout也可以輕鬆的理解</p>

<p>另外除了上面討論的四個屬性值以外，CSS3其實還有新增另外兩個，分別叫做 <a href="http://www.w3.org/TR/css3-positioning/#center-positioning" target="_blank">position: center</a> 和 <a href="http://www.w3.org/TR/css3-positioning/#page-positioning" target="_blank">position: page</a>，不過因為非主流且各瀏覽器支援程度很低，有興趣的人在自行研究即可</p>

<h3>參考資料:</h3>

<p><a href="http://blog.teamtreehouse.com/css-positioning?utm_source=CSS+Weekly&utm_campaign=CSS_Weekly_Issue_34&utm_medium=web" target="_blank">CSS Positioning: A Comprehensive Look</a></p>

<p><a href="http://www.barelyfitz.com/screencast/html-training/css/positioning/" target="_blank">Learn CSS Positioning in Ten Steps(10個步驟學習CSS Position)</a></p>

<p><a href="http://css.1keydata.com/tw/position.php" target="_blank">CSS Position 位置</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CSS] 利用CSS3做scrolling effect]]></title>
    <link href="http://blog.rx836.tw/blog/css3-scrolling-effect/"/>
    <updated>2012-12-11T07:05:00+08:00</updated>
    <id>http://blog.rx836.tw/blog/css3-scrolling-effect</id>
    <content type="html"><![CDATA[<p><img src="https://lh6.googleusercontent.com/-URpPFCw8GZY/UMZ5NsXYJuI/AAAAAAAACC4/Bjab2PYz86w/s1077/2012-12-11_071208.jpg" /></p>

<p>今天看到一篇文章介紹美國 <a href="http://www.ebay.com/new" target="_blank">ebay</a> 網站的scrolling effect，觀念其實蠻簡單的，重點是我原本以為需要用到js才能達到，但後來發現根本連一行js都不用寫，只需要用到CSS3即可，這邊就來筆記一下過程</p>

<!--more-->


<h2>Start</h2>

<p>一開始先準備三張可以延伸到整個螢幕大小的照片，如果手邊沒有，可以直接使用文章裡面的<a href="pepsized.com/wp-content/uploads/2012/11/lavender.zip" target="_blank">Demo</a>，就有現成的圖片可以練習，另外下面都是用Demo裡面的檔案做講解</p>

<p>HTML部份</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html class="no-js" lang="en"&gt;
&lt;head&gt;
&lt;meta charset="utf-8"&gt;
&lt;title&gt;From love for lavender&lt;/title&gt;
&lt;!-- 略... --&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;header class=" content"&gt;
        &lt;div class="wrapper"&gt;
                &lt;h1&gt;From love for lavender&lt;/h1&gt;
                &lt;p&gt;&lt;span&gt;Lavender&lt;/span&gt; (botanic name Lavandula) is a ....
                &lt;/p&gt;
        &lt;/div&gt;
&lt;/header&gt;

&lt;section class="content" id="oil"&gt;
        &lt;div class="wrapper"&gt;
                &lt;p&gt;&lt;span&gt;Lavender oil&lt;/span&gt; is an ... &lt;/p&gt;
        &lt;/div&gt;
&lt;/section&gt;
&lt;!-- 略... --&gt;
&lt;footer&gt;
        &lt;div class=wrapper&gt;
                 "From love for lavender" has been built ...
        &lt;/div&gt;
&lt;/footer&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>HTML部份就是常見的HTML5的架構，有&lt;header&gt;、&lt;section&gt;和&lt;footer&gt;，每個裡面都包含有一個class為 "wrapper" 的&lt;div&gt;</p>

<p>再來是基本的CSS部份</p>

<pre><code>.wrapper {
    width: 100%;
    margin: 0 auto;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box; 
}
</code></pre>

<p>會看到有一個比較少見的屬性叫 <strong>box-sizing</strong>，他是CSS3的屬性，如果我們設box-sizing為 <strong>border-box</strong>，意思就是指width和height的部份都包含了 <strong>padding</strong> 和 <strong>border</strong>，詳細的屬性說明可以參考 <a href="http://www.w3cplus.com/content/css3-box-sizing" target="_blank">這篇</a></p>

<p>接著是scrolling effect部份</p>

<pre><code>section:after, header:after {
    content: "";
    display: block;
    height: 400px;
    width: 100%;
    background-size: cover;
    background-position: center center;
    background-repeat: no-repeat;
    background-attachment: fixed;
    box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.6); 
}

header:after {
  background-image: url(../images/lavenderbg1.jpg); }
#oil:after {
  background-image: url(../images/lavenderbg2.jpg); }
#culinary:after {
  background-image: url(../images/lavenderbg3.jpg); }
#dried:after {
  background-image: url(../images/lavenderbg4.jpg); }
</code></pre>

<p>因為沒有用到js的關係，但我們又想在HTML上新增元素，所以我們可以利用CSS的pseudo-elements <strong>:after</strong>，他會幫我們在元素後面加上新的元素上去，並且擁有 <strong>background</strong>，另外，我們將屬性 <strong>background-attachment</strong> 設定為fixed，這也是scrolling effect的重點所在，意思就是指<strong>當頁面滾動時，背景圖並不會跟著移動</strong></p>

<p>這樣就大功告成囉，有沒有覺得效果很不錯呢？</p>

<h3>參考資料:</h3>

<p><a href="http://pepsized.com/how-to-recreate-the-new-e-bay-site-scrolling-effect/?utm_source=CSS+Weekly&utm_campaign=CSS_Weekly_Issue_33&utm_medium=web" target="_blank">How to recreate the new e-bay site scrolling effect</a></p>

<p><a href="http://www.w3cplus.com/content/css3-box-sizing" target="_blank">CSS3 Box-sizing </a></p>

<p><a href="http://www.w3school.com.cn/css/pr_background-attachment.asp" target="_blank">CSS background-attachment 属性</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
</feed>
