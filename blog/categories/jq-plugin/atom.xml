<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jQ-Plugin | apa]]></title>
  <link href="http://blog.rx836.tw/blog/categories/jq-plugin/atom.xml" rel="self"/>
  <link href="http://blog.rx836.tw/"/>
  <updated>2013-01-23T22:58:44+08:00</updated>
  <id>http://blog.rx836.tw/</id>
  <author>
    <name><![CDATA[阿帕]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[jQ-Plugin] 用jQuery客製化下拉選單]]></title>
    <link href="http://blog.rx836.tw/blog/jquery-drop-down-lists/"/>
    <updated>2013-01-23T17:16:00+08:00</updated>
    <id>http://blog.rx836.tw/blog/jquery-drop-down-lists</id>
    <content type="html"><![CDATA[<p>下拉式選單(DropDownList)在表單填寫裡面，是很常用到的網頁元素，但原生的下拉式選單看久了，難免會覺得太過單調，有時為了配合整體網站的設計，會有客製化的需求，而這篇文章主要是介紹如何用 jQuery plugin 客製化下拉選單</p>

<!--more-->


<p>另外對客製化 CheckBox 有興趣的朋友，也可以參考 <a href="http://blog.rx836.tw/blog/css3-checkboxes-radiobuttons/" target="_blank">[CSS] 拋棄原生checkbox用CSS3自己簡單動手做</a> 這篇文章</p>

<h2>Start</h2>

<p>這裡我主要用的是 jquery.dropdown.js 這支plugin，首先要先下載js和css回來</p>

<p><a href="http://tympanus.net/Development/SimpleDropDownEffects/SimpleDropDownEffects.zip?84cd58" target="_blank">DOWNLOAD SOURCE</a></p>

<p>在js的資料夾裡面有兩個檔案，分別是</p>

<p>jquery.dropdown.js</p>

<p>modernizr.custom.63321.js</p>

<p>連同 jQuery 載入到網頁裡面</p>

<pre><code>&lt;script src="js/modernizr.custom.63321.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="http://code.jquery.com/jquery-1.8.2.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="js/jquery.dropdown.js"&gt;&lt;/script&gt;
</code></pre>

<p>會用到 modernizr 是因為在 jquery.dropdown.js 這支檔案裡面有用到判斷，是否支援transition，稍後會提到</p>

<p>接著是html部份</p>

<pre><code>&lt;select id="cd-dropdown" class="cd-select"&gt;
    &lt;option value="-1" selected&gt;請選擇一種動物&lt;/option&gt;
    &lt;option value="1" class="icon-monkey"&gt;猴子&lt;/option&gt;
    &lt;option value="2" class="icon-bear"&gt;熊&lt;/option&gt;
    &lt;option value="3" class="icon-squirrel"&gt;松鼠&lt;/option&gt;
    &lt;option value="4" class="icon-elephant"&gt;大象&lt;/option&gt;
&lt;/select&gt;
</code></pre>

<p>js部份，一行程式碼很簡單明瞭</p>

<pre><code>$( function() {

    $( '#cd-dropdown' ).dropdown();

});
</code></pre>

<p>css部份</p>

<p>利用 plugin 做客製化下拉選單，關鍵就在於將原生的&lt;select&gt;用jQuery替換掉，仔細看替換掉後的html結構，會發現其實長的像這樣</p>

<pre><code>&lt;div class="cd-dropdown"&gt;
    &lt;span&gt;請選擇一種動物&lt;/span&gt;
    &lt;input type="hidden" name="cd-dropdown"&gt;
    &lt;ul&gt;
        &lt;li data-value="1"&gt;&lt;span class="icon-monkey"&gt;猴子&lt;/span&gt;&lt;/li&gt;
        &lt;li data-value="2"&gt;&lt;span class="icon-bear"&gt;熊&lt;/span&gt;&lt;/li&gt;
        &lt;li data-value="3"&gt;&lt;span class="icon-squirrel"&gt;松鼠&lt;/span&gt;&lt;/li&gt;
        &lt;li data-value="4"&gt;&lt;span class="icon-elephant"&gt;大象&lt;/span&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
</code></pre>

<p>所以就可以藉由CSS來自行裝飾，就像下面結果圖一樣</p>

<p><img src="https://lh5.googleusercontent.com/-evzDeROGJXM/UP_5cKXoSNI/AAAAAAAACOc/GgnPHX_BsjQ/s328/2013-01-23_220729.jpg" /></p>

<p><img src="https://lh5.googleusercontent.com/-jM7YmJVygBs/UP_5cFenQ8I/AAAAAAAACOY/PzAILoleuwo/s345/2013-01-23_220659.jpg" /></p>

<p>這邊我是直接用範例所附的css檔</p>

<h3>modernizr</h3>

<p>前面有提到使用 modernizr 的關係是因為有些瀏覽器不支援transition，但自己要寫那些判斷程式又稍嫌麻煩，而 modernizr 正是解決這方面需求的js函式庫，藉由函式庫我們可以透過 class 的名稱來做判斷，例如 firefox 有支援 transition 的話，在html上會看到 class 名稱為 csstransitions</p>

<p><img src="https://lh4.googleusercontent.com/-7d8Z_8f3zqI/UP_5cDplfCI/AAAAAAAACOU/FuEhK0BRsd4/s452/2013-01-23_221311.jpg" /></p>

<p>IE9沒支援 class 名稱就是 no-csstransitions</p>

<p><img src="https://lh3.googleusercontent.com/-G-9zngyNiH4/UP_5dLraQhI/AAAAAAAACOk/foYV278aKs0/s401/2013-01-23_221500.jpg" /></p>

<h3>更不一樣的下拉選單</h3>

<p>這款 plugin 還有提供一些參數做變化，例如給予的參數值像下面這樣</p>

<pre><code>$( '#cd-dropdown' ).dropdown( {
    gutter : 5,
    delay : 40,
    rotated : 'left'
} );
</code></pre>

<p>其中　rotated　就是旋轉的方向，再搭配css就可以做出更有特色的下拉選單</p>

<p><img src="https://lh6.googleusercontent.com/-McvNbs1qkQs/UP_5daenx8I/AAAAAAAACOo/pfBHIHJWFyQ/s471/2013-01-23_223858.jpg" /></p>

<h2>總結</h2>

<p>在使用上會發現一個問題就是，每當網頁載入時，<strong>因為要透過js來做替換html結構</strong>，所以先看到原生的下拉選單元素，然後瞬間才會換成客製化元素，難免會覺得不夠細膩，但假如了解他運作的方式，直接自己製作html而不用經過 jQuery plugin 更換，會是更好的方法</p>

<h2>參考資料:</h2>

<p><a href="http://tympanus.net/codrops/2012/11/29/simple-effects-for-drop-down-lists/" target="_blank">SIMPLE EFFECTS FOR DROP-DOWN LISTS</a></p>

<p><a href="http://modernizr.com/" target="_blank">modernizr</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[jQ-Plugin] 輕鬆幫表格做responsive]]></title>
    <link href="http://blog.rx836.tw/blog/responsive-tables/"/>
    <updated>2013-01-21T12:28:00+08:00</updated>
    <id>http://blog.rx836.tw/blog/responsive-tables</id>
    <content type="html"><![CDATA[<p>因為移動設備的成長，RWD(Responsive web design)這個應用已經在許多網頁上都看的到，除了做一個專屬於 mobile 的網站設計以外，也可以讓一個網站來符合許多螢幕解析度大小，而這兩個方法的優與劣，如何選擇，就看專案當下的情況來做決定</p>

<!--more-->


<p>例如以文字為主的部落格或是簡單的頁面就很適合做RWD，但介面太複雜或是功能太多，建議還是另外開發專屬的獨立網站，有興趣的人可以參考這篇的 <a href="http://cssindesign.tumblr.com/post/40513264330/responsive-web" target="_blank">實作心得</a>，這邊就不討論太多</p>

<p>今天這篇主要介紹一個jQuery plugin，叫FooTable，利用簡單的幾行程式，就可以將網頁裡面的 table 擁有 RWD 的效果</p>

<h2>Start</h2>

<p>首先要先下載 js 和 css，可以到 github 下載</p>

<p><a href="https://github.com/bradvin/FooTable" target="_blank">DOWNLOAD</a></p>

<p>載回來後會發現裡面有一些 js 和 css檔，還有幾個 demo 範例，但有一些檔案是看情形選擇載入，其中最主要的只有兩個檔案，分別是</p>

<p>footable-0.1.js 和 footable-0.1.css</p>

<p>在網頁裡面載入這兩支檔案和jQuery以後，接下來就來做簡單的範例</p>

<h3>phone和tablet</h3>

<p>FooTable最主要會判斷三種情形，除了一般的 Desktop 以外，還分成 phone 和 tablet，開發人員可以在每個欄位中，選擇要在什麼情況底下做縮排，以下是基本的HTML</p>

<p>HTML部份</p>

<pre><code>&lt;table class="footable"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th data-class="expand"&gt;
        姓名
      &lt;/th&gt;
      &lt;th&gt;
        職業
      &lt;/th&gt;
      &lt;th data-hide="phone"&gt;
        年齡
      &lt;/th&gt;
      &lt;th data-hide="phone,tablet"&gt;
        性別
      &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;小馬&lt;/td&gt;&lt;td&gt;司機&lt;/td&gt;&lt;td&gt;59&lt;/td&gt;&lt;td&gt;男&lt;/td&gt;&lt;/tr&gt;          
    &lt;tr&gt;&lt;td&gt;小陳&lt;/td&gt;&lt;td&gt;保全&lt;/td&gt;&lt;td&gt;42&lt;/td&gt;&lt;td&gt;男&lt;/td&gt;&lt;/tr&gt;          
    &lt;tr&gt;&lt;td&gt;小英&lt;/td&gt;&lt;td&gt;行政&lt;/td&gt;&lt;td&gt;27&lt;/td&gt;&lt;td&gt;女&lt;/td&gt;&lt;/tr&gt;          
  &lt;/tbody&gt;
&lt;/table&gt;
</code></pre>

<p>js部份</p>

<pre><code>$(function() {
  $('table').footable();
});
</code></pre>

<p>可以看到在&lt;thead&gt;底下會有 data-class 和 data-hide 兩個 HTML5 的自訂屬性，如果 data-class="expand" 設在『姓名』那個欄位，<strong>代表的意思是會在此欄位建立 icon 圖案 『+』 和 『-』</strong>，而 data-hide 指的是<strong>該欄位在什麼情況下會隱藏縮排</strong>，例如在上面範例中的年齡設為 data-hide="phone"，表示在 phone 的寬度下會觸發此事件</p>

<p>那或許會有人疑問，phone和 tablet 的寬度判斷依據是什麼呢？這邊可以直接打開 footable-0.1.js 這支檔案，搜尋底下這行原始碼</p>

<pre><code>options: {
  delay: 100, // The number of millseconds to wait before triggering the react event
  breakpoints: { // The different screen resolution breakpoints
    phone: 480,
    tablet: 1024
  },
...
...
}
</code></pre>

<p>會發現原來 FooTable 預設屬性 phone 的寬度為480px，而 tablet 是1024，所以假設現在 Table 寬度只有 780，那擁有tablet 這個值的欄位就會做隱藏縮排，這些值都可以依照個人需求做修改，說了那麼多怕大家看不懂，那就直接來看結果圖吧</p>

<p>table寬度大於1024px</p>

<p><img src="https://lh6.googleusercontent.com/-SenmhgVS_s4/UPz2ku3YqeI/AAAAAAAACNc/vpvMWrwVeFk/s1077/2013-01-21_152914.jpg" /></p>

<p>table寬度小於1024px，大於480px，<strong>性別被縮排，姓名多了展開的圖案『+』</strong></p>

<p><img src="https://lh6.googleusercontent.com/-AZyIxH4mZgY/UPz2kr5W8CI/AAAAAAAACNU/wDNk3hkqDNc/s823/2013-01-21_153046.jpg" /></p>

<p>table寬度小於480px，性別和年齡都被縮排</p>

<p><img src="https://lh4.googleusercontent.com/-taApAI4ZcRk/UPz2ks5zlpI/AAAAAAAACNY/JM2RGkX-BPU/s219/2013-01-21_153224.jpg" /></p>

<p>點擊每一列即可展開看被隱藏的資訊</p>

<p><img src="https://lh3.googleusercontent.com/-PNOSlcS6mhU/UPz2lfqAOvI/AAAAAAAACNg/jhzxH6Y5l_M/s227/2013-01-21_153321.jpg" /></p>

<p>是不是很方便呢？</p>

<h3>搜尋與排序</h3>

<p>除了一般的 table 以外，常用到的『搜尋』和『排序』當然也不可少，FooTable貼心的地方在於已經幫你處理好這方面的需求，只要載入相關的 js 和加上自訂的 data- 屬性就可以完成所要的功能</p>

<p><a href="http://themergency.com/footable-demo/demo-sorting.htm" target="_blank">Sorting demo</a></p>

<p><a href="http://themergency.com/footable-demo/demo-filtering.htm" target="_blank">Filtering demo</a></p>

<p>但比較可惜的地方在於沒有實做分頁這塊，所以如果有這方面需求的朋友，可能要自己另外加上</p>

<h2>總結</h2>

<p>個人覺得這款jQuery plugin做的相當簡單，使用上也十分容易，主要就是在欄位方面加上 data- 屬性，可擴展性也高，可以依照『搜尋』和『排序』的邏輯模式新增自己的功能，在縮排與顯示方面的UI設計也讓人感到實用方便，有興趣的朋友可以參考看看</p>

<h3>參考資料:</h3>

<p><a href="http://themergency.com/footable/" target="_blank">FooTable</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[jQ-Plugin] 做出磁磚效果變化的圖片轉換]]></title>
    <link href="http://blog.rx836.tw/blog/jquery-slice-images-into-tiles/"/>
    <updated>2013-01-18T16:36:00+08:00</updated>
    <id>http://blog.rx836.tw/blog/jquery-slice-images-into-tiles</id>
    <content type="html"><![CDATA[<p><img src="https://lh4.googleusercontent.com/-WH3Ni1ou3Ww/UPkk71vSTvI/AAAAAAAACMk/hcFofq9eTuU/s641/2013-01-18_164425.jpg" /></p>

<p>不知道大家有沒有看過這種切成一塊一塊的轉換圖片，類似磁磚拼貼的效果，最近看到一篇講解教學的文章，自己消化了一下，來分享並且紀錄下來</p>

<!--more-->


<h2>Start</h2>

<p>首先是HTML部份</p>

<pre><code>&lt;div class="sliced"&gt;
    &lt;img src="pic.jpg"/&gt;
&lt;/div&gt;
</code></pre>

<p>只用一個&lt;div&gt;包住一個&lt;img&gt;</p>

<p>接著是CSS</p>

<pre><code>.sliced {
    position: relative;
    width: 640px; 
    height: 400px;
}
</code></pre>

<p>因為我們要將效果自製成一個jQuery plugin，方便以後可以重複使用，所以這邊要先建立一個基本的 jQuery plugin 樣板</p>

<pre><code>;(function( $, window ) {

    //預設值
    var _defaults = {
        x      : 2, // 預設對圖片x軸要切幾塊
        y      : 2, // 預設對圖片y軸要切幾塊
        random : true, // 磚塊是否要按照順序切換
        speed  : 2000 // 效果的速度
    };              

    $.fn.sliced = function( options ) {

        var o = $.extend( {}, _defaults, options );

        return this.each(function() {
            var $container = $(this); // cache selector for best performance
            // 主要程式碼從這裡開始寫            

        });
    };

}( jQuery, window ));
</code></pre>

<p>當然如果想要寫其他 Plugin 的人，也可以使用這個樣板去做修改</p>

<h3>原理</h3>

<p>做好基本的準備工作以後，我們要來開始撰寫主程式部分，但在撰寫之前，先來說明一下這個效果是如何產生，其實原理很簡單，在效果執行時，會先將原圖的屬性設為 <strong>display: none</strong>，接著加上&lt;div&gt;並且設定背景圖片，類似拼圖一樣一塊一塊拼出原圖，如果覺得我描述的不清楚的話，下面有範例可以參考XD</p>

<p><a href="http://jsfiddle.net/rx836/sbBeA/" target="_blank">範例</a></p>

<p>這邊的重點在於 <strong>background-position</strong> 這個屬性，利用這個屬性做背景圖片的位移，每一個&lt;div&gt;代表著圖片的一個區塊，也許有些人看到這邊已經知道端倪，因為只要把圖片轉換成一個一個的&lt;div&gt;，透過操作每個&lt;div&gt;，就可以做出特效</p>

<p>接著我們把程式碼寫完，先建立一些變數</p>

<pre><code>var width = $container.width(),
    height = $container.height(),
    $img = $container.find('img'),
    n_tiles = o.x * o.y,
    tiles = [], $tiles;
</code></pre>

<p>接著是建立一塊一塊的磁磚，並且把原圖隱藏，最後加上剛建立好的磁磚，至於要建立多少個就看當初給予的值</p>

<pre><code>for ( var i = 0; i &lt; n_tiles; i++ ) {
    tiles.push('&lt;div class="tile"/&gt;');
}

$tiles = $( tiles.join('') );

//將原圖隱藏並加上磁磚
$img.hide().after( $tiles );
</code></pre>

<p>接著利用原始圖檔當作每個磁磚的背景圖，在將背景圖做適當的位移，至於要位移多少，就看每個&lt;div&gt;(也就是每個磁磚)所代表的區塊</p>

<pre><code>//利用原始圖檔當作磁磚背景圖
$tiles.css({
    width: width / o.x,
    height: height / o.y,
    backgroundImage: 'url('+ $img.attr('src') +')'
});    

//替背景圖調整位置
$tiles.each(function() {
    var pos = $(this).position();
    console.log(pos);
    $(this).css( 'backgroundPosition', -pos.left +'px '+ -pos.top +'px' );
});
</code></pre>

<p>因為要拼成一塊圖片的關係，所以也要利用 float這個屬性，直接在CSS加上即可</p>

<pre><code>.tile { float: left; }
</code></pre>

<p>到這邊為止，你可以加上下面這段程式碼，看看效果如何</p>

<pre><code>$('.sliced').sliced({ x:4, y:4 }); // 將圖片切成4x4
</code></pre>

<p>看圖片好像沒什麼改變，但打開firebug看看HTML部份，有發現到不一樣了嗎？</p>

<p><img src="https://lh5.googleusercontent.com/-t0N7b55zbPE/UPkk8Kc6OaI/AAAAAAAACMo/1L6StJdwJ3s/s1026/2013-01-18_180320.jpg" /></p>

<p>就如剛剛所敘述的，<strong>原始圖片已經隱藏，並且用&lt;div&gt;拼湊而出</strong></p>

<h3>製作效果</h3>

<p>知道了原理以後，接著讓我們繼續把程式碼繼續寫完，接下來是隨機變換的部份</p>

<pre><code>function range( min, max, rand ) {
  var arr = ( new Array( ++max - min ) )
    .join('.').split('.')
    .map(function( v,i ){ return min + i });
  return rand
    ? arr.map(function( v ) { return [ Math.random(), v ] })
       .sort().map(function( v ) { return v[ 1 ] })
    : arr;
}
</code></pre>

<p>這部份的 code 可以參考 <a href="http://stackoverflow.com/questions/12528886/random-but-just-in-chrome" target="_blank">stackoverflow</a>，簡單來說就是一個產生<strong>特定範圍的隨機排列的數字</strong>，但因為是函式的關係我們要把他跟一開始<strong>建立預設值 var _defaults 放在一起</strong>，剩下的 code 就是處理切換效果的部份</p>

<pre><code>var tilesArr = range( 0, n_tiles, o.random ),
tileSpeed = o.speed / n_tiles;              

$container.on( 'animate', function() {

    tilesArr.forEach(function( tile, i ) {                  
        setTimeout(function(){
            $tiles.eq( tile ).toggleClass( 'tile-animated' );
        }, i * tileSpeed );
    });

});
</code></pre>

<p>我們將每個磁磚加上animate，在特定時間內做 opacity 屬性的變化，最後加上一個按鈕做觸發，和套用plugin，看看效果如何</p>

<p>html</p>

<pre><code>&lt;button&gt;Toggle&lt;/button&gt;
</code></pre>

<p>js</p>

<pre><code>$('button').click(function() {
    $('.sliced').trigger('animate');
});
</code></pre>

<p><a href="http://jsfiddle.net/rx836/jQaJh/2/" target="_blank">完整的範例</a></p>

<h2>結論</h2>

<p>只要知道是拼圖的概念，就可以知道其實不是針對原圖去做變化，巧妙的利用&lt;div&gt;也可以做出類似flash的效果</p>

<h3>參考資料:</h3>

<p><a href="http://www.onextrapixel.com/2012/11/23/how-to-slice-images-into-tiles-with-jquery-and-css3-transitions/" target="_blank">How to Slice Images into Tiles with jQuery and CSS3 Transitions</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[jQ-Plugin] 跟著Pinterest將menu固定起來 - Sticky]]></title>
    <link href="http://blog.rx836.tw/blog/sticky-object/"/>
    <updated>2013-01-08T11:11:00+08:00</updated>
    <id>http://blog.rx836.tw/blog/sticky-object</id>
    <content type="html"><![CDATA[<p>pinterest的網站設計影響了許多人，之前也曾經寫過實做的文章 - <a href="http://blog.rx836.tw/blog/jquery-waterfall-infinitescroll/" target="_blank">做出Pinterest效果的介面 用jQuery Masonry + Infinite Scroll</a>，但其實在這種被稱為 Waterfall 的網頁設計底下，還有許多小技巧和應用需要學習</p>

<!--more-->


<p>其中一個就是將上方的 menu 固定在整個視窗的某個地方，因為像這種無限延伸的設計，不知道整個網頁會長到多長，在User瀏覽網頁時，如果想要中途切換其他頁面，沒有將 menu 固定在視窗的某個區塊，會發現拉回最上方非常的不方便，所以一般來說都會設計成跟著頁面做移動，如下圖</p>

<p>一開始menu固定在上方的某個區塊</p>

<p><img src="https://lh3.googleusercontent.com/-QU3DxU6ccVg/UOu9t-bGOmI/AAAAAAAACKY/y8rQuxSivyA/s671/2013-01-08_114010.jpg" /></p>

<p>當頁面往下拉時，會跟著移動</p>

<p><img src="https://lh5.googleusercontent.com/-A57qEkc8I7s/UOu9tzDm2FI/AAAAAAAACKc/ALiiUe-IdrQ/s589/2013-01-08_114044.jpg" /></p>

<p>要實現這樣的設計並不困難，今天就來介紹一款方便的jQuery plugin - Sticky</p>

<h2>Start</h2>

<p>首先先從github下載js檔回來</p>

<p><a href="https://github.com/garand/sticky" target="_blank">DOWNLOAD PLUGIN</a></p>

<p>裡面有個檔名為jquery.sticky.js，將他載入到網頁裡面</p>

<p>接著html部份</p>

<pre><code>&lt;p&gt;上方元素&lt;/p&gt;
&lt;div id="sticker"&gt;
    &lt;p&gt;我是menu&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;下方元素&lt;/p&gt;
</code></pre>

<p>id為 sticker 的&lt;div&gt;就是要被固定在上方的元素，為了方便demo，可以給他一些css樣式</p>

<pre><code>body {
  height: 10000px;
  padding: 0;
  margin: 0;
}

#sticker {
  background: #bada55;
  color: white;
  width: 300px;
  font-family: Droid Sans;
  font-size: 40px;
  line-height: 1.6em;
  font-weight: bold;
  text-align: center;
  padding: 20px;
  margin: 0 auto;
  text-shadow: 0 1px 1px rgba(0,0,0,.2);
  border-radius: 50px;
}
</code></pre>

<p>這邊注意到 body 的 height 為1000px是為了讓網頁可以一直往下拉</p>

<p>接著是js部份</p>

<pre><code>$("#sticker").sticky({ topSpacing: 0, center:true, className:"hey" });
</code></pre>

<p>最後來看展示結果</p>

<p>捲動網頁前</p>

<p><img src="https://lh3.googleusercontent.com/-xma-MsT9Zww/UOu9t_QwQGI/AAAAAAAACKU/cdJD0qMOFNM/s1023/2013-01-08_124326.jpg" /></p>

<p>捲動網頁後</p>

<p><img src="https://lh4.googleusercontent.com/-NJLAKGJfXP0/UOu9u6udgXI/AAAAAAAACKg/VISQuhKeefM/s1003/2013-01-08_124342.jpg" /></p>

<p>會發現 "我是menu" 這個區塊會一直固定在網頁上方，達到我們想要的效果，如果圖片說明不清，建議還是實做 Demo 比較清楚XD</p>

<h2>參數部份</h2>

<p>topSpacing: 元素與頁面頂端有多少固定距離</p>

<p>bottomSpacing: 元素與頁面底端有多少固定距離</p>

<p>className: 當觸發事件時增加的 CSS class, 預設是is-sticky</p>

<p>wrapperClassName: 自訂 wrapper CSS class, 預設是sticky-wrapper</p>

<p>getWidthFrom: 選擇一個元素做為參考值設定為固定寬度</p>

<h2>想要自己實做的話..</h2>

<p>如果試著去看 source code 的話，會發現實做並不困難，主要就是計算 <strong>scrollTop()</strong> 目前的位置，如果大於某個值就觸發事件，將要固定的元素添加 position:fixed，接著在看要距離上方多少空間就設定多少 top 值，主要的判斷程式碼部分如下，有興趣的人可以再自行參考</p>

<pre><code>if (scrollTop &lt;= etse) {
  if (s.currentTop !== null) {
    s.stickyElement
      .css('position', '')
      .css('top', '');
    s.stickyElement.parent().removeClass(s.className);
    s.currentTop = null;
  }
}
else {
  var newTop = documentHeight - s.stickyElement.outerHeight()
    - s.topSpacing - s.bottomSpacing - scrollTop - extra;
  if (newTop &lt; 0) {
    newTop = newTop + s.topSpacing;
  } else {
    newTop = s.topSpacing;
  }
  if (s.currentTop != newTop) {
    s.stickyElement
      .css('position', 'fixed')
      .css('top', newTop);

    if (typeof s.getWidthFrom !== 'undefined') {
      s.stickyElement.css('width', $(s.getWidthFrom).width());
    }

    s.stickyElement.parent().addClass(s.className);
    s.currentTop = newTop;
  }
}
</code></pre>

<h3>參考資料:</h3>

<p><a href="http://stickyjs.com/" target="_blank">Sticky</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[jQ-Plugin] 輕鬆加入Tag標籤功能的plugin-Tags Manager]]></title>
    <link href="http://blog.rx836.tw/blog/jquery-tags-manager/"/>
    <updated>2012-12-20T11:11:00+08:00</updated>
    <id>http://blog.rx836.tw/blog/jquery-tags-manager</id>
    <content type="html"><![CDATA[<p><img src="https://lh5.googleusercontent.com/-gxsgoBxzDI8/UNKSYvcQnPI/AAAAAAAACFc/7PiDy2u-3KA/s745/2012-12-20_111514.jpg" /></p>

<p>如果有在 <a href="http://stackoverflow.com/" target="_blank">stackoverflow</a> 上找過答案的朋友，應該對於他們的tag並不陌生，類似這樣的功能在許多blog或是論壇都有，但光是只有Tag這個功能已經不是重點所在，如何讓User有良好的Tag經驗是現今大家所追求的，簡單的說就是使用者經驗(UX)，今天就來介紹一款我個人覺得不錯的jQuery plugin - Tags Manager</p>

<!--more-->


<h2>Start</h2>

<p><a href="https://github.com/max-favilli/tagmanager" target="_blank">Download from Github</a></p>

<p>使用方式相當相當的簡單，從github載下來後，將Tags Manager和所需要的css檔案掛載到網頁裡面，接下來只有兩個步驟</p>

<p>第一步驟就是在html裡面加上一個&lt;input&gt;</p>

<pre><code>&lt;input type="text" name="tags" placeholder="Tags" class="tagManager"/&gt;
</code></pre>

<p>第二個步驟就是在js加上一段程式碼</p>

<pre><code>jQuery(".tagManager").tagsManager();
</code></pre>

<p>完成，本篇介紹到此結束</p>

<p>.</p>

<p>.</p>

<p>.</p>

<p>.</p>

<p>好啦，真的就只有這兩行，打開網頁後你可以看到會有一個input，裡面有個預設文字Tags</p>

<p><img src="https://lh5.googleusercontent.com/-OR2B3B8UzXs/UNKSYj723cI/AAAAAAAACFg/Pz1flQNbeKg/s149/2012-12-20_113137.jpg" /></p>

<p>接著你在裡面輸入文字，只要<strong>你的焦點離開input</strong>、<strong>按下Enter</strong>或是<strong>加上逗號</strong>，都會自動幫你生成一個Tag</p>

<p><img src="https://lh5.googleusercontent.com/-Rq7wFJw2IH4/UNKSYmV6tWI/AAAAAAAACFk/k9e3c11qyZg/s202/2012-12-20_113346.jpg" /></p>

<p>而假如要刪除呢？只要對著Tag裡面的小x按下即可，這對於使用者來說非常的方便使用，那對於開發者來說要如何操作呢？</p>

<p>也許會有人問那我要怎麼取得那些Tag的值，如果你有用firebug或是google Chrome(按下F12呼叫開發者環境)，可以看到Tags Manager會在增加Tag的同時，默默的在背後新增一個hidden，並且把值丟到裡面做暫存，所以當開發者想要將Tag的值送到Server端時，可以從這裡取出</p>

<p><img src="https://lh4.googleusercontent.com/-hfXPhL3aF1g/UNKSZaCL9fI/AAAAAAAACFo/aKDNo-6VMj8/s658/2012-12-20_113905.jpg" /></p>

<p>當然，Tag裡面還有很重要的一個功能就是智能輸入，會出現關鍵字的提示，但因為Tags Manager是利用 <a href="http://twitter.github.com/bootstrap/index.html" target="_blank">Bootstrap</a> 裡面的 <a href="http://twitter.github.com/bootstrap/javascript.html#typeahead" target="_blank">typeahead</a> ，所以要用到關鍵字的提示要載入Bootstrap才可以使用，以下就是範例</p>

<pre><code>jQuery(".tagManager").tagsManager({
    prefilled: ["Pisa", "Rome"],
    typeahead: true,
    typeaheadSource: funSource
});

function funSource(){
    var ret = ["Manchester", "Astonvilla", "Real Madrid", "Barcelona", "Milan AC", "Internazionale", "Roma AC", "Chelsea"];
    return ret;
} 
</code></pre>

<p>你可以將需要提示的tag寫成一個陣列，將值塞入參數 <strong>typeaheadSource</strong></p>

<p>其他的參數分別為</p>

<ul>
<li>prefilled:預先給予的Tag</li>
<li>CapitalizeFirstLetter:如果為true，會將Tag第一個字轉為大寫，其他為小寫</li>
<li>preventSubmitOnEnter:如果為true，假設&lt;input&gt;在&lt;form&gt;裡面，按下Enter將不會觸發Sibmit</li>
<li>typeahead:如果為true，就會有關鍵字的提示選擇</li>
<li>typeaheadAjaxSource:可以從Server端接收JSON格式的關鍵字提示選擇</li>
<li>typeaheadSource:可以接收陣列或funtion回傳陣列的關鍵字提示選擇</li>
</ul>


<p>這邊只介紹幾個主要的參數，其他還有許多不錯的參數應用可以直接參考 <a href="http://welldonethings.com/tags/manager" target="_blank">Tags Manager</a></p>

<h2>總結</h2>

<p>這是一套蠻方便的plugin，對於他的樣式如果不太喜歡還可以自己進行修改，另外對Tag還想要有更多的其他選擇，也可以參考 <a href="http://ioncache.github.com/Tag-Handler/" target="_blank">Tag Handler</a>、<a href="http://xoxco.com/projects/code/tagsinput/" target="_blank">jQuery Tags Input Plugin</a> 這些參考文章</p>

<h3>參考資料:</h3>

<p><a href="http://welldonethings.com/tags/manager" target="_blank">Tags Manager (a jQuery plugin)</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
</feed>
