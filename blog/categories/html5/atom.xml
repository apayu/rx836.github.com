<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: HTML5 | apa]]></title>
  <link href="http://blog.rx836.tw/blog/categories/html5/atom.xml" rel="self"/>
  <link href="http://blog.rx836.tw/"/>
  <updated>2012-12-12T06:51:42+08:00</updated>
  <id>http://blog.rx836.tw/</id>
  <author>
    <name><![CDATA[阿帕]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[HTML5] 5個你可能不知道的HTML5 API]]></title>
    <link href="http://blog.rx836.tw/blog/5-html5-api-you-did-not-know/"/>
    <updated>2012-12-12T06:46:00+08:00</updated>
    <id>http://blog.rx836.tw/blog/5-html5-api-you-did-not-know</id>
    <content type="html"><![CDATA[<p>HTML5已經火紅了一陣子，姑且不論他到底能不能主宰未來的網頁技術，達到一統江山，天下太平(?)的目的，至少現在已經越來越多人開始將HTML5應用在實際的專案上，小弟雖然目前還沒大量使用到新技術，但今天還是來分享五個可能比較少人知道的，HTML和JavaScript API，希望讓大家多了解HTML5還有哪些新玩意</p>

<!--more-->


<h2>Fullscreen API</h2>

<p>最近或許在網路上看過一些可以做全螢幕效果的jQuery plugin，實現這個效果用到的就是 <strong>Fullscreen API</strong>，範例如下</p>

<pre><code>function launchFullScreen(element) {
  if(element.requestFullScreen) {
    element.requestFullScreen();
  } else if(element.mozRequestFullScreen) {
    element.mozRequestFullScreen();
  } else if(element.webkitRequestFullScreen) {
    element.webkitRequestFullScreen();
  }
}

launchFullScreen(document.documentElement); // the whole page
launchFullScreen(document.getElementById("videoElement")); // any individual element
</code></pre>

<p>你可以給予整個HTML做整頁的全螢幕，也可以單獨給某個ID的元素，但有一點要注意的是，我在寫範例時需加上一些動作去 <strong>啟動</strong> 全螢幕，例如點集某個button之類的，而不能在一進入頁面就啟用全螢幕模式，這點跟 <strong>另開啟視窗</strong> 有點像，另外在啟用前瀏覽器會詢問你是否允許全螢幕，如下圖</p>

<p><img src="https://lh6.googleusercontent.com/--HepWolPOjY/UMe36hSpsNI/AAAAAAAACEA/mMSMIKo40F8/s692/aaa.jpg" /></p>

<p>這效果經常用在一些遊戲上面，例如擁有第一人稱視角的射擊遊戲 - <a href="https://developer.mozilla.org/en-US/demos/detail/bananabread" target="_blank">BananaBread</a></p>

<h2>Page Visibility API</h2>

<p><img src="https://lh4.googleusercontent.com/-IDcX0ql8dOs/UMe36kP6YKI/AAAAAAAACD8/Jg5gmM5w4OI/s370/a2.jpg" /></p>

<p>老實說第一次Demo這個API的效果覺得還蠻好笑的...，就如同範例一樣，他可以讓開發者監控User是不是在此頁籤，可以從範例效果得知，當我離開此頁籤時，HTML Title就會改成 "我又跳出去了"，如果回到此頁籤當中，就會改回 "我又跳進來了"，其實還蠻欠打的...，阿不是，是蠻實用的XD</p>

<pre><code>// Adapted slightly from Sam Dutton
// Set name of hidden property and visibility change event
// since some browsers only offer vendor-prefixed support
var hidden, state, visibilityChange; 
if (typeof document.hidden !== "undefined") {
  hidden = "hidden";
  visibilityChange = "visibilitychange";
  state = "visibilityState";
} else if (typeof document.mozHidden !== "undefined") {
  hidden = "mozHidden";
  visibilityChange = "mozvisibilitychange";
  state = "mozVisibilityState";
} else if (typeof document.msHidden !== "undefined") {
  hidden = "msHidden";
  visibilityChange = "msvisibilitychange";
  state = "msVisibilityState";
} else if (typeof document.webkitHidden !== "undefined") {
  hidden = "webkitHidden";
  visibilityChange = "webkitvisibilitychange";
  state = "webkitVisibilityState";
}

// Add a listener that constantly changes the title
document.addEventListener(visibilityChange, function() {
  if(document[state]=='visible'){
    document.title = '我又跳進來了';
  }else if(document[state]=='hidden'){
    document.title = '我又跳出去了';
  }
}, false);

// Set the initial value
document.title = '我又跳進來了';
</code></pre>

<h2>getUserMedia API</h2>

<p>這個API很酷的地方在於可以利用一些電腦的視訊媒體做互動!例如像是操作筆電的webcam，搭配&lt;canvas&gt;可以做到拍攝照片的效果</p>

<pre><code>// Put event listeners into place
window.addEventListener("DOMContentLoaded", function() {
  // Grab elements, create settings, etc.
  var canvas = document.getElementById("canvas"),
    context = canvas.getContext("2d"),
    video = document.getElementById("video"),
    videoObj = { "video": true },
    errBack = function(error) {
      console.log("Video capture error: ", error.code); 
    };

  // Put video listeners into place
  if(navigator.getUserMedia) { // Standard
    navigator.getUserMedia(videoObj, function(stream) {
      video.src = stream;
      video.play();
    }, errBack);
  } else if(navigator.webkitGetUserMedia) { // WebKit-prefixed
    navigator.webkitGetUserMedia(videoObj, function(stream){
      video.src = window.webkitURL.createObjectURL(stream);
      video.play();
    }, errBack);
  }
}, false);
</code></pre>

<p>可以直接看很強大的 <a href="http://davidwalsh.name/demo/camera.php" target="_blank">Demo</a> 部份(記得使用Google Chrome效果較佳)</p>

<h2>Battery API</h2>

<p>我想這個應該不能理解，可以直接取得你目前設備的電池使用狀況，雖然目前還不普及，但至少已經證明了未來用HTML5技術是有可能對硬體底層做操作:)</p>

<pre><code>// Get the battery!
var battery = navigator.battery || navigator.webkitBattery || navigator.mozBattery;

// A few useful battery properties
console.warn("Battery charging: ", battery.charging); // true
console.warn("Battery level: ", battery.level); // 0.58
console.warn("Battery discharging time: ", battery.dischargingTime);

// Add a few event listeners
battery.addEventListener("chargingchange", function(e) {
  console.warn("Battery charge change: ", battery.charging);
}, false);
</code></pre>

<p>一樣可以直接看 <a href="http://davidwalsh.name/demo/battery-api.php" target="_blank">Demo</a>，我用筆電開啟Firefox測試果然還蠻準的，真的就是98%</p>

<p><img src="https://lh4.googleusercontent.com/-ZCusQMl_zlw/UMe36s4-QnI/AAAAAAAACEE/Rih2Tvfj3os/s323/a3.jpg" /></p>

<h2>Link Prefetching</h2>

<p>這個API特別的地方在於，假如你先在HTML裡面加上下面這些Tag，瀏覽器就會在背後偷偷的預先載入這些資源，讓你在連結這些link的時候可以有更順暢的體驗</p>

<pre><code>&lt;!-- full page --&gt;
&lt;link rel="prefetch" href="http://davidwalsh.name/css-enhancements-user-experience" /&gt;

&lt;!-- just an image --&gt;
&lt;link rel="prefetch" href="http://davidwalsh.name/wp-content/themes/walshbook3/images/sprite.png" /&gt;
</code></pre>

<p>以上五個是比較少見的HTML5 API，有些雖然瀏覽器的支援普及度不高，但整體來說都是對User好的使用者體驗，提早先熟悉對開發者來說是件好事，希望以後可以真的大量運用在Web應用程式當中</p>

<h3>參考資料:</h3>

<p><a href="http://davidwalsh.name/more-html5-apis" target="_blank">5 More HTML5 APIs You Didn’t Know Existed</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HTML5] 淺談XMLHttpRequest Level 2]]></title>
    <link href="http://blog.rx836.tw/blog/javascript-xmlhttprequest-level-2/"/>
    <updated>2012-09-10T15:24:00+08:00</updated>
    <id>http://blog.rx836.tw/blog/javascript-xmlhttprequest-level-2</id>
    <content type="html"><![CDATA[<p>HTML5近來可說是越來越火紅，在諸多優點裡面，最讓開發者期待的就是他的標準化，讓各家瀏覽器不再是各自為王，各自為政，這對於網頁開發者來說，可以說是一大利多(前提是微軟真正的統一?不過看IE10頗有那個味道)，今天要來看的是新的標準化-<strong>XMLHttpReuest Level 2</strong></p>

<!--more-->


<p>XMLHttpRequest其實是一個物件，也是AJAX的核心，微軟的IE5是最早支援這個物件，後來在Google大量應用之下，讓AJAX這項技術開始爆紅，也讓各家瀏覽器開始相繼支援，不過因為XMLHttpRequest(底下簡稱XHR)並不是標準，所以導致實做上必須小心各家瀏覽器的差異</p>

<p>早些時候我們要寫AJAX我們可能會這樣寫</p>

<pre><code>var xhr;

// 依照不同的瀏覽器，取得XMLHttpRequest物件
function CreateAJAX() {
　if (window.ActiveXObject) {
　　try {
　　　return new ActiveXObject("Msxml2.XMLHTTP");
　　} catch (e) {
　　　try {
　　　　return new ActiveXObject("Microsoft.XMLHTTP");
　　　} catch (e2) {
　　　　return null;
　　　}
　　}
　} else if (window.XMLHttpRequest) {
　　return new XMLHttpRequest();
　} else {
　　return null;
　}
}

//回傳資料
function onReponseData () {
　if (xhr.readyState == 4) {
　　if (xhr.status == 200) {

      //do something
      //console.log(xhr.responseText);

　　} else {
　　　alert ("伺服器處理錯誤");
　　}
　} 
}

//送出資料
function ajaxSendRequest(uri) {
  xhr = CreateAJAX() ;
　if (!xhr) {
　　alert ('瀏覽器不支援！');
　　return 0;
　}

  xhr.onreadystatechange = onReponseData;
  xhr.open ("GET", uri, true);
  xhr.send ("");
}
</code></pre>

<p>HTML部分</p>

<pre><code>&lt;input type="button" value="執行" onclick="ajaxSendRequest('index.php')" &gt;
</code></pre>

<p>大概提一下幾個重要屬性</p>

<p>1.xhr.readyState:XMLHttpRequest狀態，等於4表示數據已經接收完畢</p>

<p>2.xhr.status:狀態碼，200表示正常</p>

<p>3.xhr.responseText:server回應的文字數據</p>

<p>不過假如有時候要取得跨網域的API資料，受限於安全問題，會因為<a href="http://en.wikipedia.org/wiki/Same_origin_policy" target="_blank">同源限制(Same Origin Policy)</a>的關係而受阻，因此有些人可能會使用<a href="http://zh.wikipedia.org/wiki/JSONP" target="_blank">JSONP</a>來解決此類問題，不過未來在新的標準XMLHttpRequest Level 2會有解決方法</p>

<p>新的XHR的特點如下</p>

<p>1.可以設置HTTP請求時限</p>

<p>2.可以使用FormData管理表單數據</p>

<p>3.可以上傳檔案</p>

<p>4.可以跨網域請求</p>

<p>5.可以獲得server端二進制數據</p>

<p>6.可以獲得數據傳輸的進度訊息</p>

<p>這裡礙於篇幅只介紹請求時限和跨網域請求部分</p>

<h2>Setting and handling timeouts</h2>

<p>有時候我們在做AJAX時，常會無法預知會花多少時間，如果網路速度一慢，User可能會等上好一段時間，甚至會認為網站當掉而離去，這其實不是個好的User Experience</p>

<p>所以在新的標準裡面我們可以這樣做</p>

<pre><code>xhr.timeout = 3000;
</code></pre>

<p>整個範例程式大概如下</p>

<pre><code>function makeRequest() {
  var url = 'index.php';
  var onLoadHandler = function(event){
     // Parse the JSON and build a list.
  }
  var onTimeOutHandler = function(event){
    var content = document.getElementById('content'),
      p = document.createElement('p'),
      msg = document.createTextNode('Just a little bit longer!');
      p.appendChild(msg);
      content.appendChild(p);

      // Restarts the request.
      event.target.open('GET',url);

      // Optionally, set a longer timeout to override the original.
      event.target.timeout = 6000;
      event.target.send();
  }
  var xhr = new XMLHttpRequest();
  xhr.open('GET',url);
  xhr.timeout = 3000;
  xhr.onload = onLoadHandler;
  xhr.ontimeout = onTimeOutHandler;
  xhr.send();
}

makeRequest();
</code></pre>

<p>可以在index.php裡面寫延遲4秒，會發現第一次請求時，會出現<strong>Just a little bit longer!</strong>的提示文字，第二次才順利取得資料，這是因為一開始的等待時間是設定三秒，第二次是六秒</p>

<p><em>備註:Chrome和Safari尚未支援XHR timeouts，只有Oprea和Firefox還有IE10有，IE8和IE9有支援不過用的是XDomainRequest物件</em></p>

<h2>Requesting data from another domain</h2>

<p>跨網域的請求問題(Cross-origin resource sharing，簡稱CORS)，在新的XMLHttpRequest Level 2得到解答，可以針對不同的網域發出請求，但使用時除了要注意瀏覽器是否支援以外，同時Server端也要允許存取才行，而程式寫法其實跟以前一樣</p>

<p>這裡有個<a href="http://devfiles.myopera.com/articles/9482/xhr-credentials.html" target="_blank">範例</a>可以看看</p>

<p>進去範例打開開發者工具，點下Make request的按鈕，查看回應標頭</p>

<p><img src="https://lh3.googleusercontent.com/-gcWY8Edjbn8/UE2qKLxkU1I/AAAAAAAABdk/67b8otL39m8/s492/1.jpg" width="492px" /></p>

<p>會發現<strong>Access-Control-Allow-Origin</strong>的值是<strong>http://devfiles.myopera.com</strong>，也就是此範例的網域，代表只允許此網域的請求，另外<strong>access-control-allow-credentials</strong>的值為ture，表示允許跨網域請求</p>

<p>為了驗證限制某個網域的請求(Access-Control-Allow-Origin)，我自己寫了一個js去對範例中請求的server做Request</p>

<p><img src="https://lh3.googleusercontent.com/-SpkH2Sjk8Bo/UE2tLkTlrWI/AAAAAAAABd0/9sB5KOXXVE0/s707/2.jpg" width="600px" /></p>

<p>會發現雖然狀態碼為200，但實際上根本就沒有東西回應</p>

<p><em>備註:除了IE8與IE9，其他主流瀏覽器都支援此項功能</em></p>

<p>HTML5裡面實在太多可以玩了，也難怪會被譽為殺手級的技術，大家記得在使用這些功能前先查查瀏覽器支援的程度，畢竟HTML5的標準都還在制定中</p>

<p>參考資料:</p>

<p><a href="http://dev.opera.com/articles/view/xhr2/" target="_blank">Introduction to XMLHttpRequest Level 2</a></p>

<p><a href="http://dev.opera.com/articles/view/dom-access-control-using-cross-origin-resource-sharing/" target="_blank">DOM access control using cross-origin resource sharing</a></p>

<p><a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank">XMLHttpRequest Level 2 使用指南</a></p>

<p><a href="http://jck11.pixnet.net/blog/post/11624882-ajax%E6%A0%B8%E5%BF%83-xmlhttprequest%5B%E7%AD%86%E8%A8%98%5D" target="_blank">AJAX核心-XMLHttpRequest[筆記]</a></p>

<p><a href="http://caterpillar.onlyfun.net/Gossip/JavaScript/SecurityConstraint.html" target="_blank">JavaScript Essence: 安全限制</a></p>

<p><a href="http://design2u.me/blog/936/cross-domain-ajax-cross-domain-data-has-been-retrieved-jsonp" target="_blank">Cross Domain Ajax 跨網域抓取資料(JSONP)</a></p>

<p>如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
</feed>
