<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jQuery | apa]]></title>
  <link href="http://rx836.github.com/blog/categories/jquery/atom.xml" rel="self"/>
  <link href="http://rx836.github.com/"/>
  <updated>2012-11-09T16:39:31+08:00</updated>
  <id>http://rx836.github.com/</id>
  <author>
    <name><![CDATA[阿帕]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[jQuery] 不要將任何事情都在jQuery.ready()初始化]]></title>
    <link href="http://rx836.github.com/blog/jquery-not-initialize-all-things/"/>
    <updated>2012-11-06T15:06:00+08:00</updated>
    <id>http://rx836.github.com/blog/jquery-not-initialize-all-things</id>
    <content type="html"><![CDATA[<p>Don't Initialize All the Thing in jQuery.ready()...，這是由<a href="https://twitter.com/elijahmanor" target="_blank">Elijah Manor</a>所寫的一篇文章，裡面提到不要把所有事情都放在jQuery.ready()做初始化(我就是這樣...)，現在就來筆記一下他怎麼說</p>

<!--more-->


<p>寫過jQuery的開發者都知道，在撰寫jQuery都會用jQuery.ready()包起來，在載入網頁時都會先等DOM載入完畢，才會執行裡面的程式碼部分，不過這有時候會讓User在進入網頁時等待過久，失去耐心，如何讓網頁在最短的時間先有畫面出來，也會影響到User使用上的經驗</p>

<p>先看HTML的部分</p>

<pre><code>&lt;form class="form-horizontal well"&gt;
    &lt;fieldset&gt;
        &lt;div class="control-group"&gt;
            &lt;label class="control-label" for="firstName"&gt;First Name&lt;/label&gt;
            &lt;div class="controls"&gt;
                &lt;input id="firstName" type="text" class="input-xlarge"&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;!-- More HTML... --&gt;
        &lt;div class="control-group"&gt;
            &lt;label class="control-label" for="birthday"&gt;Birthday&lt;/label&gt;
            &lt;div class="controls"&gt;
                &lt;input id="birthday" type="text" class="date input-xlarge"&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="form-actions"&gt;
            &lt;button type="submit" class="btn btn-primary"&gt;Save changes&lt;/button&gt;
            &lt;button class="btn"&gt;Cancel&lt;/button&gt;
        &lt;/div&gt;
    &lt;/fieldset&gt;
&lt;/form&gt;
</code></pre>

<p>這是一個很常見的表格，會填寫一些基本資料，不過為了讓User在填寫日期方便，會用「datapicker」這個jQuery UI widget來選擇日期</p>

<p><img src="https://lh5.googleusercontent.com/-mb7pEbTw_FI/UJjDYpdh3oI/AAAAAAAAB28/ZQDyzYWd5K0/s296/123.jpg" /></p>

<p>jQuery程式碼部分</p>

<pre><code>$( document ).ready( function() {

    $( "input.date" ).datepicker({
        minDate: moment().subtract( "months", 1 ).toDate(),
        maxDate: moment().add( "months", 1 ).toDate(),
        dateFormat: "d M, y",
        constrainInput: true,
        beforeShowDay: $.datepicker.noWeekends
    });

});
</code></pre>

<p>用這樣方式的優點是，當用戶選擇日期的時候，jQuery已經準備好並且很快的產生互動，但缺點是:</p>

<p>1.程式碼必須等到DOM載完才能執行</p>

<p>2.沒有使用context，選取器會在整個網頁進行搜尋，降低效能</p>

<p>3.雖然程式碼在初始化的時候就都載入完畢，但不確定是不是真的會用到</p>

<p>所以，為了改善這個情況，我們可以在需要的時候，在執行datapicker</p>

<pre><code>$( document ).on( "focus", "input.date:not(.hasDatepicker)", function() {
    toastr.info( "Initializing " + this.id );

    $( this ).datepicker({
        minDate: moment().subtract( "months", 1 ).toDate(),
        maxDate: moment().add( "months", 1 ).toDate(),
        dateFormat: "d M, y",
        constrainInput: true,
        beforeShowDay: $.datepicker.noWeekends
    });
});
</code></pre>

<p>可以看到在「input.date」上我們監聽了一個事件「focus」，當這個元素並選取時，就會執行裡面的datapicker的UI程式，也就是說，當User要輸入日期時，才會執行這段程式碼，而不用再一開始就將程式碼執行起來</p>

<p>這將會讓我們的網頁不會在這麼的笨重，顯得緩慢，讓我又多學習了一招:)</p>

<p>參考資料:</p>

<p><a href="http://www.elijahmanor.com/2012/10/dont-initialize-all-things-in.html" target="_blank">Don't Initialize All the Things in jQuery.ready() </a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[jQuery] 倒數計時的plugin介紹]]></title>
    <link href="http://rx836.github.com/blog/jquery-countdown-plugins/"/>
    <updated>2012-11-05T11:45:00+08:00</updated>
    <id>http://rx836.github.com/blog/jquery-countdown-plugins</id>
    <content type="html"><![CDATA[<p>之前做活動網站常常會使用到「倒數計時」這項功能，因為其實蠻好寫的，所以都是用jQuery手刻比較多，但今天看到一篇文章是收集有關於jQuery Countdown Plugins，看了一下發現有些功能蠻齊全的，就記錄在這裡，供日後參考</p>

<!--more-->


<h3>jQuery Countdown Script</h3>

<p><img src="https://lh5.googleusercontent.com/-q5CkXGDfwAo/UJc_Gp1lgEI/AAAAAAAAB2E/gjITVcyHIes/s480/lwt_post1.jpg" /></p>

<p>plugin簡單好設定，還可以在同一個頁面設定好幾個不同的倒數計時，甚至是啟動和暫停</p>

<p><a href="http://www.littlewebthings.com/2010/02/jquery-countdown-script/" target="_blank">範例Demo</a></p>

<h3>Countdown</h3>

<p><img src="https://lh6.googleusercontent.com/-pmIMh95RX54/UJc_Ga3R2dI/AAAAAAAAB2I/TR6Dtq4DHYw/s480/jquery-countdown.gif" /></p>

<p>擁有許多進階的設定，支援時區，多種語言等</p>

<p><a href="http://keith-wood.name/countdown.html" target="_blank">範例Demo</a></p>

<h3>The Final Countdown</h3>

<p><img src="https://lh4.googleusercontent.com/-q5WsQiLTJv4/UJc_FlYN8YI/AAAAAAAAB14/eR6HQ1RxIMo/s403/a1.jpg" /></p>

<p>多種呈現方式，可以隨自己喜歡去做調整，倒數計時的部分甚至連毫秒都可以呈現</p>

<p><a href="https://github.com/hilios/jquery.countdown" target="_blank">範例Demo</a></p>

<h3>KK Countdown</h3>

<p><img src="https://lh6.googleusercontent.com/-MKQU1yoPcpA/UJc_Fn8CqaI/AAAAAAAAB2A/AZs0VgXkuco/s600/2.jpg" /></p>

<p>一樣有多種呈現方式，用時間戳記來給予時間</p>

<p><a href="http://krzysztof-furtak.pl/2010/05/kk-countdown-jquery-plugin/" target="_blank">範例Demo</a></p>

<h3>jQuery Countdown</h3>

<p><img src="https://lh5.googleusercontent.com/-uIiwnxje1y0/UJdAu1w52KI/AAAAAAAAB2g/-ZVyh0o40DA/s520/3.jpg" /></p>

<p>利用圖片來呈現，沒有太多功能可以設定，比較簡單的plugin</p>

<p><a href="http://code.google.com/p/jquery-countdown/" target="_blank">範例Demo</a></p>

<h3>jQuery Countdown Timer</h3>

<p><img src="https://lh5.googleusercontent.com/-fmAgRmTcc40/UJc_FilzH0I/AAAAAAAAB18/qyyvqbxCZfU/s620/jquery-countdown-timer.jpg" /></p>

<p>裡面有相當詳細的教學文，教你怎麼使用他們的plugin</p>

<p><a href="http://tutorialzine.com/2011/12/countdown-jquery/" target="_blank">範例Demo</a></p>

<p>倒數計時自己寫並不難，不過有些很特別的功能或是效果用plugin，倒也可以省下不少時間，所以要用plugin或是自己手刻就看各位開發者自己當下的狀況做選擇:)</p>

<p>參考資料:</p>

<p><a href="http://www.webresourcesdepot.com/jquery-countdown-plugins-for-coming-soon-pages/" target="_blank"></a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[jQuery] jQuery你一定要知道的八件事]]></title>
    <link href="http://rx836.github.com/blog/jquery-8-skill/"/>
    <updated>2012-10-24T23:18:00+08:00</updated>
    <id>http://rx836.github.com/blog/jquery-8-skill</id>
    <content type="html"><![CDATA[<p>jQuery這項技能在面試的時候，已經從"加分"變成"必備"，由此可知，如果想走web開發，jQuery已經是不可或缺的技術，但jQuery雖然好上手，網路上的教學資源也很多，但有幾件事情是在使用jQuery你一定要知道的</p>

<!--more-->


<h2>1.使用Google CDN-hosted並且保持最新版本</h2>

<p>使用Google CDN的好處是，有許多網站都有使用CDN，所以訪客在拜訪你的網站之前，可能已經先下載過jQuery，之後拜訪你的網站就可以直接從快取中使用，而不用重新下載，增加網站讀取速度，至於保持jQuery最新的版本，除了可以修復一些bug，還可以增加performance</p>

<pre><code>&lt;script type="text/javascript" src="http://rx836.github.com//ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>有些人可能會發現，為什麼少了<strong>http:</strong>，原因是假如網站遊走在http和https之間，使用這種忽略 <strong>scheme</strong> 的部分，就可以避免因為開啟了https的網頁，但jQuery是http所產生的安全性問題</p>

<h2>2.在開發時搭配Cheat Sheet</h2>

<p>其實不只是初學者，對於資深的開發者也建議使用cheat sheets，可以方便直接查詢，也省去google的麻煩</p>

<p><a href="http://oscarotero.com/jquery/" target="_blank">http://oscarotero.com/jquery/</a></p>

<p><a href="http://www.javascripttoolbox.com/jquery/cheatsheet/" target="_blank">http://www.javascripttoolbox.com/jquery/cheatsheet/</a></p>

<p><a href="http://devcheatsheet.com/tag/jquery/" target="_blank">http://devcheatsheet.com/tag/jquery/</a></p>

<h2>3.不能單純只使用CDN</h2>

<p>剛剛第一點講到建議使用Google CDN，但有一點必須要注意的是，CDN有時候會有失效的問題，像某些地區會連不到Google CDN，這時候就要有locally的jQuery可以備用，判別的JavaScript語法可以這樣寫</p>

<pre><code>&lt;script src="http://rx836.github.com//ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;script&gt;window.jQuery || document.write('&lt;script src="js/jquery-1.8.1.min.js"&gt;&lt;\/script&gt;')&lt;/script&gt;
</code></pre>

<p>這段程式碼會在抓不到Google CDN時，去抓取自家主機上的jQuery，讓網站不至於因為這樣而掛掉</p>

<h2>4.重複使用jQuery selector</h2>

<p>為了優化jQuery，千萬不要這樣寫</p>

<pre><code>$("#mySmashingID").css("color", "pink");
$("#mySmashingID").css("font", "Verdana");
$("#mySmashingID").text("Some error message goes here!");
</code></pre>

<p>假如要針對同個selectors做操作，不應該重複呼叫自己，而是要利用jQuery鏈結的特性串起來</p>

<pre><code>$("#mySmashingID").css({ "color": "pink", "font": "Verdana"}).text("Some error message goes here!!");
</code></pre>

<h2>5.將重複使用的selector宣告一個變數存起來</h2>

<p>假如你會針對一個selector在很多地方使用到</p>

<pre><code>$(‘#mySmashingGag’).appendTo(‘#mysidebar’);
$(‘#mySmashingGag’).addClass(‘widget’);
$(‘#mySmashingGag’).hide();
$(‘#mySmashingGag’).fadeIn(‘fast’);
</code></pre>

<p>你應該將他存入一個變數，並且使用變數來操作，這樣也可以增加效能，而不會一直去做selector</p>

<pre><code>var mySmashingGag = $(‘#mySmashingGag’);
mySmashingGag.appendTo(‘#mysidebar’);
mySmashingGag.addClass(‘widget’);
mySmashingGag.hide();
mySmashingGag.fadeIn(‘fast’);
</code></pre>

<h2>6.使用ID而不要使用class</h2>

<p>jQuery骨子裡其實還是JavaScript，所以不管如何速度再快也比不上原生的JavaScript快，所以如果使用ID來選取元素的話，就會使用JavaScript的原生方法 <strong>getElementByID</strong>，效能就會比較快，相反的不是使用原生方法的class效能就會比較慢</p>

<p>不要使用class</p>

<pre><code>// Selecting each item at once
for (i = 0; i &lt; 900; i++) {
    var selectedItem = $('.mySmashingItem' + i);
}
</code></pre>

<p>使用ID</p>

<pre><code>// Selecting each item at once
for (i = 0; i &lt; 900; i++) {
    var selectedItem = $('#mySmashingItem' + i);
}
</code></pre>

<h2>7.使用縮寫</h2>

<p>正常來說會這樣寫</p>

<pre><code>$(document).ready(function (){
    // your awesome code here
});
</code></pre>

<p>但其實可以這樣寫</p>

<pre><code>$(function (){
    // your awesome code here
});
</code></pre>

<h2>8.使用context</h2>

<p>當你再使用選取器(selectors)的時候，jQuery會針對整個頁面去做搜索直到找到為止，可是其實我們可以縮小範圍</p>

<p>例如原本的寫法</p>

<pre><code>$(‘.mySmashingGag’).on(‘click’, showMenu);
</code></pre>

<p>但我們可以這樣寫</p>

<pre><code>$(‘.mySmashingGag’, ‘#mySidebar’).on(‘click’, showMenu);
</code></pre>

<p>這樣他就會在ID為mySidebar去搜尋class為mySmashingGag的元素</p>

<p>這些其實不難，但都是養成正確寫jQuery的好習慣:)</p>

<p>參考資料:</p>

<p><a href="http://smashinghub.com/8-jquery-crimes-you-really-shouldnt-commit.htm" target="_blank">8 jQuery Crimes You Really Shouldn’t Commit</a></p>

<p><a href="http://blog.miniasp.com/post/2008/10/19/URL-URI-Description-and-usage-tips.aspx" target="_blank">講解 URL 結構與分享幾個相對路徑與絕對路徑的開發技巧 </a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[jQuery] Facebook XXX hours ago的時間生成]]></title>
    <link href="http://rx836.github.com/blog/jquery-plugin-timeago/"/>
    <updated>2012-10-03T01:36:00+08:00</updated>
    <id>http://rx836.github.com/blog/jquery-plugin-timeago</id>
    <content type="html"><![CDATA[<p><a href="http://timeago.yarp.com/" target="_blank">timeago</a>是一套可以快速生成過去發生時間的jQuery plugin，大家應該對於Facebook文字框下方的『xxx hours ago』不會陌生，留言訊息不再只是單純的『x年x月x日 x時x分x秒』，而是可以很貼心的將時間換算給使用者知道，『喔~ 原來這則留言在幾分鐘之前』，這種對User experience來說其實是相當的加分，要實作其實也不難，網路上也有plugin可以方便使用，就趕快來看看如何做出這種效果吧！</p>

<p><img src="https://lh6.googleusercontent.com/-8eJHMArd3w0/UGxqjpAcHYI/AAAAAAAABqY/Z8lDGoeU_58/s409/1.jpg" /></p>

<!--more-->


<p>首先<a href="http://timeago.yarp.com/jquery.timeago.js" target="_blank">下載</a>timeago，和jQuery一起引用到html裡面</p>

<pre><code>&lt;script type="text/javascript" src="http://code.jquery.com/jquery-1.8.2.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="http://timeago.yarp.com/jquery.timeago.js"&gt;&lt;/script&gt;
</code></pre>

<p>接著是html部分</p>

<pre><code>&lt;abbr class="loaded timeago" title="when you opened the page"&gt;&lt;/abbr&gt;
</code></pre>

<p>這個plugin預設是用abbr這個元素，要搭配裡面的title，title屬性待會會存放時間資訊在裡面，接著是js部分</p>

<pre><code>$(function(){
    prepareDynamicDates();      
    $("abbr.timeago").timeago();        

    function prepareDynamicDates() {
        $('abbr.loaded').attr("title", ISODateString(new Date()));                      
    }

    function ISODateString(d){
        function pad(n){return n&lt;10 ? '0'+n : n}
         return d.getUTCFullYear()+'-'
              + pad(d.getUTCMonth()+1)+'-'
              + pad(d.getUTCDate())+'T'
              + pad(d.getUTCHours())+':'
              + pad(d.getUTCMinutes())+':'
              + pad(d.getUTCSeconds())+'Z'
    }       

});
</code></pre>

<p>要注意的一點是，要先將時間轉換成<a href="http://zh.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601</a>，ISO 8601是一種國際標準化組織所訂的日期時間表示法，至於要怎麼轉換，網路上已經都有人寫好了，或是直接看上面範例的函式<strong>ISODateString()</strong></p>

<p>接著將轉換後的時間放到abbr這個元素的title屬性，然後使用.timeago()這個方法即可，這樣一打開網頁，就會顯示</p>

<pre><code>less than a minute ago
</code></pre>

<p>過幾分鐘後 就會顯示，</p>

<pre><code>2 minutes ago
</code></pre>

<p>代表已經過了兩分鐘，因為timeago不用重整會自動刷新時間</p>

<p>或是你可以直接看我網頁上的DEMO結果如下</p>

<p>『你開始看這篇文章在<abbr class="loaded timeago" title="when you opened the page"></abbr>』</p>

<script type="text/javascript" src="http://code.jquery.com/jquery-1.8.2.js"></script>


<script type="text/javascript" src="http://timeago.yarp.com/jquery.timeago.js"></script>


<script>
    $(function(){
        prepareDynamicDates();      
        $("abbr.timeago").timeago();        

        function prepareDynamicDates() {
            $('abbr.loaded').attr("title", ISODateString(new Date()));                      
        }

        function ISODateString(d){
            function pad(n){return n<10 ? '0'+n : n}
             return d.getUTCFullYear()+'-'
                  + pad(d.getUTCMonth()+1)+'-'
                  + pad(d.getUTCDate())+'T'
                  + pad(d.getUTCHours())+':'
                  + pad(d.getUTCMinutes())+':'
                  + pad(d.getUTCSeconds())+'Z'
        }       
        
    });
</script>


<p>假如你按F5重整就會發現又回到less than a minute ago (除非js的檔案掛掉，才不會顯示)</p>

<p>但如果是不想用現在時間開始計算，而是希望每則發文的時間開始計算呢？一樣html的部分如下</p>

<pre><code>&lt;abbr class="modified timeago" title="xxx"&gt;&lt;/abbr&gt;
</code></pre>

<p>接著是js部分</p>

<pre><code>$(function(){

    $('abbr.modified').attr("title", "2012-10-02T17:30:33Z");
    $("abbr.timeago").timeago();            

});
</code></pre>

<p>一樣就直接把當初那則發文的ISO 8601的時間丟到title，然後使用.timeago()就可以了</p>

<p>如果你想用更靈活或擴充性更大的plugin，也可以選擇另一款<a href="http://pragmaticly.github.com/smart-time-ago/" target="_blank">Smart Time Ago</a>，靈感就來自於timeago，只是功能更強大</p>

<p>參考資料:</p>

<p><a href="http://pragmaticly.github.com/smart-time-ago/" target="_blank">Smart Time Ago</a></p>

<p><a href="http://timeago.yarp.com/" target="_blank">timeago</a></p>

<p>如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CSS] 做網站非學不可的Twitter Bootstrap]]></title>
    <link href="http://rx836.github.com/blog/twitter-bootstrap/"/>
    <updated>2012-10-01T18:41:00+08:00</updated>
    <id>http://rx836.github.com/blog/twitter-bootstrap</id>
    <content type="html"><![CDATA[<p><a href="http://twitter.github.com/bootstrap/" target="_blank">Twitter Bootstrap</a>越來越多人在用了，當然最主要的原因就是他可以幫助網頁開發者快速的開發出，有不錯外觀的web或是mobile apps，這對於許多不擅長外觀設計的網頁工程師們(包括我)，可以說是省下不少煩惱Layout的麻煩，不僅如此，針對按鈕、表格、或是排版，Bootstrap都幫你處理的好好，只要簡單幾個步驟引入即可</p>

<!--more-->


<p>首先要先下載<a href="http://twitter.github.com/bootstrap/getting-started.html" target="_blank">Bootstrap</a>，你可以選擇compil過後的，或是選擇source版本，Bootstrap的css是用Less寫的，所以如果你想修改細節部分，可以下載source版本，一般來說直接用compiled版本即可</p>

<p>接著就會看到有三個資料夾(css &amp; js &amp; img)</p>

<p><img src="https://lh3.googleusercontent.com/-RHqEXjgftnI/UGl5vs7qyaI/AAAAAAAABoU/tKc440KDt5Y/s872/a.jpg" /></p>

<p>可以把他們全部放入你的專案裡面，但引入到html時，css和js就只要選擇有沒有壓縮過的版本就好</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;  
        &lt;meta charset="UTF-8" /&gt;
        &lt;title&gt;example&lt;/title&gt;
        &lt;link href="css/bootstrap.min.css" rel="stylesheet" type="text/css"&gt;        
    &lt;/head&gt;
    &lt;body&gt;
        &lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
        &lt;script src="js/bootstrap.min.js"&gt;&lt;/script&gt;     
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>然後接下來就可以開始使用了！但請注意還是要引入jQuery喔，接下來就是介紹一些使用範例</p>

<h2>Base CSS examples</h2>

<h3>Buttons</h3>

<p>加上相對應的class以後，就可以秀出相對應的外觀，例如紅色的按鈕class預設為<strong>btn-danger</strong>，Bootstrap很貼心的讓我們不再只有單調的按鈕顏色</p>

<pre><code>&lt;button class="btn dropdown-toggle" data-toggle="dropdown"&gt;Action &lt;span class="caret"&gt;&lt;/span&gt;&lt;/button&gt; 
&lt;button class="btn btn-primary dropdown-toggle" data-toggle="dropdown"&gt;Action &lt;span class="caret"&gt;&lt;/span&gt;&lt;/button&gt; 
&lt;button class="btn btn-danger dropdown-toggle" data-toggle="dropdown"&gt;Danger &lt;span class="caret"&gt;&lt;/span&gt;&lt;/button&gt; 
&lt;button class="btn btn-warning dropdown-toggle" data-toggle="dropdown"&gt;Warning &lt;span class="caret"&gt;&lt;/span&gt;&lt;/button&gt; 
&lt;button class="btn btn-success dropdown-toggle" data-toggle="dropdown"&gt;Success &lt;span class="caret"&gt;&lt;/span&gt;&lt;/button&gt; 
&lt;button class="btn btn-info dropdown-toggle" data-toggle="dropdown"&gt;Info &lt;span class="caret"&gt;&lt;/span&gt;&lt;/button&gt; 
&lt;button class="btn btn-inverse dropdown-toggle" data-toggle="dropdown"&gt;Inverse &lt;span class="caret"&gt;&lt;/span&gt;&lt;/button&gt;
</code></pre>

<p><img src="https://lh4.googleusercontent.com/-phDQRFC7UXQ/UGnPIeFHgVI/AAAAAAAABoo/VL2VekJjEVA/s617/123.jpg" /></p>

<p>特別注意的是，按鈕旁邊有個倒三角形是用css做出來的，也同樣只要在span加一個class為caret即可</p>

<h3>Progress bars</h3>

<p>進度條只要外面包一層div給予相對的class，裡面再加一個div並且命名class為<strong>bar</strong>，<strong>width</strong>就是進度條的長度，這樣就可以用js來修改width顯示目前的進度狀況</p>

<pre><code>&lt;div class="progress progress-info" style="margin-bottom: 9px;"&gt; &lt;div class="bar" style="width: 10%"&gt;&lt;/div&gt; &lt;/div&gt; 
&lt;div class="progress progress-success" style="margin-bottom: 9px;"&gt; &lt;div class="bar" style="width: 20%"&gt;&lt;/div&gt; &lt;/div&gt; 
&lt;div class="progress progress-warning" style="margin-bottom: 9px;"&gt; &lt;div class="bar" style="width: 30%"&gt;&lt;/div&gt; &lt;/div&gt; 
&lt;div class="progress progress-danger" style="margin-bottom: 9px;"&gt; &lt;div class="bar" style="width: 40%"&gt;&lt;/div&gt; &lt;/div&gt;
</code></pre>

<p><img src="https://lh6.googleusercontent.com/-CWMKYBHmiBk/UGpPoPagCQI/AAAAAAAABo8/o7uycvmJotE/s926/123.jpg" /></p>

<p>更酷的是，bar的樣式也可以更改，而不是只有醜醜的實心bar</p>

<pre><code>&lt;div class="progress progress-striped active"&gt; 
&lt;div class="bar" style="width: 40%;"&gt;&lt;/div&gt; 
&lt;/div&gt;
</code></pre>

<p>只要修改class為<strong>progress progress-striped active</strong>，就會有條紋的進度條，而且還加上css3的animation動畫</p>

<h3>Button groups</h3>

<p>也可以將button設為一組群組，就會有群組的樣式</p>

<pre><code>&lt;div class="btn-group" style="margin: 9px 0;"&gt; 
&lt;button class="btn"&gt;Left&lt;/button&gt; 
&lt;button class="btn"&gt;Middle&lt;/button&gt; 
&lt;button class="btn"&gt;Right&lt;/button&gt; 
&lt;/div&gt;
</code></pre>

<p><img src="https://lh4.googleusercontent.com/-iCtFSRwd7UU/UGpYAp2xh6I/AAAAAAAABpQ/BVql_Jk9oto/s187/4.jpg" /></p>

<p>用一個class名為<strong>btn-group</strong>的div包住button就可以</p>

<h3>Horizontal and vertical tabs (with dropdown menus)</h3>

<p>還在煩惱下拉選單嗎?</p>

<pre><code>&lt;ul class="nav nav-tabs"&gt; 
&lt;li class="active"&gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt; 
&lt;li&gt;&lt;a href="#"&gt;Portfolio&lt;/a&gt;&lt;/li&gt; 
&lt;li class="dropdown"&gt; &lt;a class="dropdown-toggle" data-toggle="dropdown" href="#"&gt;Services &lt;b class="caret"&gt;&lt;/b&gt;&lt;/a&gt; 
&lt;ul class="dropdown-menu"&gt; &lt;li&gt;&lt;a href="#"&gt;Link 1&lt;/a&gt;&lt;/li&gt; 
&lt;li&gt;&lt;a href="#"&gt;Link 2&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt;
</code></pre>

<p>只要用ul li包好，並且加上相對應的class，就可以輕鬆做tab+下拉選單</p>

<p><img src="https://lh5.googleusercontent.com/-ix3_DDLLdWg/UGpZ2cBhygI/AAAAAAAABpY/wzbaSwCDMb8/s303/5.jpg" /></p>

<h3>Navigation bar component</h3>

<p>看到這邊就覺得實在太強大了...</p>

<pre><code>&lt;div class="navbar"&gt; 
    &lt;div class="navbar-inner"&gt; 
        &lt;div class="container"&gt; &lt;!-- brand class is from bootstrap.css --&gt; 
            &lt;a class="brand" href="#"&gt;My Brand&lt;/a&gt; 
            &lt;div class="nav-collapse"&gt; 
                &lt;ul class="nav"&gt; 
                    &lt;li class="active"&gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt; 
                    &lt;li&gt;&lt;a href="#"&gt;Services&lt;/a&gt;&lt;/li&gt; 
                    &lt;li class="dropdown"&gt; &lt;a href="#" class="dropdown-toggle" data-toggle="dropdown"&gt;Dropdown &lt;b class="caret"&gt;&lt;/b&gt;&lt;/a&gt; 
                        &lt;ul class="dropdown-menu"&gt; 
                            &lt;li&gt;&lt;a href="#"&gt;Action 1&lt;/a&gt;&lt;/li&gt; 
                            &lt;li&gt;&lt;a href="#"&gt;Action 2&lt;/a&gt;&lt;/li&gt; 
                            &lt;li class="divider"&gt;&lt;/li&gt; 
                            &lt;li class="nav-header"&gt;Header&lt;/li&gt; 
                            &lt;li&gt;&lt;a href="#"&gt;Separated action&lt;/a&gt;&lt;/li&gt; 
                        &lt;/ul&gt; 
                    &lt;/li&gt; 
                &lt;/ul&gt; 
                &lt;form class="navbar-search pull-left"&gt; 
                &lt;input type="text" class="search-query" placeholder="Search"&gt; 
                &lt;/form&gt; 
            &lt;/div&gt;&lt;!-- /.nav-collapse --&gt; 
        &lt;/div&gt; 
    &lt;/div&gt;&lt;!-- /navbar-inner --&gt; 
&lt;/div&gt;&lt;!-- /navbar --&gt;
</code></pre>

<p><img src="https://lh5.googleusercontent.com/-VBBWEKhYfzk/UGpba2H2VSI/AAAAAAAABpg/2KVa_kC0xX0/s647/6.jpg" /></p>

<h3>Using the layout and built-in grid system</h3>

<p>你也可以用他們的grid system</p>

<pre><code>&lt;div class="container"&gt; 
    &lt;div class="row"&gt; 
        &lt;div class="span4"&gt; &lt;!--content--&gt; &lt;/div&gt; 
        &lt;div class="span4"&gt; &lt;!--content--&gt; &lt;/div&gt; 
        &lt;div class="span4"&gt; &lt;!--content--&gt; &lt;/div&gt; 
    &lt;/div&gt; 
&lt;/div&gt;
</code></pre>

<p>預設是 12-column，940 pixel-centered layout</p>

<h3>Responsive design</h3>

<p>連最近很紅的responsive design也有，只要引入他們的<strong>bootstrap-responsive.css</strong>這個css檔案</p>

<h3>Typeahead example</h3>

<p>裡面也有plugin可以使用，例如下拉提示選單</p>

<pre><code>&lt;input type="text" class="span3" style="margin: 0 auto;" 
data-provide="typeahead" 
data-items="4" 
data-source='["Apples","Bananas","Cherries","Dates","Eggplants","Figs","Grapes", "Honeydew","Kiwi","Mango","Peaches","Plums","Raspberries","Strawberries","Watermelon","Zucchini"]'&gt;
</code></pre>

<p><img src="https://lh6.googleusercontent.com/-y8ELDPfXQp4/UGpdfcl99uI/AAAAAAAABpo/A_l1HiZDL2I/s223/7.jpg" /></p>

<p>還有很多使用範例，可以直接去<a href="http://twitter.github.com/bootstrap/index.html" target="_blank">官網看</a>，這樣大概看了一下教學範例，一個網站可能需要的元素，Bootstrap幾乎通通都有，網頁開發人員可以更專注在開發網頁這個事情上面</p>

<p>只是不知道，會不會到後來，大家的網站都長得很像:)</p>

<p>參考資料:</p>

<p><a href="http://www.adobe.com/devnet/html5/articles/twitter-bootstrap.html" target="_blank">Styling your apps with Twitter Bootstrap </a></p>

<p><a href="http://www.w3resource.com/twitter-bootstrap/tutorial.php" target="_blank">Twitter Bootstrap tutorial</a></p>

<p><a href="http://twitter.github.com/bootstrap/index.html" target="_blank">Twitter Bootstrap</a></p>

<p>如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
</feed>
