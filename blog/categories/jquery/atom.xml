<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jQuery | apa]]></title>
  <link href="http://blog.rx836.tw/blog/categories/jquery/atom.xml" rel="self"/>
  <link href="http://blog.rx836.tw/"/>
  <updated>2013-01-04T15:12:20+08:00</updated>
  <id>http://blog.rx836.tw/</id>
  <author>
    <name><![CDATA[阿帕]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[jQuery] 自製jQuery Ajax Loader]]></title>
    <link href="http://blog.rx836.tw/blog/jquery-ajax-loader/"/>
    <updated>2012-12-13T07:01:00+08:00</updated>
    <id>http://blog.rx836.tw/blog/jquery-ajax-loader</id>
    <content type="html"><![CDATA[<p>現代的網頁技術越來越重視Ajax(Asynchronous JavaScript and XML)，很多地方都可以看的到他的身影，最為人所知的就是Google有很多服務都有運用此技術，例如Gmail、Google Map等，在使用Ajax時因為是 <strong>非同步傳輸</strong> 的關係，所以User在傳送資料過程中，可以繼續做其他事情，不過有時候怕User以為按了沒反應認為網頁掛掉，會加上一些Ajax loading來提示網頁還在運作</p>

<!--more-->


<p>以前我最常用到的是 <a href="http://www.malsup.com/jquery/block/#overview" target="_blank">jQuery BlockUI Plugin</a>，但畢竟是別人寫的plugin，總是覺得有些功能有點多餘，雖然jQuery BlockUI大小大概只有18kb左右，但還是總會想要更精簡，做更符合自己想要的plugin出來，找了一些資料以後，大概知道一些運作的原理，下面就來筆記</p>

<h2>Start</h2>

<p>首先是html部份</p>

<pre><code>&lt;div&gt;
內容
&lt;/div&gt;
</code></pre>

<p>對..，沒錯，html部份這樣就可以了，其實自製的好處在於是，你不用為了做Ajax loading的效果而特地在HTML上增加額外的元素，所有需要用到的元素都是利用jQuery動態加入，所以保持原本的頁面即可</p>

<p>不過為了展現Demo效果，還是要加上一些css才行</p>

<pre><code>div{
    background-color: blue;
    height: 800px;
    position: relative;
    width: 100%;
}
</code></pre>

<p>接著是js主程式部份</p>

<pre><code>function ajaxLoader (el, options) {
    // Becomes this.options
    var defaults = {
        bgColor         : '#fff',
        duration        : 800,
        opacity         : 0.7,
        classOveride    : false
    }
    this.options    = jQuery.extend(defaults, options);
    this.container  = $(el);
    this.init = function() {
        var container = this.container;
        // Delete any other loaders
        this.remove();
        // Create the overlay
        var overlay = $('&lt;div&gt;&lt;/div&gt;').css({
                'background-color': this.options.bgColor,
                'opacity':this.options.opacity,
                'width':container.width(),
                'height':container.height(),
                'position':'absolute',
                'top':'0px',
                'left':'0px',
                'z-index':99999
        }).addClass('ajax_overlay');
        // add an overiding class name to set new loader style
        if (this.options.classOveride) {
            overlay.addClass(this.options.classOveride);
        }
        // insert overlay and loader into DOM
        container.append(
            overlay.append($('&lt;div&gt;&lt;/div&gt;').addClass('ajax_loader')).fadeIn(this.options.duration)
        );
    };
    this.remove = function(){
        var overlay = this.container.children(".ajax_overlay");
        if (overlay.length) {
            overlay.fadeOut(this.options.classOveride, function() {
                overlay.remove();
            });
        }
    }
    this.init();
}
</code></pre>

<p>大概50行不到的程式碼，這裡說明一下整個運作過程</p>

<p>因為JavaScript並沒有類別，所以這邊用的是建構式函式，之前曾經寫過關於 <a href="http://blog.rx836.tw/blog/javascript-custom-function/">建構式函式</a> 的文章，有興趣的人可以參考看看，我們命名了一個function <strong>ajaxLoader</strong>，裡面有預設值 <strong>defaults</strong>，是在沒有給予 <strong>options</strong> 時會用到的</p>

<p>而 <strong>this.container</strong> 就是要被block的元素，<strong>this.init</strong> 裡面包含的是動態加入Ajax loading的效果，可以看到最主要加了一個&lt;div&gt;進去，給予他透明度(opacity)、背景顏色(background-color)，最最最最最最重要的是把 <strong>z-index</strong> 設成99999，這樣才能讓被block的元素確實達到無法操控，在這個&lt;div&gt;裡面還包了一層&lt;div&gt;是放置載入中的轉圈圈圖片</p>

<p><img src="https://lh4.googleusercontent.com/-7nndaD_jRSg/UMlDmhEwXEI/AAAAAAAACE0/Jp_u5yf9blY/s31/spinner_squares_circle.gif" /></p>

<p>另外 <strong>this.remove</strong> 就是移除效果，所以整個程式碼其實不難，也沒有其他多餘的阿雜，要使用的時候可以這樣寫</p>

<p>css部份</p>

<pre><code>.ajax_loader {background: url("spinner_squares_circle.gif") no-repeat center center transparent;width:100%;height:100%;}
</code></pre>

<p>預設的轉圈圈圖片</p>

<p>js部份</p>

<pre><code>var options = {
    bgColor         : '#fff',
    duration        : 800,
    opacity     : 0.7,
    classOveride    : false
}
var block;
$("div").live('click', function(){
     block = new ajaxLoader(this, options);
});
</code></pre>

<p><strong>ajaxLoader</strong> 第一個參數可以丟入其他想要被block的元素，第二個就是自訂參數，自訂參數說明如下</p>

<ul>
<li>bgColor: string – 覆蓋的背景顏色</li>
<li>duration: number – fadeIn和fadeOut效果延遲時間</li>
<li>opacity: number – 背景透明度</li>
<li>classOveride: string – 如果想要別的Ajax loading圖片效果，可以加上自訂的class，然後在css自訂樣式即可</li>
</ul>


<p>假如想要移除的話</p>

<pre><code>block.remove();
</code></pre>

<p>想要看更多用法的話可以看這個  <a href="http://www.aplusdesign.com.au/demos/ajax-loader/index.html" target="_blank">Demo</a></p>

<p>有了這個基本的架構和觀念以後，就可以自己客製化屬於自己的Ajax loading效果，而不必再拘束別人的plugin之下，整個js也輕量許多</p>

<h3>參考資料:</h3>

<p><a href="http://www.aplusdesign.com.au/blog/jquery-ajax-loader-spinner/" target="_blank">jQuery Ajax Loader &amp; Spinner</a></p>

<p><a href="http://www.ajaxload.info/" target="_blank">推薦製作gif圖檔的工具-ajaxload.info</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[jQuery] jQuery常用的表單驗證事件]]></title>
    <link href="http://blog.rx836.tw/blog/jquery-html-forms/"/>
    <updated>2012-11-29T15:40:00+08:00</updated>
    <id>http://blog.rx836.tw/blog/jquery-html-forms</id>
    <content type="html"><![CDATA[<p>在動態網頁的世界裡面，最常使用到的大概就非Forms莫屬，填寫完表格以後都會將資料傳送到bcak-end(後端)，而在傳送之前，有一些資料的驗證都會交由front-end(前端)來處理，這篇就來紀錄一下對於HTML Forms來說，常用的一些jQuery方法</p>

<!--more-->


<h2>.blur()</h2>

<p><strong>Blur</strong> 發生在當一個元素失去焦點時，所觸發的一個事件，在原生的HTML裡面提供了 <strong>onblur</strong> 這個屬性，可以將這個事件附加到HTML元素上，範例如下</p>

<pre><code>&lt;input type = "text" onblur = "doSomething();" /&gt;
</code></pre>

<p>當光標的焦點在input裡面以後，在點擊input以外的元素就會觸發，不過這是老舊的寫法，因為我們希望能盡量在HTML上保持乾淨，與程式邏輯做分離，所以就會使用jQuery的blur()來達到此任務</p>

<pre><code>$("input").blur(function() { /* Do something... */ } );
</code></pre>

<p>要特別注意的是 <strong>onblur </strong> 這個事件適用於所有的input元素，也就是說就算是button也適用，因為在鍵盤上有個「Tab鍵」可以在網頁上做焦點的切換，就會觸發 <strong>onblur</strong> 這個事件</p>

<p>不過在1.7以後的jQuery版本裡面建議開始使用 <strong>.on()</strong> 來達到此任務，效能會比較好</p>

<pre><code>$('input').on('blur', function() { /* Do something.... */ });
$('input').off('blur', function() { /* Do something... */ });
</code></pre>

<p>相較於 <strong>.on()</strong> ， <strong>.off()</strong> 就是停止監聽這個事件，善用 <strong>.off()</strong> 也可以讓效能增加(參考<a href="http://blog.darkthread.net/post-2011-11-07-jquery-1-7-release.aspx" target="_blank">黑暗執行緒 jQuery 1.7筆記</a>)，避免過多不必要的事件監聽</p>

<p>如果你只希望監聽「某個類型元素」的事件，可以這樣寫</p>

<pre><code>$("input[type=radio]").on('blur', function() { /* Do something... */ } );
$("input[type=checkbox]").on('blur', function() { /* Do something... */ } );    
$("input[type=text]").on('blur', function() { /* Do something... */ } );
</code></pre>

<p>當然，只想要針對單一指定的元素，可以用id值來選取</p>

<pre><code>$("input#Email").on('blur', function() { /* Do something... */ } );
</code></pre>

<h2>.change()</h2>

<p><strong>change</strong> 事件相當於HTML裡面的 <strong>onchange </strong> 屬性，跟上一個討論 <strong>blur</strong> 事件很像，但不同的地方在於，當焦點離開元素之前，如果元素有改變的話，就會觸發這個事件，寫法如下</p>

<pre><code>$("input#target").change(function() { /* Do something... */ } );
$("input#target").bind("change", function() { /* Do something... */ } );
$("input#target").on("change", function() { /* Do something... */ } );
</code></pre>

<p>一樣建議使用 <strong>on()</strong> 來監聽change這個事件</p>

<p>同時利用 <strong>onChange</strong> 和 <strong>onBlur</strong> 來驗證表單也是很常見的做法</p>

<pre><code>$("input#target").on("change", EmailChecked );
$("input#target").on("blur", EmailChecked );

function EmailChecked( value )
{
    //在這邊做驗證...

     if (valid)
     {
         // 驗證通過...
     }
     else
     {
         // 驗證不通過...
     }
}
</code></pre>

<p>可以讓驗證做的更完善，兩個事件的觸發先後順序為 onChange>onBlur</p>

<h2>.focus()</h2>

<p>相等同於 <strong>onFocus</strong> ，如果 <strong>.blur()</strong> 是失去焦點，那 <strong>.focus()</strong>就是得到焦點，也就是在某個元素被點擊以後所觸發的事件，語法如下</p>

<pre><code>$("input#myInput").focus(function() { /* Do something... */ });
$("input#myInput").bind("focus", function() { /* Do something... */ });
$("input#myInput").on("focus", function() { /* Do something... */ });
</code></pre>

<p>這邊還是建議使用 <strong>.on()</strong></p>

<h2>.select()</h2>

<p>select算是很容易讓人混淆的事件，在text input元素裡面(或textarea)，當你將文字反白以後，就會觸發此事件，範例如下</p>

<pre><code>&lt;input type="text" value="Some text" /&gt;

&lt;script&gt;
    $(":input").select( function () { 
        alert('文字被反白');
    });
&lt;/script&gt;
</code></pre>

<p>但有些人可能會誤用成這樣</p>

<pre><code>$("input[type=checkbox]").select();
$("input[type=radio]").select();  
</code></pre>

<p><strong>這個方法並不能將checkbox或是radio執行勾選</strong></p>

<p>正確的做法應該是這樣</p>

<pre><code>$("input[type=checkbox]").prop("checked", true); // Check checkbox
$("input[type=radio]").prop("checked", true); // Check radio button
</code></pre>

<h2>.val()</h2>

<p>這大概是jQuery最常用到的方法之一， <strong>.val()</strong> 可以取得值</p>

<pre><code>var Email = $("input#Email").val();
</code></pre>

<p>當是用在&lt;select&gt;元素時，<strong>.val()</strong> 可以將現在選取的項目值取出來</p>

<pre><code>&lt;select id="test1" name="test1" /&gt;
  &lt;option value="1"&gt;select1&lt;/option&gt;
  &lt;option value="2"&gt;select2&lt;/option&gt;
  &lt;option value="3"&gt;select3&lt;/option&gt;
&lt;/select&gt;

&lt;script&gt;
    $("select").val(); 
&lt;/script&gt;
</code></pre>

<p>不過 <strong>.val()</strong> 只適用在input元素裡面，就算在div裡面自己加上value屬性也取不到值</p>

<pre><code>&lt;div value = "apa"&gt;&lt;/div&gt;

&lt;script&gt;
    $("div").val(); //錯誤的...
&lt;/script&gt;
</code></pre>

<p>div應該要用 <strong>.text()</strong> 或是 <strong>.html()</strong> 來修改裡面的內容</p>

<h2>.submit()</h2>

<p>在表單傳送裡面，HTML必須長成這樣</p>

<pre><code>&lt;form id = "myForm"&gt;
    &lt;input type = "submit" value = "Submit"/&gt;
&lt;/form&gt;
</code></pre>

<p>submit的button必須一定要包裹在&lt;form&gt;，如果想要藉由&lt;form&gt;以外的元素來觸發呢？可以這樣寫</p>

<pre><code>$("input#myButton").click(function() {
    $("#myForm").submit();
});
</code></pre>

<p>這樣就可以不需要透過submit來將資料送出，另外想在送出前做表單驗證的話，也可以用 <strong>.submit()</strong></p>

<pre><code>$("form").submit(function() {
  if ($("input:first").val() == "correct") {
    $("span").text("Validated...").show();
    return true;
  }
  $("span").text("Not valid!").show().fadeOut(1000);
  return false;
});
</code></pre>

<p>當按下submit以後，就會進行驗證，假如回傳值是false，表單就不會送出</p>

<p>以上是常用的表單驗證方法，當然網路上也有很多寫好的plugin可以用，因為處理一大堆資料的驗證老實說蠻麻煩的，善用plugin也是個不錯的選擇，但基礎觀念還是要懂才行</p>

<h3>參考資料:</h3>

<p><a href="http://blog.darkthread.net/post-2011-11-07-jquery-1-7-release.aspx" target="_blank">黑暗執行緒 jQuery 1.7筆記</a></p>

<p><a href="http://api.jquery.com/blur/" target="_blank">jQuery API .blur()</a></p>

<p><a href="http://api.jquery.com/change/" target="_blank">jQuery API .change()</a></p>

<p><a href="http://api.jquery.com/on/" target="_blank">jQuery API .on()</a></p>

<p><a href="http://api.jquery.com/focus/" target="_blank">jQuery API .focus()</a></p>

<p><a href="http://api.jquery.com/select/" target="_blank">jQuery API .select()</a></p>

<p><a href="http://api.jquery.com/val/" target="_blank">jQuery API .val()</a></p>

<p><a href="http://api.jquery.com/submit/" target="_blank">jQuery API .submit()</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[jQuery] 自製擁有Responsive的Tooltip]]></title>
    <link href="http://blog.rx836.tw/blog/friendly-tooltip-responsive/"/>
    <updated>2012-11-27T11:53:00+08:00</updated>
    <id>http://blog.rx836.tw/blog/friendly-tooltip-responsive</id>
    <content type="html"><![CDATA[<p><img src="https://lh6.googleusercontent.com/-KiD_TaOPzFA/ULRxljbyVVI/AAAAAAAAB-M/nHY1WuJDaGE/s373/q1.jpg" /></p>

<p>之前做Tooltip，都是上網找plugin比較多，但這次看到一篇文章，是自己寫一個Tooltip，就來記錄一下，而且還有Responsive的效果，可以依照載具大小做縮放和位置的改變，code不多，也很簡單明瞭</p>

<!--more-->


<p>先稍微介紹一下什麼是Tooltip，就如上面的圖所示，他可以提供良好的 <strong>user experience</strong>，可以在某個功能或選單，又或是某段文字上，在滑鼠移過去時(有時候是在點擊情況下，但少數)，出現一個小框，裡面有少許的說明文字，讓用戶知道，這個功能或是按鈕是在幹嘛</p>

<p>首先，是CSS的部分</p>

<pre><code>#tooltip
{
    text-align: center;
    color: #fff;
    background: #111;
    position: absolute;
    z-index: 100;
    padding: 15px;
}

    #tooltip:after /* triangle decoration */
    {
        width: 0;
        height: 0;
        border-left: 10px solid transparent;
        border-right: 10px solid transparent;
        border-top: 10px solid #111;
        content: '';
        position: absolute;
        left: 50%;
        bottom: -10px;
        margin-left: -10px;
    }

        #tooltip.top:after
        {
            border-top-color: transparent;
            border-bottom: 10px solid #111;
            top: -20px;
            bottom: auto;
        }

        #tooltip.left:after
        {
            left: 10px;
            margin: 0;
        }

        #tooltip.right:after
        {
            right: 10px;
            left: auto;
            margin: 0;
        }
</code></pre>

<p>這段CSS是建立一個tooltip，包括在不同載具時，呈現tooltip在不同的適當位置(bottom、top、left、right)，不過這邊有個小技巧要特別拿出來說明一下</p>

<p>就是Tooltip上面那個小箭頭其實是用CSS畫出來的</p>

<p><img src="https://lh4.googleusercontent.com/-jhfjv_hv-hY/ULRzfM9ycJI/AAAAAAAAB-w/oOohCQO9N6w/s373/q6.jpg" /></p>

<p>不同的CSS畫法，可以參考下面範例，HTML部分就只要一個div</p>

<h3>用CSS畫出三角型</h3>

<p><img src="https://lh3.googleusercontent.com/-kNDtVnCgUzE/ULRxloJG7qI/AAAAAAAAB-U/Jkfm3E0DC6k/s112/q2.jpg" /></p>

<pre><code>div {
    width: 0;
    height: 0;
    border-left: 50px solid #fff;
    border-right: 50px solid #fff;
    border-bottom: 100px solid black;
}
</code></pre>

<p><img src="https://lh5.googleusercontent.com/-siEgv7d8AJM/ULRxmDlFMeI/AAAAAAAAB-Q/BFmufqFJ3VU/s115/q4.jpg" /></p>

<pre><code>div {
    width: 0;
    height: 0;
    border-top: 50px solid #fff;
    border-right: 100px solid black;
    border-bottom: 50px solid #fff;
}
</code></pre>

<p><img src="https://lh6.googleusercontent.com/-VWF99ZiXIo8/ULRxlgGjbuI/AAAAAAAAB-I/ASZmQTUURI4/s110/q3.jpg" /></p>

<pre><code>div {
    width: 0;
    height: 0;
    border-left: 50px solid #fff;
    border-right: 50px solid #fff;
    border-top: 100px solid black;
}
</code></pre>

<p><img src="https://lh4.googleusercontent.com/-bjaIIy9c9Ow/ULRxmXa20iI/AAAAAAAAB-Y/ZvF6cRBvc1I/s107/q5.jpg" /></p>

<pre><code>div {
    width: 0;
    height: 0;
    border-top: 50px solid #fff;
    border-right: 100px solid black;
    border-bottom: 50px solid #fff;
}
</code></pre>

<p>當然如果希望是別的底色可以自己再做修改，接下來是JS部分</p>

<pre><code>$( document ).ready( function()
{
    var targets = $( '[rel~=tooltip]' ),
        target  = false,
        tooltip = false,
        title   = false;

    targets.bind( 'mouseenter', function()
    {
        target  = $( this );
        tip     = target.attr( 'title' );
        tooltip = $( '&lt;div id="tooltip"&gt;&lt;/div&gt;' );

        if( !tip || tip == '' )
            return false;

        target.removeAttr( 'title' );
        tooltip.css( 'opacity', 0 )
               .html( tip )
               .appendTo( 'body' );

        var init_tooltip = function()
        {
            if( $( window ).width() &lt; tooltip.outerWidth() * 1.5 )
                tooltip.css( 'max-width', $( window ).width() / 2 );
            else
                tooltip.css( 'max-width', 340 );

            var pos_left = target.offset().left + ( target.outerWidth() / 2 ) - ( tooltip.outerWidth() / 2 ),
                pos_top  = target.offset().top - tooltip.outerHeight() - 20;

            if( pos_left &lt; 0 )
            {
                pos_left = target.offset().left + target.outerWidth() / 2 - 20;
                tooltip.addClass( 'left' );
            }
            else
                tooltip.removeClass( 'left' );

            if( pos_left + tooltip.outerWidth() &gt; $( window ).width() )
            {
                pos_left = target.offset().left - tooltip.outerWidth() + target.outerWidth() / 2 + 20;
                tooltip.addClass( 'right' );
            }
            else
                tooltip.removeClass( 'right' );

            if( pos_top &lt; 0 )
            {
                var pos_top  = target.offset().top + target.outerHeight();
                tooltip.addClass( 'top' );
            }
            else
                tooltip.removeClass( 'top' );

            tooltip.css( { left: pos_left, top: pos_top } )
                   .animate( { top: '+=10', opacity: 1 }, 50 );
        };

        init_tooltip();
        $( window ).resize( init_tooltip );

        var remove_tooltip = function()
        {
            tooltip.animate( { top: '-=10', opacity: 0 }, 50, function()
            {
                $( this ).remove();
            });

            target.attr( 'title', tip );
        };

        target.bind( 'mouseleave', remove_tooltip );
        tooltip.bind( 'click', remove_tooltip );
    });
});
</code></pre>

<p>JS部分，就是當「mouseenter」的事件發生時，加上id為tooltip的div，「mouseleave」時就把div也就是tooltip移除</p>

<p>「init_tooltip」主要是計算載具視窗的大小，來給予tooltip相對的位置和添加類別，其中說明一下 <strong>.outerWidth()</strong> 這個方法</p>

<br/>


<br/>


<h3>width()、innerWidth()、outerWidth()的三者差別</h3>

<p><strong>width()</strong>: 一般我們取得一個元素的寬都會用，取出來的值只有<span style="color:red">宽度</span></p>

<p><strong>innerWidth()</strong>: <span style="color:red">宽度</span>+<span style="color:red">內距(padding)</span></p>

<p><strong>outerWidth()</strong>: <span style="color:red">宽度</span>+<span style="color:red">內距(padding)</span>+<span style="color:red">邊框(boder)</span></p>

<p><strong>outerWidth(true)</strong>: 如果給true的話(預設是false)，<span style="color:red">宽度</span>+<span style="color:red">內距(padding)</span>+<span style="color:red">邊框(boder)</span>+<span style="color:red">邊界(margin)</span></p>

<br/>


<br/>


<p>這樣，搭配幾個小技巧，一個簡單又好用的Tooltip就可以自己製作，而不用再去找相關的plugin</p>

<p>參考資料:</p>

<p><a href="http://osvaldas.info/elegant-css-and-jquery-tooltip-responsive-mobile-friendly" target="_blank">Responsive and Mobile-Friendly Tooltip</a></p>

<p><a href="http://osvaldas.info/examples/elegant-css-and-jquery-tooltip-responsive-mobile-friendly/" target="_blank">Demo</a></p>

<p><a href="http://wyz.67ge.com/css-triangle/" target="_blank">使用纯CSS实现的各种三角，全浏览器兼容</a></p>

<p><a href="http://www.dearoom.com/blog/jquery%E4%B8%AD-heightwidth-innerheightinnerwidth-outerheightouterwidth%E7%9A%84%E5%8C%BA%E5%88%AB/" target="_blank">jQuery中 height(width) innerHeight(innerWidth) outerHeight(outerWidth)的区别</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[jQ-Plugin] Accordion Menu(手風琴)-Kwicks]]></title>
    <link href="http://blog.rx836.tw/blog/jquery-accordion-plugin-kwicks/"/>
    <updated>2012-11-20T11:52:00+08:00</updated>
    <id>http://blog.rx836.tw/blog/jquery-accordion-plugin-kwicks</id>
    <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/-_J-W2xu9kk0/UKssWB_LsAI/AAAAAAAAB8I/l5FDpuCO27c/s415/t1.jpg" /></p>

<p><img src="https://lh5.googleusercontent.com/-jKM2KBpI5eM/UKssWHgRekI/AAAAAAAAB8E/hG205WtoTDU/s415/t2.jpg" /></p>

<p>「jQuery accordion menu」，也有人稱呼為手風琴，從上面兩張圖可以看到原本是一個水平的menu，滑鼠移過去指定某個項目，週遭的menu會縮起來，指定的那個項目會展開，因為一開一合的效果很像手風琴，所以才稱呼為「accordion menu」</p>

<!--more-->


<p>但這篇不教怎麼自己打造accordion menu，因為自認為功力不夠不敢亂現，網路上也很多那種例如「30種精選jQuery accordion menu」主題的文章，資源非常豐富，但因為實在太多款了，每次要做都還要花時間一個一個去看，所以今天就特別介紹一款叫做 <a href="http://devsmash.com/projects/kwicks" target="_blank">「Kwicks」</a> 的jQuery plugin，也可以簡單達到前面所說的accordion menu效果，這邊就記錄在我的Blog裡面，方便我或網路上的朋友可以參考</p>

<p>最好的介紹就是直接看Demo最快，Kwicks可以做到 <a href="http://devsmash.com/projects/kwicks/examples/horizontal" target="_blank">Horizontal</a>、<a href="http://devsmash.com/projects/kwicks/examples/vertical" target="_blank">vertical</a>、<a href="http://devsmash.com/projects/kwicks/examples/easing" target="_blank">Custom Easing</a> 等效果</p>

<p>要用Kwicks需下載他的plugin還有jQuery</p>

<p><a href="http://jquery.com/" target="_blank" />jQuery >= 1.7</a></p>

<p><a href="https://github.com/jmar777/kwicks/blob/v2.0.0/jquery.kwicks.js" target="_blank" />jquery.kwicks.js</a></p>

<p><a href="https://github.com/jmar777/kwicks/blob/v2.0.0/jquery.kwicks.css" target="_blank" />jquery.kwicks.css</a></p>

<p>要注意的是，這版Kwicks是v2.0.0，需用到jQuery 1.7以上，另外如果要用到Custom Easing，還要另外下載jQuery Easing Plugin</p>

<p><a href="http://gsgd.co.uk/sandbox/jquery/easing/" target="_blank" />jQuery Easing Plugin</a></p>

<p>接著就是HTML部分，很簡潔不複雜</p>

<pre><code>&lt;ul class='kwicks kwicks-horizontal'&gt;
    &lt;li&gt;&lt;/li&gt;
    &lt;li&gt;&lt;/li&gt;
    &lt;li&gt;&lt;/li&gt;
    &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>就是用一個&lt;ul&gt;元素包裹著&lt;li&gt;，&lt;li&gt;裡面放著就是項目裡面要擺的東西(例如圖片、文字)，&lt;ul&gt;部分必須要添加「kwicks」和「kwicks-horizontal」兩個class，「kwicks」是固定要添加的class，「kwicks-horizontal」是指水平的呈現方式，如果要垂直就用「kwicks-vertical」</p>

<p>jQuery的寫法部分，有分三種</p>

<pre><code>// instantiate kwicks
$(element).kwicks(opts);

// invoke a method
$(element).kwicks('method-name' [, param]);

// handle events
$(element).on('event-name.kwicks', handler);
</code></pre>

<p>以下是參數設定</p>

<h3>size:(必填)</h3>

<p>設定項目的長或寬，如果isVertical是true的話，這個設定就是高度，其它情況預設就是寬度，特別注意的是這個值會影響到整個accordion menu多高(或多寬)</p>

<h3>maxSize|minSize:(必填)</h3>

<p>展開的最大寬度(或高度)，或是最小寬度(或高度)，你只能選擇填最大或最小，不能兩個都填</p>

<h3>spacing:(Default: 5)</h3>

<p>每個項目之間的距離，預設是5px</p>

<h3>duration:(Default: 500)</h3>

<pre><code>觸發後動畫執行的時間(毫秒)，預設是500毫秒
</code></pre>

<h3>isVertical:(Default: false)</h3>

<pre><code>是否為垂直menu，預設是false
</code></pre>

<p>easing:(Default: none)</p>

<pre><code>如果有載入jQuery Easing Plugin，可以設定效果
</code></pre>

<p>behavior:(Default: none)</p>

<pre><code>初始化的動作
</code></pre>

<h3>Examples</h3>

<p>HTML</p>

<pre><code>&lt;ul class='kwicks kwicks-horizontal'&gt;
    &lt;li id='panel-1'&gt;&lt;img src="pic.jpg" /&gt;&lt;/li&gt;
    &lt;li id='panel-2'&gt;&lt;img src="pic.jpg" /&gt;&lt;/li&gt;
    &lt;li id='panel-3'&gt;&lt;img src="pic.jpg" /&gt;&lt;/li&gt;
    &lt;li id='panel-4'&gt;&lt;img src="pic.jpg" /&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>用&lt;ul&gt;、&lt;li&gt;做一個menu，&lt;ul&gt;加上對應的class，&lt;li&gt;裡面放置圖片或文字</p>

<p>CSS</p>

<pre><code>.kwicks {
    width: 515px;
    height: 100px;
}
.kwicks &gt; li {
    width: 100px;
    height: 100px;
    /* overridden by kwicks but good for when JavaScript is disabled */
    margin-left: 5px;
    float: left;
}

#panel-1 { background-color: #53b388; }
#panel-2 { background-color: #5a69a9; }
#panel-3 { background-color: #c26468; }
#panel-4 { background-color: #bf7cc7; }
</code></pre>

<p>注意width和height會影響到顯示的結果</p>

<p>JS</p>

<pre><code>$(function() {
    $('.kwicks').kwicks({
        size: 100,
        maxSize : 250,
        spacing : 5,
        behavior: 'menu'
    });
});
</code></pre>

<p>size要特別注意的是，越高(or寬)展開的空間就越大，看到的東西就會越多，如何拿捏可以實際在瀏覽器上跑跑看效果</p>

<p>Kwicks還有支援<strong>Methods</strong>和<strong>events</strong>，有興趣的可以直接參考文件(附參考資料)</p>

<p>當然，網路世界的選擇太多了，不一定非要用這個plugin，如果有更好的推薦也歡迎跟我說:)</p>

<p>參考資料:</p>

<p><a href="http://devsmash.com/projects/kwicks" target="_blank">Kwicks for jQuery</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[jQuery] 不要將任何事情都在jQuery.ready()初始化]]></title>
    <link href="http://blog.rx836.tw/blog/jquery-not-initialize-all-things/"/>
    <updated>2012-11-06T15:06:00+08:00</updated>
    <id>http://blog.rx836.tw/blog/jquery-not-initialize-all-things</id>
    <content type="html"><![CDATA[<p>Don't Initialize All the Thing in jQuery.ready()...，這是由<a href="https://twitter.com/elijahmanor" target="_blank">Elijah Manor</a>所寫的一篇文章，裡面提到不要把所有事情都放在jQuery.ready()做初始化(我就是這樣...)，現在就來筆記一下他怎麼說</p>

<!--more-->


<p>寫過jQuery的開發者都知道，在撰寫jQuery都會用jQuery.ready()包起來，在載入網頁時都會先等DOM載入完畢，才會執行裡面的程式碼部分，不過這有時候會讓User在進入網頁時等待過久，失去耐心，如何讓網頁在最短的時間先有畫面出來，也會影響到User使用上的經驗</p>

<p>先看HTML的部分</p>

<pre><code>&lt;form class="form-horizontal well"&gt;
    &lt;fieldset&gt;
        &lt;div class="control-group"&gt;
            &lt;label class="control-label" for="firstName"&gt;First Name&lt;/label&gt;
            &lt;div class="controls"&gt;
                &lt;input id="firstName" type="text" class="input-xlarge"&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;!-- More HTML... --&gt;
        &lt;div class="control-group"&gt;
            &lt;label class="control-label" for="birthday"&gt;Birthday&lt;/label&gt;
            &lt;div class="controls"&gt;
                &lt;input id="birthday" type="text" class="date input-xlarge"&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="form-actions"&gt;
            &lt;button type="submit" class="btn btn-primary"&gt;Save changes&lt;/button&gt;
            &lt;button class="btn"&gt;Cancel&lt;/button&gt;
        &lt;/div&gt;
    &lt;/fieldset&gt;
&lt;/form&gt;
</code></pre>

<p>這是一個很常見的表格，會填寫一些基本資料，不過為了讓User在填寫日期方便，會用「datapicker」這個jQuery UI widget來選擇日期</p>

<p><img src="https://lh5.googleusercontent.com/-mb7pEbTw_FI/UJjDYpdh3oI/AAAAAAAAB28/ZQDyzYWd5K0/s296/123.jpg" /></p>

<p>jQuery程式碼部分</p>

<pre><code>$( document ).ready( function() {

    $( "input.date" ).datepicker({
        minDate: moment().subtract( "months", 1 ).toDate(),
        maxDate: moment().add( "months", 1 ).toDate(),
        dateFormat: "d M, y",
        constrainInput: true,
        beforeShowDay: $.datepicker.noWeekends
    });

});
</code></pre>

<p>用這樣方式的優點是，當用戶選擇日期的時候，jQuery已經準備好並且很快的產生互動，但缺點是:</p>

<p>1.程式碼必須等到DOM載完才能執行</p>

<p>2.沒有使用context，選取器會在整個網頁進行搜尋，降低效能</p>

<p>3.雖然程式碼在初始化的時候就都載入完畢，但不確定是不是真的會用到</p>

<p>所以，為了改善這個情況，我們可以在需要的時候，在執行datapicker</p>

<pre><code>$( document ).on( "focus", "input.date:not(.hasDatepicker)", function() {
    toastr.info( "Initializing " + this.id );

    $( this ).datepicker({
        minDate: moment().subtract( "months", 1 ).toDate(),
        maxDate: moment().add( "months", 1 ).toDate(),
        dateFormat: "d M, y",
        constrainInput: true,
        beforeShowDay: $.datepicker.noWeekends
    });
});
</code></pre>

<p>可以看到在「input.date」上我們監聽了一個事件「focus」，當這個元素並選取時，就會執行裡面的datapicker的UI程式，也就是說，當User要輸入日期時，才會執行這段程式碼，而不用再一開始就將程式碼執行起來</p>

<p>這將會讓我們的網頁不會在這麼的笨重，顯得緩慢，讓我又多學習了一招:)</p>

<p>參考資料:</p>

<p><a href="http://www.elijahmanor.com/2012/10/dont-initialize-all-things-in.html" target="_blank">Don't Initialize All the Things in jQuery.ready() </a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
</feed>
