<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[apa]]></title>
  <link href="http://rx836.github.com/atom.xml" rel="self"/>
  <link href="http://rx836.github.com/"/>
  <updated>2012-11-29T16:57:43+08:00</updated>
  <id>http://rx836.github.com/</id>
  <author>
    <name><![CDATA[阿帕]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[jQuery] jQuery常用的表單驗證事件]]></title>
    <link href="http://rx836.github.com/blog/jquery-html-forms/"/>
    <updated>2012-11-29T15:40:00+08:00</updated>
    <id>http://rx836.github.com/blog/jquery-html-forms</id>
    <content type="html"><![CDATA[<p>在動態網頁的世界裡面，最常使用到的大概就非Forms莫屬，填寫完表格以後都會將資料傳送到bcak-end(後端)，而在傳送之前，有一些資料的驗證都會交由front-end(前端)來處理，這篇就來紀錄一下對於HTML Forms來說，常用的一些jQuery方法</p>

<!--more-->


<h2>.blur()</h2>

<p><strong>Blur</strong> 發生在當一個元素失去焦點時，所觸發的一個事件，在原生的HTML裡面提供了 <strong>onblur</strong> 這個屬性，可以將這個事件附加到HTML元素上，範例如下</p>

<pre><code>&lt;input type = "text" onblur = "doSomething();" /&gt;
</code></pre>

<p>當光標的焦點在input裡面以後，在點擊input以外的元素就會觸發，不過這是老舊的寫法，因為我們希望能盡量在HTML上保持乾淨，與程式邏輯做分離，所以就會使用jQuery的blur()來達到此任務</p>

<pre><code>$("input").blur(function() { /* Do something... */ } );
</code></pre>

<p>要特別注意的是 <strong>onblur </strong> 這個事件適用於所有的input元素，也就是說就算是button也適用，因為在鍵盤上有個「Tab鍵」可以在網頁上做焦點的切換，就會觸發 <strong>onblur</strong> 這個事件</p>

<p>不過在1.7以後的jQuery版本裡面建議開始使用 <strong>.on()</strong> 來達到此任務，效能會比較好</p>

<pre><code>$('input').on('blur', function() { /* Do something.... */ });
$('input').off('blur', function() { /* Do something... */ });
</code></pre>

<p>相較於 <strong>.on()</strong> ， <strong>.off()</strong> 就是停止監聽這個事件，善用 <strong>.off()</strong> 也可以讓效能增加(參考<a href="http://blog.darkthread.net/post-2011-11-07-jquery-1-7-release.aspx" target="_blank">黑暗執行緒 jQuery 1.7筆記</a>)，避免過多不必要的事件監聽</p>

<p>如果你只希望監聽「某個類型元素」的事件，可以這樣寫</p>

<pre><code>$("input[type=radio]").on('blur', function() { /* Do something... */ } );
$("input[type=checkbox]").on('blur', function() { /* Do something... */ } );    
$("input[type=text]").on('blur', function() { /* Do something... */ } );
</code></pre>

<p>當然，只想要針對單一指定的元素，可以用id值來選取</p>

<pre><code>$("input#Email").on('blur', function() { /* Do something... */ } );
</code></pre>

<h2>.change()</h2>

<p><strong>change</strong> 事件相當於HTML裡面的 <strong>onchange </strong> 屬性，跟上一個討論 <strong>blur</strong> 事件很像，但不同的地方在於，當焦點離開元素之前，如果元素有改變的話，就會觸發這個事件，寫法如下</p>

<pre><code>$("input#target").change(function() { /* Do something... */ } );
$("input#target").bind("change", function() { /* Do something... */ } );
$("input#target").on("change", function() { /* Do something... */ } );
</code></pre>

<p>一樣建議使用 <strong>on()</strong> 來監聽change這個事件</p>

<p>同時利用 <strong>onChange</strong> 和 <strong>onBlur</strong> 來驗證表單也是很常見的做法</p>

<pre><code>$("input#target").on("change", EmailChecked );
$("input#target").on("blur", EmailChecked );

function EmailChecked( value )
{
    //在這邊做驗證...

     if (valid)
     {
         // 驗證通過...
     }
     else
     {
         // 驗證不通過...
     }
}
</code></pre>

<p>可以讓驗證做的更完善，兩個事件的觸發先後順序為 onChange>onBlur</p>

<h2>.focus()</h2>

<p>相等同於 <strong>onFocus</strong> ，如果 <strong>.blur()</strong> 是失去焦點，那 <strong>.focus()</strong>就是得到焦點，也就是在某個元素被點擊以後所觸發的事件，語法如下</p>

<pre><code>$("input#myInput").focus(function() { /* Do something... */ });
$("input#myInput").bind("focus", function() { /* Do something... */ });
$("input#myInput").on("focus", function() { /* Do something... */ });
</code></pre>

<p>這邊還是建議使用 <strong>.on()</strong></p>

<h2>.select()</h2>

<p>select算是很容易讓人混淆的事件，在text input元素裡面(或textarea)，當你在裡面將文字反白以後，就會觸發此事件，範例如下</p>

<pre><code>&lt;input type="text" value="Some text" /&gt;

&lt;script&gt;
    $(":input").select( function () { 
        alert('文字被反白');
    });
&lt;/script&gt;
</code></pre>

<p>但有些人可能會誤用成這樣</p>

<pre><code>$("input[type=checkbox]").select();
$("input[type=radio]").select();  
</code></pre>

<p><strong>這個方法並不能將checkbox或是radio執行勾選</strong>，正確的做法應該是這樣</p>

<pre><code>$("input[type=checkbox]").prop("checked", true); // Check checkbox
$("input[type=radio]").prop("checked", true); // Check radio button
</code></pre>

<h2>.val()</h2>

<p>這大概是jQuery最長用到的方法之一， <strong>.val()</strong> 可以取得值</p>

<pre><code>var Email = $("input#Email").val();
</code></pre>

<p>當是用在&lt;select&gt;元素時，<strong>.val()</strong> 可以將現在選取的項目值取出來</p>

<pre><code>&lt;select id="test1" name="test1" /&gt;
  &lt;option value="1"&gt;select1&lt;/option&gt;
  &lt;option value="2"&gt;select2&lt;/option&gt;
  &lt;option value="3"&gt;select3&lt;/option&gt;
&lt;/select&gt;

&lt;script&gt;
    $("select").val(); 
&lt;/script&gt;
</code></pre>

<p>不過 <strong>.val()</strong> 只適用在input元素裡面，就算在div裡面自己加上value屬性也取不到值</p>

<pre><code>&lt;div value = "apa"&gt;&lt;/div&gt;

&lt;script&gt;
    $("div").val(); //錯誤的...
&lt;/script&gt;
</code></pre>

<p>div應該要用 <strong>.text()</strong> 或是 <strong>.html()</strong> 來修改裡面的內容</p>

<h2>.submit()</h2>

<p>在表單傳送裡面，HTML必須長成這樣</p>

<pre><code>&lt;form id = "myForm"&gt;
    &lt;input type = "submit" value = "Submit"/&gt;
&lt;/form&gt;
</code></pre>

<p>submit的button必須一定要包裹在&lt;form&gt;，如果想要藉由&lt;form&gt;以外的元素來觸發呢？可以這樣寫</p>

<pre><code>$("input#myButton").click(function() {
    $("#myForm").submit();
});
</code></pre>

<p>這樣就可以不需要透過submit來將資料送出，另外想在送出前做表單驗證的話，也可以用 <strong>.submit()</strong></p>

<pre><code>$("form").submit(function() {
  if ($("input:first").val() == "correct") {
    $("span").text("Validated...").show();
    return true;
  }
  $("span").text("Not valid!").show().fadeOut(1000);
  return false;
});
</code></pre>

<p>當按下submit以後，就會進行驗證，假如回傳值是false，表單就不會送出</p>

<p>以上是常用的表單驗證方法，當然網路上也有很多寫好的plugin可以用，因為處理這個老實說蠻麻煩的，善用plugin也是個不錯的選擇</p>

<h3>參考資料:</h3>

<p><a href="http://blog.darkthread.net/post-2011-11-07-jquery-1-7-release.aspx" target="_blank">黑暗執行緒 jQuery 1.7筆記</a></p>

<p><a href="http://api.jquery.com/blur/" target="_blank">jQuery API .blur()</a></p>

<p><a href="http://api.jquery.com/change/" target="_blank">jQuery API .change()</a></p>

<p><a href="http://api.jquery.com/on/" target="_blank">jQuery API .on()</a></p>

<p><a href="http://api.jquery.com/focus/" target="_blank">jQuery API .focus()</a></p>

<p><a href="http://api.jquery.com/select/" target="_blank">jQuery API .select()</a></p>

<p><a href="http://api.jquery.com/val/" target="_blank">jQuery API .val()</a></p>

<p><a href="http://api.jquery.com/submit/" target="_blank">jQuery API .submit()</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[jQ-Plugin] 有效降低會員註冊退信率的mailcheck]]></title>
    <link href="http://rx836.github.com/blog/mailcheck-jquery-plugin/"/>
    <updated>2012-11-28T12:04:00+08:00</updated>
    <id>http://rx836.github.com/blog/mailcheck-jquery-plugin</id>
    <content type="html"><![CDATA[<p><img src="https://lh5.googleusercontent.com/-dLci9WLFC-8/ULWyqQJ-OxI/AAAAAAAAB_U/odHWaG3jNfE/s482/w.jpg" /></p>

<p>免費檔案分享<a href="http://kicksend.com/" target="_blank">Kicksend</a>有寫一篇文章是關於<a href="http://blog.kicksend.com/how-we-decreased-sign-up-confirmation-email-bounces-by-50/" target=_blank"">如何降低退信率</a>，內容大概是講User註冊會員以後，會發送註冊的確認信，但常常會發生被退信的情況，導致會員收不到信可能必須重新申請一次帳號，不然就是請客服修改E-mail，所以Kicksend為了減少這個困擾就做了分析並且解決問題</p>

<!--more-->


<p>Kicksend發現有很多人被退信的原因都是在輸入電子郵件(E-mail)的時候打錯domain，例如“hotmail.con”、“gnail.com”、“yajoo.com”等，這種錯誤有時候用戶自己都不知道，就直接按送出，導致收不到註冊信，所以Kicksend就做了一個設計，在用戶輸入E-mail以後，會檢查E-mail的domain，如果發現疑似錯誤情形，就會跳出建議的選項問用戶要不要更改，做到良好的 <strong>user experience</strong>，用了這個方法以後也確實降低了50%的退信率，無形中也增加了不少用戶，而下面將介紹這套jQuery plugin - <strong>mailcheck</strong></p>

<h2>start</h2>

<p>首先，可以去github載回原始碼</p>

<p><a href="https://github.com/Kicksend/mailcheck" target="_blank">mailcheck</a></p>

<p>接著在網頁裡面載入jQuery和mailcheck.min</p>

<pre><code>&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;script src="mailcheck.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>html部分，一個text field</p>

<pre><code>&lt;input id="email" name="email" type="text" /&gt;
</code></pre>

<p>接著是js部份</p>

<pre><code>var domains = ['hotmail.com', 'gmail.com', 'aol.com'];
var topLevelDomains = ["com", "net", "org"];

var superStringDistance = function(string1, string2) {
  // a string distance algorithm of your choosing
}

$('#email').on('blur', function() {
  $(this).mailcheck({
    domains: domains,                       // optional
    topLevelDomains: topLevelDomains,       // optional
    distanceFunction: superStringDistance,  // optional
    suggested: function(element, suggestion) {
      // callback code
    },
    empty: function(element) {
      // callback code
    }
  });
});
</code></pre>

<p>「domains」、「topLevelDomains」、「distanceFunction」這三個參數都是選填，分別為</p>

<p><strong>domains</strong>: 要比對的domain，例如:yahoo.com、google.com</p>

<p><strong>topLevelDomains</strong>: 允許的topLevelDomain，例如:com、net</p>

<p><strong>distanceFunction</strong>: 自訂用來計算最接近topLevelDomain內容的函式</p>

<p>假設在沒有填寫 <strong>domains</strong> 和 <strong>topLevelDomains</strong> 情況下，會採用預設值，根據source code裡面所寫的預設值為</p>

<p>預設domains</p>

<pre><code>defaultDomains: ["yahoo.com", "google.com", "hotmail.com", "gmail.com", "me.com", "aol.com", "mac.com",
  "live.com", "comcast.net", "googlemail.com", "msn.com", "hotmail.co.uk", "yahoo.co.uk",
  "facebook.com", "verizon.net", "sbcglobal.net", "att.net", "gmx.com", "mail.com"]
</code></pre>

<p>預設topLevelDomains</p>

<pre><code>defaultTopLevelDomains: ["co.uk", "com", "net", "org", "info", "edu", "gov", "mil"]
</code></pre>

<p>而「suggested」和「empty」則分別是 <strong>輸入錯誤時的callback</strong> 和 <strong>沒填寫E-mail的callback</strong>，所以你可以自行在這裡加上程式碼提醒User輸入錯誤或忘記輸入</p>

<h3>沒有jQuery的情況下</h3>

<p>假如你的專案裡面沒有用到jQuery，也可以單純使用js版本</p>

<pre><code>Kicksend.mailcheck.run({
  email: yourTextInput.value,
  domains: domains,                       // optional
  topLevelDomains: topLevelDomains,       // optional
  distanceFunction: superStringDistance,  // optional
  suggested: function(suggestion) {
    // callback code
  },
  empty: function() {
    // callback code
  }
});
</code></pre>

<p>最後附上有用到mailcheck這項效果的網站</p>

<ul>
<li><a href="http://kicksend.com/" target="_blank">Kicksend</a></li>
<li><a href="http://dropbox.com/" target="_blank">Dropbox</a></li>
<li><a href="http://flotype.com/" target="_blank">Flotype</a></li>
<li><a href="http://kickstarter.com/" target="_blank">Kickstarter</a></li>
<li><a href="http://kippt.com/" target="_blank">Kippt</a></li>
<li><a href="http://minecraft.net/" target="_blank">Minecraft</a></li>
<li><a href="http://prispy.com/" target="_blank">Prispy</a></li>
<li><a href="http://sbnation.com/" target="_blank">SB Nation</a></li>
<li><a href="http://show-space.com/" target="_blank">Show Space</a></li>
<li><a href="http://theverge.com/" target="_blank">The Verge</a></li>
<li><a href="http://uber.com/" target="_blank">Uber</a></li>
</ul>


<h3>參考資料:</h3>

<p><a href="https://github.com/Kicksend/mailcheck" target="_blank">mailcheck Github</a></p>

<p><a href="http://kicksend.com/join" target="_blank">Demo</a></p>

<p><a href="http://blog.kicksend.com/how-we-decreased-sign-up-confirmation-email-bounces-by-50/" target="_blank">How we decreased sign up confirmation email bounces by 50%</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[jQuery] 自製擁有Responsive的Tooltip]]></title>
    <link href="http://rx836.github.com/blog/friendly-tooltip-responsive/"/>
    <updated>2012-11-27T11:53:00+08:00</updated>
    <id>http://rx836.github.com/blog/friendly-tooltip-responsive</id>
    <content type="html"><![CDATA[<p><img src="https://lh6.googleusercontent.com/-KiD_TaOPzFA/ULRxljbyVVI/AAAAAAAAB-M/nHY1WuJDaGE/s373/q1.jpg" /></p>

<p>之前做Tooltip，都是上網找plugin比較多，但這次看到一篇文章，是自己寫一個Tooltip，就來記錄一下，而且還有Responsive的效果，可以依照載具大小做縮放和位置的改變，code不多，也很簡單明瞭</p>

<!--more-->


<p>先稍微介紹一下什麼是Tooltip，就如上面的圖所示，他可以提供良好的 <strong>user experience</strong>，可以在某個功能或選單，又或是某段文字上，在滑鼠移過去時(有時候是在點擊情況下，但少數)，出現一個小框，裡面有少許的說明文字，讓用戶知道，這個功能或是按鈕是在幹嘛</p>

<p>首先，是CSS的部分</p>

<pre><code>#tooltip
{
    text-align: center;
    color: #fff;
    background: #111;
    position: absolute;
    z-index: 100;
    padding: 15px;
}

    #tooltip:after /* triangle decoration */
    {
        width: 0;
        height: 0;
        border-left: 10px solid transparent;
        border-right: 10px solid transparent;
        border-top: 10px solid #111;
        content: '';
        position: absolute;
        left: 50%;
        bottom: -10px;
        margin-left: -10px;
    }

        #tooltip.top:after
        {
            border-top-color: transparent;
            border-bottom: 10px solid #111;
            top: -20px;
            bottom: auto;
        }

        #tooltip.left:after
        {
            left: 10px;
            margin: 0;
        }

        #tooltip.right:after
        {
            right: 10px;
            left: auto;
            margin: 0;
        }
</code></pre>

<p>這段CSS是建立一個tooltip，包括在不同載具時，呈現tooltip在不同的適當位置(bottom、top、left、right)，不過這邊有個小技巧要特別拿出來說明一下</p>

<p>就是Tooltip上面那個小箭頭其實是用CSS畫出來的</p>

<p><img src="https://lh4.googleusercontent.com/-jhfjv_hv-hY/ULRzfM9ycJI/AAAAAAAAB-w/oOohCQO9N6w/s373/q6.jpg" /></p>

<p>不同的CSS畫法，可以參考下面範例，HTML部分就只要一個div</p>

<h3>用CSS畫出三角型</h3>

<p><img src="https://lh3.googleusercontent.com/-kNDtVnCgUzE/ULRxloJG7qI/AAAAAAAAB-U/Jkfm3E0DC6k/s112/q2.jpg" /></p>

<pre><code>div {
    width: 0;
    height: 0;
    border-left: 50px solid #fff;
    border-right: 50px solid #fff;
    border-bottom: 100px solid black;
}
</code></pre>

<p><img src="https://lh5.googleusercontent.com/-siEgv7d8AJM/ULRxmDlFMeI/AAAAAAAAB-Q/BFmufqFJ3VU/s115/q4.jpg" /></p>

<pre><code>div {
    width: 0;
    height: 0;
    border-top: 50px solid #fff;
    border-right: 100px solid black;
    border-bottom: 50px solid #fff;
}
</code></pre>

<p><img src="https://lh6.googleusercontent.com/-VWF99ZiXIo8/ULRxlgGjbuI/AAAAAAAAB-I/ASZmQTUURI4/s110/q3.jpg" /></p>

<pre><code>div {
    width: 0;
    height: 0;
    border-left: 50px solid #fff;
    border-right: 50px solid #fff;
    border-top: 100px solid black;
}
</code></pre>

<p><img src="https://lh4.googleusercontent.com/-bjaIIy9c9Ow/ULRxmXa20iI/AAAAAAAAB-Y/ZvF6cRBvc1I/s107/q5.jpg" /></p>

<pre><code>div {
    width: 0;
    height: 0;
    border-top: 50px solid #fff;
    border-right: 100px solid black;
    border-bottom: 50px solid #fff;
}
</code></pre>

<p>當然如果希望是別的底色可以自己再做修改，接下來是JS部分</p>

<pre><code>$( document ).ready( function()
{
    var targets = $( '[rel~=tooltip]' ),
        target  = false,
        tooltip = false,
        title   = false;

    targets.bind( 'mouseenter', function()
    {
        target  = $( this );
        tip     = target.attr( 'title' );
        tooltip = $( '&lt;div id="tooltip"&gt;&lt;/div&gt;' );

        if( !tip || tip == '' )
            return false;

        target.removeAttr( 'title' );
        tooltip.css( 'opacity', 0 )
               .html( tip )
               .appendTo( 'body' );

        var init_tooltip = function()
        {
            if( $( window ).width() &lt; tooltip.outerWidth() * 1.5 )
                tooltip.css( 'max-width', $( window ).width() / 2 );
            else
                tooltip.css( 'max-width', 340 );

            var pos_left = target.offset().left + ( target.outerWidth() / 2 ) - ( tooltip.outerWidth() / 2 ),
                pos_top  = target.offset().top - tooltip.outerHeight() - 20;

            if( pos_left &lt; 0 )
            {
                pos_left = target.offset().left + target.outerWidth() / 2 - 20;
                tooltip.addClass( 'left' );
            }
            else
                tooltip.removeClass( 'left' );

            if( pos_left + tooltip.outerWidth() &gt; $( window ).width() )
            {
                pos_left = target.offset().left - tooltip.outerWidth() + target.outerWidth() / 2 + 20;
                tooltip.addClass( 'right' );
            }
            else
                tooltip.removeClass( 'right' );

            if( pos_top &lt; 0 )
            {
                var pos_top  = target.offset().top + target.outerHeight();
                tooltip.addClass( 'top' );
            }
            else
                tooltip.removeClass( 'top' );

            tooltip.css( { left: pos_left, top: pos_top } )
                   .animate( { top: '+=10', opacity: 1 }, 50 );
        };

        init_tooltip();
        $( window ).resize( init_tooltip );

        var remove_tooltip = function()
        {
            tooltip.animate( { top: '-=10', opacity: 0 }, 50, function()
            {
                $( this ).remove();
            });

            target.attr( 'title', tip );
        };

        target.bind( 'mouseleave', remove_tooltip );
        tooltip.bind( 'click', remove_tooltip );
    });
});
</code></pre>

<p>JS部分，就是當「mouseenter」的事件發生時，加上id為tooltip的div，「mouseleave」時就把div也就是tooltip移除</p>

<p>「init_tooltip」主要是計算載具視窗的大小，來給予tooltip相對的位置和添加類別，其中說明一下 <strong>.outerWidth()</strong> 這個方法</p>

<br/>


<br/>


<h3>width()、innerWidth()、outerWidth()的三者差別</h3>

<p><strong>width()</strong>: 一般我們取得一個元素的寬都會用，取出來的值只有<span style="color:red">宽度</span></p>

<p><strong>innerWidth()</strong>: <span style="color:red">宽度</span>+<span style="color:red">內距(padding)</span></p>

<p><strong>outerWidth()</strong>: <span style="color:red">宽度</span>+<span style="color:red">內距(padding)</span>+<span style="color:red">邊框(boder)</span></p>

<p><strong>outerWidth(true)</strong>: 如果給true的話(預設是false)，<span style="color:red">宽度</span>+<span style="color:red">內距(padding)</span>+<span style="color:red">邊框(boder)</span>+<span style="color:red">邊界(margin)</span></p>

<br/>


<br/>


<p>這樣，搭配幾個小技巧，一個簡單又好用的Tooltip就可以自己製作，而不用再去找相關的plugin</p>

<p>參考資料:</p>

<p><a href="http://osvaldas.info/elegant-css-and-jquery-tooltip-responsive-mobile-friendly" target="_blank">Responsive and Mobile-Friendly Tooltip</a></p>

<p><a href="http://osvaldas.info/examples/elegant-css-and-jquery-tooltip-responsive-mobile-friendly/" target="_blank">Demo</a></p>

<p><a href="http://wyz.67ge.com/css-triangle/" target="_blank">使用纯CSS实现的各种三角，全浏览器兼容</a></p>

<p><a href="http://www.dearoom.com/blog/jquery%E4%B8%AD-heightwidth-innerheightinnerwidth-outerheightouterwidth%E7%9A%84%E5%8C%BA%E5%88%AB/" target="_blank">jQuery中 height(width) innerHeight(innerWidth) outerHeight(outerWidth)的区别</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CSS] CSS3 box-shadow-用一個div畫出IPHONE 4]]></title>
    <link href="http://rx836.github.com/blog/css3-real-beauty-box-shadows/"/>
    <updated>2012-11-26T10:21:00+08:00</updated>
    <id>http://rx836.github.com/blog/css3-real-beauty-box-shadows</id>
    <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/-gnXY1RrRaSU/ULLgp4EX-6I/AAAAAAAAB84/m3JLnkc5h_E/s125/a.jpg" /></p>

<p>CSS3有許多讓人驚艷的地方，其中之一就是「box-shadow」，在這之前為了做出陰影效果，可能需要一些Photoshop的幫助，但在CSS3卻可以用純CSS來達到這樣的結果，但如果你認為「box-shadow」只能拿來做陰影效果的話，那可就誤會大了，看完這篇文章，你或許會有不同的想法</p>

<!--more-->


<p>在此之前，我們先來介紹 <strong>box-shadow</strong> 一些基本的屬性和用法</p>

<p><strong>x-offset</strong>: 水平位移植，必須要指定</p>

<p><strong>y-offset</strong>: 垂直位移植，必須要指定</p>

<p><strong>blur</strong>: 模糊效果，不能為負值，預設為0</p>

<p><strong>spread</strong>: 擴散強度，可以為負值(縮小)，預設為0</p>

<p><strong>color</strong>: 顏色，有些網站可能會寫預設值為黑色，<strong>但一般建議還是要給予顏色，因為有些瀏覽器預設值並不一定為黑色(例如手機)</strong></p>

<p><strong>inset</strong>: 這個值有些人是放在<strong>最前面</strong>，有些是放在<strong>最後面</strong>，兩者皆可，如果有給予這個值box就會在陰影裡面，反之則在外面</p>

<p>以下為box-shadow語法</p>

<pre><code>box-shadow: inset x-offset y-offset blur spread color
</code></pre>

<p>記得x-offset和y-offset為必要值，其它依照排列，如果只有blur可不填spread，但有spread一定要給blur值(可以為0px)</p>

<p>特別注意的是，<strong>spread</strong>這個屬性值，等等會來好好說明，先來看幾個簡單的範例</p>

<p>以下的範例HTML部分都只有這一行</p>

<pre><code>&lt;div class="shadow"&gt;&lt;/div&gt;
</code></pre>

<h3>X and Y Offsets</h3>

<pre class="_cssdeck_embed" data-pane="output,css" data-user="rx836" data-href="mo08pkqb" data-version="0"></pre>


<script async src="http://cssdeck.com/assets/js/embed.js"></script>


<p>這邊建立了一個width和height都為100px的box，然後陰影依照這個box往右位移10px，往下位移10px，且顏色為黑色</p>

<h3>Inset</h3>

<pre class="_cssdeck_embed" data-pane="output,css" data-user="rx836" data-href="eesxhanx" data-version="0"></pre>


<script async src="http://cssdeck.com/assets/js/embed.js"></script>


<p>如果有給予 <strong>inset</strong>，box就會在陰影裡面</p>

<h3>Blur</h3>

<pre class="_cssdeck_embed" data-pane="output,css" data-user="rx836" data-href="vic8fc7f" data-version="0"></pre>


<script async src="http://cssdeck.com/assets/js/embed.js"></script>


<p>添加 <strong>Blur</strong> 值，會讓陰影有模糊效果</p>

<h3>Colors</h3>

<pre class="_cssdeck_embed" data-pane="output,css" data-user="rx836" data-href="zcpl4thp" data-version="0"></pre>


<script async src="http://cssdeck.com/assets/js/embed.js"></script>


<p>也可以加些不一樣的顏色，這裡是給予rgba值</p>

<h3>spread</h3>

<p>剛剛有特別要注意到 <strong>spread</strong> 這個值，原因就是他可以擴展陰影的範圍，可以放大可以縮小，但不能改變形狀，因為陰影的形狀是來自box(就跟人的影子一樣)，也就是box是圓形，陰影就是圓形，是方形就是方形</p>

<pre class="_cssdeck_embed" data-pane="output,css,html" data-user="rx836" data-href="qnznlsof" data-version="0"></pre>


<script async src="http://cssdeck.com/assets/js/embed.js"></script>


<p>如果spread為5px，那陰影就會擴展5px，如果為-5px，那陰影就會縮減5px，也就是說可以依照需求改變陰影的大小，這樣可以幹嘛呢？可以看看下面這個範例</p>

<pre class="_cssdeck_embed" data-pane="output,css,html" data-user="rx836" data-href="qmbxujts" data-version="0"></pre>


<script async src="http://cssdeck.com/assets/js/embed.js"></script>


<p>看到了嗎？我可以用<strong>一個div就創造出這麼多個box</strong>，也就是說我可以用一個元素來做出很多意想不到的效果，例如</p>

<p>我可以用一個div畫出一支IPHONE 4</p>

<p><a href="http://cssdeck.com/labs/creating-single-element-iphone-using-css3" target="_blank"><img src="https://lh3.googleusercontent.com/-L9BuoRAjjfE/ULLjV_tNNGI/AAAAAAAAB9Y/SSAO9DOdBMU/s558/rr.jpg" /></a></p>

<p>或用一個div畫出蒙娜麗莎的微笑</p>

<p><a href="http://cssdeck.com/labs/mona-lisa-with-pure-css" target="_blank"><img src="https://lh5.googleusercontent.com/-gzi2x2_clBk/ULLjV4zuCnI/AAAAAAAAB9g/Oo9VmXXkF_E/s535/rr1.jpg" /></a></p>

<p>甚至是利用這個原理，來當作畫Pixel圖案來使用</p>

<p><a href="http://cssdeck.com/labs/create-a-pixel-character-using-css3-box-shadows" target="_blank"><img src="https://lh6.googleusercontent.com/-lnfW4QAeeao/ULLjV84Z0oI/AAAAAAAAB9c/1J0e5V0VjS0/s300/rr2.jpg" /></a></p>

<p>所以好好運用box-shadow，他可以發揮許多意想不到的創意喔</p>

<p>參考資料:</p>

<p><a href="http://codetheory.in/the-real-beauty-of-css3-box-shadows/" target="_blank">The Real Beauty of CSS3 Box Shadows</a></p>

<p><a href="http://www.w3schools.com/cssref/css3_pr_box-shadow.asp" target="_blank">CSS3 的box-shadow屬性</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[JavaScript] 簡單看命名空間(Namespace)與jQuery原始碼]]></title>
    <link href="http://rx836.github.com/blog/javascript-namespace/"/>
    <updated>2012-11-21T12:09:00+08:00</updated>
    <id>http://rx836.github.com/blog/javascript-namespace</id>
    <content type="html"><![CDATA[<p>網路上JavaScript的library或plugin非常的多，我平常在寫網頁時，有用到別人的plugin都會稍微看一下source code，會發現「Namespace」在JavaScript的世界當中應用相當的廣泛，就連著名的 <strong>jQuery</strong> 也有用到，學習Namespace不僅可以更能看懂別人寫的code，對於增進自己JavaScript的底子也是非常有幫助，可以說不能輕忽他</p>

<!--more-->


<p>有一個情況是這樣子的，今天我寫了一個叫做CheckName()的函式在網頁裡面，而同事因為接手維護，也因為某次的需求也在網頁裡面自己寫了一個CheckName()，這會發生什麼事情呢？如果同事寫的CheckName()在我之後，他將會<strong>覆蓋</strong>我之前寫的CheckName()，反之亦然，這會造成某段使用這個函式的程式碼出錯，所以為了要避免這種情形發生，可以為他們<strong>再取一個名字</strong>，也就是所謂的<strong>命名空間</strong>，但JavaScript本身並沒有這個機制，但可以依靠<strong>物件</strong>來達到這樣的效果</p>

<p>不好的js寫法</p>

<pre><code>function CheckName() {
    //我寫的
}
//很多程式碼
//很多程式碼
//很多程式碼
//很多程式碼
function CheckName() {
    //.. 同事寫的
}
</code></pre>

<p>可以這樣寫</p>

<pre><code>//建立一個物件
var apa = {};     
function CheckName() {
    //我寫的
}
//使物件新增一個方法   
apa.CheckName = CheckName; 
//要執行時
apa.CheckName();
</code></pre>

<p>如果我同事要寫，他也可以這樣子寫</p>

<pre><code>var gary = {};     
function CheckName() {
    //同事寫的
}   
gary.CheckName = CheckName;     
gary.CheckName();   
</code></pre>

<p>這樣就不會有衝突的問題，另外你有看過這樣的寫法嗎？</p>

<pre><code>var obj = obj || {};
</code></pre>

<p>這代表說如果在建立物件之前先檢查有沒有使用過，如果有的話就直接延用之前寫的物件，如果沒有就給空的物件，避免物件重複宣告</p>

<p>在JavaScript強調盡量少用全域變數，多用區域變數，所以有時候我們可以這樣把程式碼包起來</p>

<pre><code>(function() {
    var a=1; //區域變數
})();
</code></pre>

<p>這樣就可以減少全域變數的使用，jQuery的原始碼也是利用這樣的方式</p>

<p><a href="http://code.jquery.com/jquery-1.8.3.js" target="_blank">jQuery原始碼</a></p>

<pre><code>(function( window, undefined ) {
    //...
    //...
    jQuery = function( selector, context ) {
        // The jQuery object is actually just the init constructor 'enhanced'
        return new jQuery.fn.init( selector, context, rootjQuery );
    }
    //...
    //...
    window.jQuery = window.$ = jQuery;
    //...
})( window );
</code></pre>

<p>可以看到中間那段jQuery=function( selector, context )就是我們用jQuery最常見的選擇器宣告，也因為這樣我們才能「jQuery(div)」這樣的方式寫jQuery，而「window.jQuery = window.$ = jQuery;」這段就是可以用「$」來代替「jQuery」，這樣對於jQuery有沒有比較了解呢</p>

<p>參考資料:</p>

<p><a href="http://caterpillar.onlyfun.net/Gossip/JavaScript/Namespace.html" target="_blank">JavaScript Essence: 名稱管理</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[jQ-Plugin] Accordion Menu(手風琴)-Kwicks]]></title>
    <link href="http://rx836.github.com/blog/jquery-accordion-plugin-kwicks/"/>
    <updated>2012-11-20T11:52:00+08:00</updated>
    <id>http://rx836.github.com/blog/jquery-accordion-plugin-kwicks</id>
    <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/-_J-W2xu9kk0/UKssWB_LsAI/AAAAAAAAB8I/l5FDpuCO27c/s415/t1.jpg" /></p>

<p><img src="https://lh5.googleusercontent.com/-jKM2KBpI5eM/UKssWHgRekI/AAAAAAAAB8E/hG205WtoTDU/s415/t2.jpg" /></p>

<p>「jQuery accordion menu」，也有人稱呼為手風琴，從上面兩張圖可以看到原本是一個水平的menu，滑鼠移過去指定某個項目，週遭的menu會縮起來，指定的那個項目會展開，因為一開一合的效果很像手風琴，所以才稱呼為「accordion menu」</p>

<!--more-->


<p>但這篇不教怎麼自己打造accordion menu，因為自認為功力不夠不敢亂現，網路上也很多那種例如「30種精選jQuery accordion menu」主題的文章，資源非常豐富，但因為實在太多款了，每次要做都還要花時間一個一個去看，所以今天就特別介紹一款叫做 <a href="http://devsmash.com/projects/kwicks" target="_blank">「Kwicks」</a> 的jQuery plugin，也可以簡單達到前面所說的accordion menu效果，這邊就記錄在我的Blog裡面，方便我或網路上的朋友可以參考</p>

<p>最好的介紹就是直接看Demo最快，Kwicks可以做到 <a href="http://devsmash.com/projects/kwicks/examples/horizontal" target="_blank">Horizontal</a>、<a href="http://devsmash.com/projects/kwicks/examples/vertical" target="_blank">vertical</a>、<a href="http://devsmash.com/projects/kwicks/examples/easing" target="_blank">Custom Easing</a> 等效果</p>

<p>要用Kwicks需下載他的plugin還有jQuery</p>

<p><a href="http://jquery.com/" target="_blank" />jQuery >= 1.7</a></p>

<p><a href="https://github.com/jmar777/kwicks/blob/v2.0.0/jquery.kwicks.js" target="_blank" />jquery.kwicks.js</a></p>

<p><a href="https://github.com/jmar777/kwicks/blob/v2.0.0/jquery.kwicks.css" target="_blank" />jquery.kwicks.css</a></p>

<p>要注意的是，這版Kwicks是v2.0.0，需用到jQuery 1.7以上，另外如果要用到Custom Easing，還要另外下載jQuery Easing Plugin</p>

<p><a href="http://gsgd.co.uk/sandbox/jquery/easing/" target="_blank" />jQuery Easing Plugin</a></p>

<p>接著就是HTML部分，很簡潔不複雜</p>

<pre><code>&lt;ul class='kwicks kwicks-horizontal'&gt;
    &lt;li&gt;&lt;/li&gt;
    &lt;li&gt;&lt;/li&gt;
    &lt;li&gt;&lt;/li&gt;
    &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>就是用一個&lt;ul&gt;元素包裹著&lt;li&gt;，&lt;li&gt;裡面放著就是項目裡面要擺的東西(例如圖片、文字)，&lt;ul&gt;部分必須要添加「kwicks」和「kwicks-horizontal」兩個class，「kwicks」是固定要添加的class，「kwicks-horizontal」是指水平的呈現方式，如果要垂直就用「kwicks-vertical」</p>

<p>jQuery的寫法部分，有分三種</p>

<pre><code>// instantiate kwicks
$(element).kwicks(opts);

// invoke a method
$(element).kwicks('method-name' [, param]);

// handle events
$(element).on('event-name.kwicks', handler);
</code></pre>

<p>以下是參數設定</p>

<h3>size:(必填)</h3>

<p>設定項目的長或寬，如果isVertical是true的話，這個設定就是高度，其它情況預設就是寬度，特別注意的是這個值會影響到整個accordion menu多高(或多寬)</p>

<h3>maxSize|minSize:(必填)</h3>

<p>展開的最大寬度(或高度)，或是最小寬度(或高度)，你只能選擇填最大或最小，不能兩個都填</p>

<h3>spacing:(Default: 5)</h3>

<p>每個項目之間的距離，預設是5px</p>

<h3>duration:(Default: 500)</h3>

<pre><code>觸發後動畫執行的時間(毫秒)，預設是500毫秒
</code></pre>

<h3>isVertical:(Default: false)</h3>

<pre><code>是否為垂直menu，預設是false
</code></pre>

<p>easing:(Default: none)</p>

<pre><code>如果有載入jQuery Easing Plugin，可以設定效果
</code></pre>

<p>behavior:(Default: none)</p>

<pre><code>初始化的動作
</code></pre>

<h3>Examples</h3>

<p>HTML</p>

<pre><code>&lt;ul class='kwicks kwicks-horizontal'&gt;
    &lt;li id='panel-1'&gt;&lt;img src="pic.jpg" /&gt;&lt;/li&gt;
    &lt;li id='panel-2'&gt;&lt;img src="pic.jpg" /&gt;&lt;/li&gt;
    &lt;li id='panel-3'&gt;&lt;img src="pic.jpg" /&gt;&lt;/li&gt;
    &lt;li id='panel-4'&gt;&lt;img src="pic.jpg" /&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>用&lt;ul&gt;、&lt;li&gt;做一個menu，&lt;ul&gt;加上對應的class，&lt;li&gt;裡面放置圖片或文字</p>

<p>CSS</p>

<pre><code>.kwicks {
    width: 515px;
    height: 100px;
}
.kwicks &gt; li {
    width: 100px;
    height: 100px;
    /* overridden by kwicks but good for when JavaScript is disabled */
    margin-left: 5px;
    float: left;
}

#panel-1 { background-color: #53b388; }
#panel-2 { background-color: #5a69a9; }
#panel-3 { background-color: #c26468; }
#panel-4 { background-color: #bf7cc7; }
</code></pre>

<p>注意width和height會影響到顯示的結果</p>

<p>JS</p>

<pre><code>$(function() {
    $('.kwicks').kwicks({
        size: 100,
        maxSize : 250,
        spacing : 5,
        behavior: 'menu'
    });
});
</code></pre>

<p>size要特別注意的是，越高(or寬)展開的空間就越大，看到的東西就會越多，如何拿捏可以實際在瀏覽器上跑跑看效果</p>

<p>Kwicks還有支援<strong>Methods</strong>和<strong>events</strong>，有興趣的可以直接參考文件(附參考資料)</p>

<p>當然，網路世界的選擇太多了，不一定非要用這個plugin，如果有更好的推薦也歡迎跟我說:)</p>

<p>參考資料:</p>

<p><a href="http://devsmash.com/projects/kwicks" target="_blank">Kwicks for jQuery</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CSS] 拋棄原生checkbox用CSS3自己簡單動手做]]></title>
    <link href="http://rx836.github.com/blog/css3-checkboxes-radiobuttons/"/>
    <updated>2012-11-16T15:27:00+08:00</updated>
    <id>http://rx836.github.com/blog/css3-checkboxes-radiobuttons</id>
    <content type="html"><![CDATA[<p><img src="https://lh5.googleusercontent.com/-AstthsAdcVk/UKX5J1b1PpI/AAAAAAAAB7U/UxqFI-iYi0g/s166/a.jpg" /></p>

<p>已經用膩原生的checkbox和radiobutton嗎？今天就試著用CSS3來做出不一樣的checkbox和radiobutton吧，而且是不用任何一行JavaScript，重點是，就算IE9以下不支援CSS3也沒關係喔！</p>

<!--more-->


<p>在開始之前，先認識一下什麼是 <a href="http://meyerweb.com/eric/articles/webrev/200007a.html" target="_blank">Adjacent-Sibling Selector</a>，這等下會用到，簡單的範例如下</p>

<p>HTML</p>

<pre><code>&lt;div&gt;
    &lt;span&gt;&lt;/span&gt;
    &lt;p&gt;apa&lt;/p&gt;
&lt;/div&gt;
</code></pre>

<p>CSS</p>

<pre><code>span + p{
    color:red;
}
</code></pre>

<p>可以看到這樣寫「apa」就會顯示紅色，「+」的用法就是等於選擇兄弟元素的意思</p>

<p>OK，那我們要怎麼做出不一樣的checkbox和radiobutton呢？先建立HTML部分吧</p>

<pre><code>&lt;input type="checkbox" /&gt;
&lt;label&gt;Check Box 1&lt;/label&gt;
</code></pre>

<p>會用label的原因是希望可以在點擊「Check Box 1」也可以選擇checkbox，讓<strong>可點擊的範圍</strong>更大，所以為了有這個效果，我們就需要用到label的屬性「for」</p>

<pre><code>&lt;input type="checkbox" id="c1" name="cc" /&gt;
&lt;label for="c1"&gt;Check Box 1&lt;/label&gt;
</code></pre>

<p>會看到for指定的id為input #c1</p>

<p>再來我們可以在label裡面放一個span，為的就是等下可以直接在span加上背景圖，當然你也可以不用span而直接在label放背景圖，不過這樣當調整位置的時候會比較不方便，所以跟放文字的label分開會比較好</p>

<pre><code>&lt;input type="checkbox" id="c1" name="cc" /&gt;
&lt;label for="c1"&gt;&lt;span&gt;&lt;/span&gt;Check Box 1&lt;/label&gt;
</code></pre>

<p>接著是CSS部分，首先為了替換掉原生的HTML樣式，我們先將原生的checkbox隱藏起來</p>

<pre><code>input[type="checkbox"] {
    display:none;
}
</code></pre>

<p>這邊要特別注意的是，雖然看不到checkbox，實際上他還是存在喔！一樣還是會有勾選效果，只是看不到而已，隱藏完以後，我們就要將背景圖設置到span裡面</p>

<pre><code>input[type="checkbox"] {
    display:none;
}
input[type="checkbox"] + label span {
    display:inline-block;
    width:19px;
    height:19px;
    background:url(check_radio_sheet.png) left top no-repeat;
}
</code></pre>

<p>有看到選擇器「input[type=&#8221;checkbox&#8221;] + label span」這樣的寫法嗎？這就是之前講的選擇兄弟元素</p>

<p>那圖的部分就可以用CSS Sprite的方式來呈現，把需要的小icon放在同一張圖，利用位移來顯示出想要的部分，將其它不要的部分隱藏0</p>

<p><img src="https://lh5.googleusercontent.com/-VSnKVuXA5k4/UKX5J-71RvI/AAAAAAAAB7Q/hDmvr5xxMjg/s76/check_radio_sheet.png" /></p>

<p>最後，剛剛那個是「尚未選取」的CSS狀態，這邊就把「選取後」的CSS狀態也一併加上吧，也就是CSS3的「:checked」</p>

<pre><code>input[type="checkbox"] {
    display:none;
}
input[type="checkbox"] + label span {
    display:inline-block;
    width:19px;
    height:19px;
    margin:-1px 4px 0 0;
    vertical-align:middle;
    background:url(check_radio_sheet.png) left top no-repeat;
    cursor:pointer;
}
input[type="checkbox"]:checked + label span {
    background:url(check_radio_sheet.png) -19px top no-repeat;
}
</code></pre>

<p>大功告成！很簡單吧？而且不用任何一行JavaScript</p>

<p>原理其實就是將原生的checkbox隱藏起來，再利用CSS的選擇器「:checked」來分辨checkbox目前的狀態(是否選取)，然後換掉相對應的span背景圖，如果不太懂的話，可以先暫時把「display:none」就會比較明瞭囉</p>

<h3>IE9以下不支援CSS3怎麼辦呢？</h3>

<p>不用擔心，這種做法有個好處就是向下兼容，就算沒有支援CSS3，頂多就是恢復到以前原生的樣式，並不會影響使用者喔！</p>

<p><img src="https://lh4.googleusercontent.com/-Uyji0CjOhRU/UKX61r2rp9I/AAAAAAAAB7g/2rQS4EpXUBI/s171/VASV.jpg" /></p>

<p>參考資料:</p>

<p><a href="http://webdesign.tutsplus.com/tutorials/htmlcss-tutorials/quick-tip-easy-css3-checkboxes-and-radio-buttons/" target="_blank">Quick Tip: Easy CSS3 Checkboxes and Radio Buttons</a></p>

<p><a href="http://www.w3.org/TR/CSS2/selector.html#adjacent-selectors" target="_blank">Selectors</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CSS] 用inline-block做產品展示頁並且擁有RWD效果]]></title>
    <link href="http://rx836.github.com/blog/inline-block-display-product-grid-view/"/>
    <updated>2012-11-14T14:09:00+08:00</updated>
    <id>http://rx836.github.com/blog/inline-block-display-product-grid-view</id>
    <content type="html"><![CDATA[<p><img src="https://lh6.googleusercontent.com/-CMJtAWKTc9c/UKNLl-e4eMI/AAAAAAAAB6c/lFZ01h2vX2k/s975/inline-block-screenshot-1.png" /></p>

<p>相信大家對於這樣的排版並不陌生，這是一個產品的展示頁，文章參考<a href="https://twitter.com/randyhoyt" target="_blank">Randy Hoyt</a>教你如何用inline-block來做設計排版，內容簡單易懂</p>

<!--more-->


<p>首先先來認識一下「inline」、「block」、「inline-block」</p>

<h3>display : inline</h3>

<p>像&lt;img&gt;、&lt;span&gt;、&lt;a&gt;預設的display屬性是inline，在網頁上呈現時並不會換行，且不能設定「width」、 「height」 、 「background-image」</p>

<h3>display : block</h3>

<p>像&lt;div&gt;、&lt;p&gt;、&lt;h1&gt;預設的display屬性是block，只要碰到這類元素不管前後都會換行，且預設寬度為最大，但可以設定「width」、 「height」 、 「background-image」等值</p>

<h3>display : inline-block</h3>

<p>從字面上可以很清楚的知道，可以同時擁有inline不會換行的特性，還可以像block一樣設定「width」、 「height」 、 「background-image」等值</p>

<p>OK，接下來在寫HTML之前先用小畫家做一張尺寸為200*300的圖當作產品圖</p>

<p><img src="https://lh4.googleusercontent.com/-_1vY5kEq_nY/UKNMlBPDb4I/AAAAAAAAB6w/0KCoHR7sGUU/s300/a.jpg" /></p>

<p>接著是HTML部分</p>

<pre><code>&lt;ul class="products"&gt;
    &lt;li&gt;
        &lt;a href="#"&gt;
            &lt;img src="a.jpg"&gt;
            &lt;h4&gt;內衣&lt;/h4&gt;
            &lt;p&gt;$200.00&lt;/p&gt;
        &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;a href="#"&gt;
            &lt;img src="a.jpg"&gt;
            &lt;h4&gt;冬天超級無敵霹靂保暖的阿爾卑斯山羊毛羽絨超薄大衣&lt;/h4&gt;
            &lt;p&gt;$2.00&lt;/p&gt;
        &lt;/a&gt;
    &lt;/li&gt;&lt;!-- more list items --&gt;
&lt;/ul&gt;
</code></pre>

<p>CSS部分</p>

<pre><code>ul.products li {
    width: 200px;
    display: inline-block;
}
</code></pre>

<p>呈現如下</p>

<p><img src="https://lh3.googleusercontent.com/-9nRQw7JS9cU/UKNLk9c2M2I/AAAAAAAAB6I/duH5hR67EQI/s530/c1.jpg" /></p>

<p>會發現好像有點不太對齊，可以使用「vertical-align」CSS屬性</p>

<pre><code>ul.products li {
    width: 200px;
    display: inline-block;
    vertical-align: top;
}
</code></pre>

<p><img src="https://lh5.googleusercontent.com/-ak-BlgPF5_o/UKNLk16TvvI/AAAAAAAAB6M/LvJzebhF70o/s533/c2.jpg" /></p>

<p>這樣就可以垂直靠上，不過這裡有個問題，會發現明明我沒設定margin或是padding的屬性，為啥中間會有留白，難道有預設值？其實不是，是因為剛剛在HTML的部分中間留白的關係，也就是說如果在HTML碼部分，在兩個inline-block元素之間有空白的話，會被<strong>顯示出來</strong>，所以為了避免這樣的情形發生，可以改成這樣</p>

<pre><code>&lt;ul class="products"&gt;
    &lt;li&gt;
        &lt;a href="#"&gt;
            &lt;img src="a.jpg"&gt;
            &lt;h4&gt;內衣&lt;/h4&gt;
            &lt;p&gt;$200.00&lt;/p&gt;
        &lt;/a&gt;
    &lt;/li&gt;&lt;li&gt;
        &lt;a href="#"&gt;
            &lt;img src="a.jpg"&gt;
            &lt;h4&gt;冬天超級無敵霹靂保暖的阿爾卑斯山羊毛羽絨超薄大衣&lt;/h4&gt;
            &lt;p&gt;$2.00&lt;/p&gt;
        &lt;/a&gt;
    &lt;/li&gt;&lt;!-- more list items --&gt;
&lt;/ul&gt;
</code></pre>

<p>呈現如下</p>

<p><img src="https://lh3.googleusercontent.com/-A1Un01aXcu4/UKNLlJcCU-I/AAAAAAAAB6Q/hwInTSC84nw/s535/c3.jpg" /></p>

<h2>Responsive</h2>

<p>這樣的寫法還有個好處，就是他擁有最近很火紅的RWD(Responsive Web Design)效果，會依照畫面尺寸大小進行換行</p>

<p><img src="https://lh5.googleusercontent.com/-sUEPvofcsWQ/UKNLl8K_OSI/AAAAAAAAB6g/82TRXLL6RyA/s845/c4.jpg" /></p>

<p>但世界並不會這麼完美&#8230;，每件事情總是會有缺點，這種寫法在大部分的瀏覽器上都可以執行，但IE6和IE7上面會有一些問題，所以如果想要支援較舊的瀏覽器，可以用Hack來解決</p>

<pre><code>ul.products li {
    width: 200px;
    display: inline-block;
    vertical-align: top;
    *display: inline;
    *zoom: 1;
}
</code></pre>

<p>文章裡面還有提到為什麼不用Float來排版，作者說當高度一致的時候用Float是沒有問題，可是當每個項目高度不一樣的時候，就會出現<strong>重疊</strong>的狀況發生</p>

<p>參考資料:</p>

<p><a href="http://blog.teamtreehouse.com/using-inline-block-to-display-a-product-grid-view" target="_blank">Using inline-block to Display a Product Grid View</a></p>

<p><a href="http://blog.xuite.net/vexed/tech/29221717-CSS+%E5%B1%AC%E6%80%A7+display+%E7%9A%84%E5%80%BC+inline+block+inline-block+none" target="_blank">CSS 屬性 display 的值 inline block inline-block none</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PhoneGap] Android開發Facebook取得Key Hashes]]></title>
    <link href="http://rx836.github.com/blog/android-facebook-key-hashes/"/>
    <updated>2012-11-12T11:38:00+08:00</updated>
    <id>http://rx836.github.com/blog/android-facebook-key-hashes</id>
    <content type="html"><![CDATA[<p>之前曾經有寫過一篇關於Facebook web App開發的<a href="http://blog.rx836.tw/blog/facebook-app-create-getfbid/" target="_blank">心得文章</a>，但如果是用PhoneGap來開發Facebook App呢？我想很多人第一個遇到的問題就是，我在Facebook開發者設定是註冊web還是Android？</p>

<!--more-->


<p>一開始我也為這個問題困擾一陣子，但後來仔細想想PhoneGap的原理，在看看Facebook 開者人員的設定，答案就呼之欲出</p>

<p><img src="https://lh4.googleusercontent.com/-Us90e1j38QY/UKCWPyT6CtI/AAAAAAAAB5k/XDg4FiqkaYo/s831/a2.jpg" /></p>

<p>可以看到不管是Website with Facebook Login還是App on Facebook都要輸入網址部分，可是手機的APP沒有網址這部分(我的認知.. 有錯煩請指正)，而且PhoneGap最後還是用手機App包裝起來，所以說到底，他骨子裡還是個手機App</p>

<p>不過這就讓我第一次接觸到Android開發的人撞到牆了，因為我根本就不知道什麼是「Key Hashes」，也不知道應該怎麼取得這個值，所以就上網做了一些功課，整理出一些心得給大家做參考</p>

<p>Key Hashes最主要就是讓Facebook分辨你的App是不是當初設定的那支App，要符合才能對Facebook API進行存取，產生Key Hashes方法如下</p>

<p>1.首先下載<a href="http://sourceforge.net/projects/gnuwin32/files/openssl/0.9.8h-1/openssl-0.9.8h-1-bin.zip/download?use_mirror=nchc" target="_blank">OpenSSL</a></p>

<p>2.將openssl.exe這個檔案放到C:\Program Files\Java\jre6\bin這個資料夾裡面</p>

<p>3.用<strong>系統管理員身分</strong>將cmd.exe打開，並且開始製作「keystore」，語法如下</p>

<pre><code>keytool -genkey -v -keystore apa.keystore -alias apa -keyalg RSA -keysize 2048 -validity 10000
</code></pre>

<p>請注意，程式碼中「apa.keystore」和「apa」是自取的名稱，你也可以叫做「abc.keystore」和「abc」</p>

<p>每個指令的名稱意思分別為:</p>

<p>-keystore：名稱</p>

<p>-alias：別名</p>

<p>-keyalg：演算法</p>

<p>-validity：有效天數</p>

<p><img src="https://lh5.googleusercontent.com/-DHMUBhM3hrI/UKCWP5a59pI/AAAAAAAAB5g/SKPFMSolbjI/s679/a3.jpg" /></p>

<p>4.產生「keystore」以後，開始取得Hash Key，語法如下</p>

<pre><code>keytool -exportcert -alias apa -keystore apa.keystore | openssl sha1 -binary | openssl base64
</code></pre>

<p>一樣注意-alias和-keystore的名稱是剛剛自己取的名稱</p>

<p>最後就會看到類似以下的代碼在視窗上顯示出來</p>

<pre><code>P1suAlHZ3f8RkLibv4MnnI3z2fg=
</code></pre>

<p>這樣代表你已經成功取得Hash Key囉，將這組Key貼到Facebook開發者人員設定App的地方，大功告成！</p>

<p>參考資料:</p>

<p><a href="http://wazai.net/1921/android%E4%BD%BF%E7%94%A8facebook-sdk%E7%94%B3%E8%AB%8B%E7%AF%87" target="_blank">Android使用Facebook SDK(申請篇)</a></p>

<p><a href="http://wangshifuola.blogspot.tw/2011/06/androidfacebook-sdkpart1.html" target="_blank">Android學習_使用facebook sdk_Part1準備</a></p>

<p><a href="http://wangshifuola.blogspot.tw/2011/06/androidgoogle-map-api-key.html" target="_blank">Android學習_如何申請Google Map API Key(實機用)</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PhoneGap] 如何搭配平板或手機開發Android]]></title>
    <link href="http://rx836.github.com/blog/android-phonegap-usb-develop/"/>
    <updated>2012-11-09T14:32:00+08:00</updated>
    <id>http://rx836.github.com/blog/android-phonegap-usb-develop</id>
    <content type="html"><![CDATA[<p>繼好幾天前開始了<a href="http://blog.rx836.tw/blog/phonegap-first/" target="_blank">第一次的PhoneGap之旅</a>，漸漸的開始慢慢熟悉運作模式，有一直寫下去果然還是有差，當然一路上也一直碰到牆壁和踩到地雷(渾身傷..)，這篇就來記錄怎麼用實機做開發測試，往後也會多寫幾篇關於PhoneGap開發心得文章出來奉獻</p>

<!--more-->


<p>雖然之前的文章有提到Android模擬器，但其實每次要把Android模擬器啟動起來還是很不方便，因為總是要等一段時間</p>

<p><img src="https://lh6.googleusercontent.com/-mBxqTZDV0AI/UJy7d2-dqXI/AAAAAAAAB4Y/hRTlohLYjm4/s630/a1.jpg" /></p>

<p>但如果手邊有Android實機的話(不管是平板還是手機)，都可以用下面的方法來做開發測試(可能會因為改版關係略有不同)</p>

<h3>1.找找之前下載的Android SDK</h3>

<p>相信之前在開發Android的時候，會先下載Android SDK，找找那個SDK，裡面的資料會長的像這樣</p>

<p><img src="https://lh5.googleusercontent.com/-ny6p8foNJJQ/UJy7dTQ4C5I/AAAAAAAAB4Q/1rL70M7D2-Y/s232/a2.jpg" /></p>

<h3>2.開啟Eclipse</h3>

<p>找到Android SDK以後，打開Eclipse，選擇「Window」->「Android SDK Manager」</p>

<p><img src="https://lh3.googleusercontent.com/-F24YqktQKuE/UJy7d6jaMCI/AAAAAAAAB4c/5UL63BEf9Zs/s601/a3.jpg" /></p>

<h3>3.安裝「Google USB Driver」</h3>

<p>拉到下面的「Extras」底下有個「Google USB Driver」，勾選並且點選右下角的「install packages&#8230;」，注意，因為我是已經安裝過所以才會變淺色，還沒安裝可以進行點選安裝</p>

<p><img src="https://lh4.googleusercontent.com/-7zkUd652OBw/UJy7eZ6Q1cI/AAAAAAAAB4g/WcSKd8rR0sc/s703/a4.jpg" /></p>

<h3>4.開啟設備上的USB測試功能</h3>

<p>安裝好後接著關閉Eclipse，在來這個步驟，會因為每個人設備不同而稍微有異，舉Nexus 7為例，在「設定」->「開發人員選項」，進去後點右上角的開啟，還有把「USB偵錯模式」勾選起來，其他設備大同小異，接著用USB跟電腦接上，這時電腦會出現安裝驅動程式，先不用管他</p>

<h3>5.安裝你的硬體驅動程式</h3>

<p>接上USB後打開「控制台」->「系統及安全性」->「系統」->「裝置管理員」，會看到可攜式裝置那邊，會有你的設備名稱，並且顯示驚嘆號，在設備上點選右鍵，選擇「更新驅動程式軟體」，接著選擇「瀏覽電腦上的驅動程式軟體」，還記得剛剛安裝的Google USB Driver嗎？位置沒變動會在 Android SDK\extras\google\usb_driver，接著電腦就會自動安裝設備囉~</p>

<h3>6.令人期待的一刻！</h3>

<p>來到最後一個步驟囉，打開Eclipse，編輯AndroidManifest.xml，將以下程式加入到＜application＞這個Tag裡面</p>

<pre><code>android:debuggable="true"
</code></pre>

<p>接著在上面的選單列選擇「Run」->「Run Configurations」，做一些簡單的設定，選擇頁籤「Target」並且點選「Always prompt to pick device」，最主要是因為這樣每次在Run的時候都可以先選擇設備</p>

<p><img src="https://lh5.googleusercontent.com/-I0yrNYdm1RY/UJy7e8giz5I/AAAAAAAAB40/Hdkv8Ncs-2s/s702/a5.jpg" /></p>

<p>設定好後，點選「Run As」->「Android Application」，如果點選Run As沒有出現Android Application代表你沒有選到專案(看左邊那個紅框)，這也是我一直撞牆的地方&#8230;</p>

<p><img src="https://lh3.googleusercontent.com/-nG-rVob0H0k/UJy7fECMaCI/AAAAAAAAB4w/q1Yp2Is_jQg/s1027/a6.jpg" /></p>

<p>看到你的設備了嗎？別懷疑！直接點選OK開啟吧！</p>

<p><img src="https://lh5.googleusercontent.com/-gHQrLAMHp_0/UJy7ff6GWmI/AAAAAAAAB4s/ZKxtK4zOfLI/s708/a7.jpg" /></p>

<p>有看到你的手機上顯示畫面出來了嗎？！</p>

<p>有的話就恭喜你！成功囉~，一起加入開發Android吧！</p>

<p>假如不幸失敗的話&#8230;，請歡迎留言給我，一起討論(因為你的問題也可能是我的問題..)</p>

<p>參考資料:</p>

<p><a href="http://developer.android.com/sdk/win-usb.html#WinUsbDriver" target="_blank">Google USB Driver</a></p>

<p><a href="http://www.ibm.com/developerworks/cn/web/wa-mobappdev1/index.html" target="_blank">第 1 部分: Android 上的 PhoneGap 和 Dojo Mobile</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CSS] Data URI使用心得筆記]]></title>
    <link href="http://rx836.github.com/blog/data-uri-web-desing/"/>
    <updated>2012-11-07T16:02:00+08:00</updated>
    <id>http://rx836.github.com/blog/data-uri-web-desing</id>
    <content type="html"><![CDATA[<p>Data URI不算新的技術，但他卻是一個可以節省頻寬，增進網頁載入效率的技巧，今天就來實際記錄一下使用的方式，順便比較一下用src指向URL的差別</p>

<!--more-->


<p>Data URI是直接在網頁崁入一段Base64編碼，目前IE8+,Firefox, Safari, Opera, Chrome都能正確顯示圖檔和css設定，以下是Base64編碼崁入在網頁的樣子</p>

<pre><code>&lt;img src="data:image/png;base64,&lt;base64 data goes here&gt;" /&gt;
</code></pre>

<p>HTML碼中＜base64 data goes here＞就是擺放那一長串的文字編碼，現在就來實際操作一下如何使用</p>

<p>首先你必須要準備一張圖檔，如果不想找可以直接到<a href="http://subtlepatterns.com/" target="_blank">Subtle Patterns</a>下載</p>

<p>接著到<a href="http://www.websemantics.co.uk/online_tools/image_to_data_uri_convertor/" target="_blank">websemantics</a>，點選BROWSE選取要轉換成Base64編碼的圖片，按下CONVERT IMAGE</p>

<p><img src="https://lh4.googleusercontent.com/-PmeBE4o7p7s/UJooOcgjcaI/AAAAAAAAB3o/qgNMNlvaSPA/s476/a.jpg" /></p>

<p>之後將網頁拉到最下方，會看到轉換出來的Base64編碼和CSS</p>

<p><img src="https://lh6.googleusercontent.com/-UTJUZpoyHE4/UJooOR2uuQI/AAAAAAAAB3Y/jqioWsQHsw0/s651/b.jpg" /></p>

<p>接著直接將css複製到網頁上，並且增加另外一段css用src做比較</p>

<pre><code>    div.logo-data  {
        width: 198px;
        height: 200px;
        background-repeat: no-repeat;
        background-image: url(data:image/png;base64,&lt;base64 data goes here&gt;);
    }   
    div.logo-img{
        width: 198px;
        height: 200px;
        background-repeat: no-repeat;
        background-image: url(nasty_fabric.png);            
    }
</code></pre>

<p>注意，＜base64 data goes here＞是要放Base64編碼，但因為實在太長了(這也是等下會提到的缺點之一)，所以我這邊用＜base64 data goes here＞代替</p>

<p>再來是HTML部分，我們先看用src直接指向URL的結果</p>

<pre><code>&lt;div class="logo-img"&gt;
&lt;/div&gt;
</code></pre>

<p>打開Firebug，看看讀取這個網頁會載入些什麼</p>

<p><img src="https://lh4.googleusercontent.com/-0vnZZFDEAb4/UJooOTvo1eI/AAAAAAAAB3c/k8REjQueAvI/s891/c.jpg" /></p>

<p>會看到載入了一個網頁和一個png圖檔，共70kB</p>

<p>接著用Data URI來看看</p>

<pre><code>&lt;div class="logo-data"&gt;
&lt;/div&gt;
</code></pre>

<p><img src="https://lh6.googleusercontent.com/-4uQB0YLPq7U/UJooPPLWN0I/AAAAAAAAB3k/74hpcikj_O0/s894/d.jpg" /></p>

<p>一樣的圖片呈現效果，這裡只載入一個網頁，圖片呢？圖片就如剛剛所說的，用base64編碼方式崁入在網頁裡面，所以網頁稍微大了一點點(因為那一長串的字串關係)，但卻可以減少一個HTTP Request</p>

<p>所以使用Data URI的好處就是不用下載圖檔，也不用占用到HTTP Request</p>

<p>但缺點就是除了一開始提到的IE8以上才支援以外，還有因為是崁入到網頁當中，所以如果是動態網頁內容會變化的話，就無法享受到快取的好處，而且整個HTML和css會看起來比較凌亂(一堆編碼)，再加上工作流程上也必須先將圖片處理過後，才能使用，會增加製作的時間</p>

<h3>總結:</h3>

<p>假如你放棄了IE8以下的瀏覽器，或許可以在一些背景圖和一些小icon做一些Data URI的處理，畢竟減少一些頻寬和HTTP Request也對$$也是不無小補:)</p>

<p>參考資料:</p>

<p><a href="http://webdesign.tutsplus.com/tutorials/htmlcss-tutorials/the-what-why-and-how-of-data-uris-in-web-design/" target="_blank">The What, Why and How of Data URIs in Web Design</a></p>

<p><a href="http://blog.darkthread.net/post-2010-11-05-data-uri.aspx" target="_blank">淺嚐Data URI</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[jQuery] 不要將任何事情都在jQuery.ready()初始化]]></title>
    <link href="http://rx836.github.com/blog/jquery-not-initialize-all-things/"/>
    <updated>2012-11-06T15:06:00+08:00</updated>
    <id>http://rx836.github.com/blog/jquery-not-initialize-all-things</id>
    <content type="html"><![CDATA[<p>Don&#8217;t Initialize All the Thing in jQuery.ready()&#8230;，這是由<a href="https://twitter.com/elijahmanor" target="_blank">Elijah Manor</a>所寫的一篇文章，裡面提到不要把所有事情都放在jQuery.ready()做初始化(我就是這樣&#8230;)，現在就來筆記一下他怎麼說</p>

<!--more-->


<p>寫過jQuery的開發者都知道，在撰寫jQuery都會用jQuery.ready()包起來，在載入網頁時都會先等DOM載入完畢，才會執行裡面的程式碼部分，不過這有時候會讓User在進入網頁時等待過久，失去耐心，如何讓網頁在最短的時間先有畫面出來，也會影響到User使用上的經驗</p>

<p>先看HTML的部分</p>

<pre><code>&lt;form class="form-horizontal well"&gt;
    &lt;fieldset&gt;
        &lt;div class="control-group"&gt;
            &lt;label class="control-label" for="firstName"&gt;First Name&lt;/label&gt;
            &lt;div class="controls"&gt;
                &lt;input id="firstName" type="text" class="input-xlarge"&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;!-- More HTML... --&gt;
        &lt;div class="control-group"&gt;
            &lt;label class="control-label" for="birthday"&gt;Birthday&lt;/label&gt;
            &lt;div class="controls"&gt;
                &lt;input id="birthday" type="text" class="date input-xlarge"&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="form-actions"&gt;
            &lt;button type="submit" class="btn btn-primary"&gt;Save changes&lt;/button&gt;
            &lt;button class="btn"&gt;Cancel&lt;/button&gt;
        &lt;/div&gt;
    &lt;/fieldset&gt;
&lt;/form&gt;
</code></pre>

<p>這是一個很常見的表格，會填寫一些基本資料，不過為了讓User在填寫日期方便，會用「datapicker」這個jQuery UI widget來選擇日期</p>

<p><img src="https://lh5.googleusercontent.com/-mb7pEbTw_FI/UJjDYpdh3oI/AAAAAAAAB28/ZQDyzYWd5K0/s296/123.jpg" /></p>

<p>jQuery程式碼部分</p>

<pre><code>$( document ).ready( function() {

    $( "input.date" ).datepicker({
        minDate: moment().subtract( "months", 1 ).toDate(),
        maxDate: moment().add( "months", 1 ).toDate(),
        dateFormat: "d M, y",
        constrainInput: true,
        beforeShowDay: $.datepicker.noWeekends
    });

});
</code></pre>

<p>用這樣方式的優點是，當用戶選擇日期的時候，jQuery已經準備好並且很快的產生互動，但缺點是:</p>

<p>1.程式碼必須等到DOM載完才能執行</p>

<p>2.沒有使用context，選取器會在整個網頁進行搜尋，降低效能</p>

<p>3.雖然程式碼在初始化的時候就都載入完畢，但不確定是不是真的會用到</p>

<p>所以，為了改善這個情況，我們可以在需要的時候，在執行datapicker</p>

<pre><code>$( document ).on( "focus", "input.date:not(.hasDatepicker)", function() {
    toastr.info( "Initializing " + this.id );

    $( this ).datepicker({
        minDate: moment().subtract( "months", 1 ).toDate(),
        maxDate: moment().add( "months", 1 ).toDate(),
        dateFormat: "d M, y",
        constrainInput: true,
        beforeShowDay: $.datepicker.noWeekends
    });
});
</code></pre>

<p>可以看到在「input.date」上我們監聽了一個事件「focus」，當這個元素並選取時，就會執行裡面的datapicker的UI程式，也就是說，當User要輸入日期時，才會執行這段程式碼，而不用再一開始就將程式碼執行起來</p>

<p>這將會讓我們的網頁不會在這麼的笨重，顯得緩慢，讓我又多學習了一招:)</p>

<p>參考資料:</p>

<p><a href="http://www.elijahmanor.com/2012/10/dont-initialize-all-things-in.html" target="_blank">Don&#8217;t Initialize All the Things in jQuery.ready() </a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[jQ-Plugin] 倒數計時的plugin介紹]]></title>
    <link href="http://rx836.github.com/blog/jquery-countdown-plugins/"/>
    <updated>2012-11-05T11:45:00+08:00</updated>
    <id>http://rx836.github.com/blog/jquery-countdown-plugins</id>
    <content type="html"><![CDATA[<p>之前做活動網站常常會使用到「倒數計時」這項功能，因為其實蠻好寫的，所以都是用jQuery手刻比較多，但今天看到一篇文章是收集有關於jQuery Countdown Plugins，看了一下發現有些功能蠻齊全的，就記錄在這裡，供日後參考</p>

<!--more-->


<h3>jQuery Countdown Script</h3>

<p><img src="https://lh5.googleusercontent.com/-q5CkXGDfwAo/UJc_Gp1lgEI/AAAAAAAAB2E/gjITVcyHIes/s480/lwt_post1.jpg" /></p>

<p>plugin簡單好設定，還可以在同一個頁面設定好幾個不同的倒數計時，甚至是啟動和暫停</p>

<p><a href="http://www.littlewebthings.com/2010/02/jquery-countdown-script/" target="_blank">範例Demo</a></p>

<h3>Countdown</h3>

<p><img src="https://lh6.googleusercontent.com/-pmIMh95RX54/UJc_Ga3R2dI/AAAAAAAAB2I/TR6Dtq4DHYw/s480/jquery-countdown.gif" /></p>

<p>擁有許多進階的設定，支援時區，多種語言等</p>

<p><a href="http://keith-wood.name/countdown.html" target="_blank">範例Demo</a></p>

<h3>The Final Countdown</h3>

<p><img src="https://lh4.googleusercontent.com/-q5WsQiLTJv4/UJc_FlYN8YI/AAAAAAAAB14/eR6HQ1RxIMo/s403/a1.jpg" /></p>

<p>多種呈現方式，可以隨自己喜歡去做調整，倒數計時的部分甚至連毫秒都可以呈現</p>

<p><a href="https://github.com/hilios/jquery.countdown" target="_blank">範例Demo</a></p>

<h3>KK Countdown</h3>

<p><img src="https://lh6.googleusercontent.com/-MKQU1yoPcpA/UJc_Fn8CqaI/AAAAAAAAB2A/AZs0VgXkuco/s600/2.jpg" /></p>

<p>一樣有多種呈現方式，用時間戳記來給予時間</p>

<p><a href="http://krzysztof-furtak.pl/2010/05/kk-countdown-jquery-plugin/" target="_blank">範例Demo</a></p>

<h3>jQuery Countdown</h3>

<p><img src="https://lh5.googleusercontent.com/-uIiwnxje1y0/UJdAu1w52KI/AAAAAAAAB2g/-ZVyh0o40DA/s520/3.jpg" /></p>

<p>利用圖片來呈現，沒有太多功能可以設定，比較簡單的plugin</p>

<p><a href="http://code.google.com/p/jquery-countdown/" target="_blank">範例Demo</a></p>

<h3>jQuery Countdown Timer</h3>

<p><img src="https://lh5.googleusercontent.com/-fmAgRmTcc40/UJc_FilzH0I/AAAAAAAAB18/qyyvqbxCZfU/s620/jquery-countdown-timer.jpg" /></p>

<p>裡面有相當詳細的教學文，教你怎麼使用他們的plugin</p>

<p><a href="http://tutorialzine.com/2011/12/countdown-jquery/" target="_blank">範例Demo</a></p>

<p>倒數計時自己寫並不難，不過有些很特別的功能或是效果用plugin，倒也可以省下不少時間，所以要用plugin或是自己手刻就看各位開發者自己當下的狀況做選擇:)</p>

<p>參考資料:</p>

<p><a href="http://www.webresourcesdepot.com/jquery-countdown-plugins-for-coming-soon-pages/" target="_blank"></a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[JavaScript] prototype與建構函式和物件]]></title>
    <link href="http://rx836.github.com/blog/javascript-prototype/"/>
    <updated>2012-11-02T15:11:00+08:00</updated>
    <id>http://rx836.github.com/blog/javascript-prototype</id>
    <content type="html"><![CDATA[<p>今年開始陸陸續續的開始參加一些讀書會，其中有一本是關於HTML5，裡面有些章節是談到JavaScript，剛好我導讀其中一章講關於自定物件方面，那就趁著這個機會再把JavaScript的觀念整理清楚，增強自己的功力，尤其是一直很模糊的「prototype」</p>

<!--more-->


<p>在講prototype之前，要先複習一下之前所寫的 <a href="http://blog.rx836.tw/blog/javascript-patterns-1/" target="_blank">[JavaScript] 談物件, 實字與建構式</a> 和 <a href="http://blog.rx836.tw/blog/javascript-custom-function/" target="_blank">[JavaScript] 建立物件的第三招-自訂建構式函式</a>，這兩篇文章有提到物件和建構式函式(constructor functions)，但其實還有一個叫做prototype也跟他們兩個糾纏不清，形成特殊的三角關係(誤)</p>

<p>首先我們先來看物件</p>

<pre><code>var obj={
    name : '阿帕',
    run : function(){
        //跑跑跑
    }
}

console.log(obj.name);
//阿帕
obj.run();
//執行裡面的跑跑跑
</code></pre>

<p>OK，相信大家對上面這個物件不陌生，但除了以上建立物件的方法，還可以用建構式函式</p>

<pre><code>function Obj(){
    this.name = '阿帕';
    this.run = function(){
        //跑跑跑
    }
}

var _obj = new Obj();
console.log(_obj.name);
//阿帕
_obj.run();
//執行裡面的跑跑跑
</code></pre>

<p>所以我們可以說，JavaScript利用<strong>建構式實例出一個物件</strong>，那跟prtotype有甚麼關係呢？</p>

<p>其實在建構式函式裡面有個屬性叫做prototype，他就是建構式函式的「原型物件」</p>

<pre><code>function Obj(){
    this.name = '阿帕';
    this.run = function(){
        //跑跑跑
    }
}

console.log(Obj.prototype);
//Obj {} 這也是一個物件，叫原型物件
</code></pre>

<p>這個原型物件可以做什麼呢？假如我今天用Obj()這個建構式函式實例了a、b、c三個物件，完成以後我還要每個都再加一個屬性height怎麼辦？你可能會這樣寫</p>

<pre><code>function Obj(){
    this.name = '阿帕';
    this.run = function(){
        //跑跑跑
    }
}

var a = new Obj();
var b = new Obj();
var c = new Obj();

//為每個物件增加屬性
a.height= 15;
b.height= 15;
c.height= 15;
</code></pre>

<p>但其實你可以這樣寫</p>

<pre><code>function Obj(){
    this.name = '阿帕';
    this.run = function(){
        //跑跑跑
    }
}

var a = new Obj();    
Obj.prototype.height = 15;
var b = new Obj();    
var c = new Obj();    


console.log(a.height);
console.log(b.height);
console.log(c.height);
</code></pre>

<p>有發現我只要給建構函式Obj的prototype屬性，從Obj實例出來的物件都有相同的屬性，而且不管是先實例出來的a還是後面實例出來的b、c都一樣擁有</p>

<p>為什麼在原型物件Obj.prototype裡面增加屬性，會影響到從Obj建構式裡面實例出來的物件呢？</p>

<p>原來是因為建構函式Obj的屬性prototype是原型物件Obj.prototype，但Obj.prototype裡面也有一個屬性叫做constructor又指回建構函式Obj，所以當Obj.prototype增加屬性的時候，就會連帶增加從建構式函式Obj實例出來的物件</p>

<pre><code>Obj === Obj.prototype.constructor
</code></pre>

<p>不知道這樣說明，大家清楚嗎:)</p>

<p>參考資料:</p>

<p>自已</p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[學習筆記] 免費玩Amazon Web Service(AWS) EC2]]></title>
    <link href="http://rx836.github.com/blog/first-amazon-web-services/"/>
    <updated>2012-10-30T11:25:00+08:00</updated>
    <id>http://rx836.github.com/blog/first-amazon-web-services</id>
    <content type="html"><![CDATA[<p>Amazon Web Service(AWS)從2006年開始就提供一些雲端服務，但我也是直到近期才開始真正的使用雲端帶來的方便，使用方式說起來也蠻簡單的，不過其實有很多細節與設定還要再多摸索，這次就先筆記怎麼開始使用AWS的EC2服務</p>

<!--more-->


<p>先來簡單介紹一下什麼是EC2(Elastic ComputeCloud，彈性雲端運算)，其實他就是一台虛擬主機，只要你會架站技術，就可以用遠端連線的方式，選擇安裝Linux或Windows Server 2008，不想使用的話也可以在後台直接關機或刪除虛擬主機，而且AWS最讓人著迷的就是使用多少才算多少錢，如果這個月服務想停止，那這個月就不會跟你算錢！這麼好的服務要怎麼申請呢？直接來看下面步驟</p>

<p>首先到<a href="http://aws.amazon.com/" target="_blank">AWS</a>首頁，選擇Sign up now</p>

<p><img src="https://lh4.googleusercontent.com/-xqNCJQspknM/UI-FGSVVMGI/AAAAAAAABxo/HnD7qU0Zmvc/s1038/2012-10-30_114058.jpg" /></p>

<p>假如沒有Amazon的帳號，必須選擇 <strong> I am a new user</strong> ，然後進行申請的步驟，如果已經擁有帳號，就直接選擇 <strong>I am a returning userand my password is</strong> ，並且輸入密碼，注意要使用AWS的服務必須要有信用卡，因為當你超過免費的使用上限才能直接收錢(無誤)</p>

<p><img src="https://lh5.googleusercontent.com/-HyaQ3OppxQQ/UI-FGY4NJXI/AAAAAAAABxs/RWZ0aOeO_AQ/s915/2012-10-30_113758.jpg" /></p>

<p>申請帳號的過程都是填一些基本資料，和進行一些驗證，過程中就不多加說明了</p>

<p>OK，進來以後你就會看到這個畫面</p>

<p><img src="https://lh3.googleusercontent.com/-HewOX42mZ4k/UI-FHoeHdXI/AAAAAAAABx4/3jnReVoz0ZM/s916/2012-10-30_115202.jpg" /></p>

<p>恩&#8230;琳瑯滿目的英文選項，但沒關係，我們只要挑選我們要的去了解，選擇左邊的 <strong>AWS Management Console</strong></p>

<p><img src="https://lh6.googleusercontent.com/-xDKUaMI1kp0/UI-FLs8jlSI/AAAAAAAAByE/hONoGXerkO0/s885/2012-10-30_115611.jpg" /></p>

<p>接著按下 <strong>Sign in to the AWS Console</strong></p>

<p><img src="https://lh3.googleusercontent.com/-ePuWgaQtyIs/UI-FL3IykXI/AAAAAAAAByM/Unm4rUDg308/s938/2012-10-30_115843.jpg" /></p>

<p>挑選 <strong>EC2</strong></p>

<p><img src="https://lh5.googleusercontent.com/-VlYPIrLzYgk/UI-FLlQrk7I/AAAAAAAAByA/Dhh-5voV3d0/s1137/2012-10-30_120015.jpg" /></p>

<p>這裡要注意的一點是，右上角在名稱的右邊，可以選擇主機的所在位置，鄉民是推薦日本，但如果你想架在別的地方也可以</p>

<p><img src="https://lh3.googleusercontent.com/-L4HVl_bkCg0/UI-F7rDExDI/AAAAAAAAB0g/0Wi1AEjKEas/s344/2012-10-30_154605.jpg" /></p>

<p>接著點選 <strong>Launch Instance</strong></p>

<p><img src="https://lh5.googleusercontent.com/-F0dPwprEHwk/UI-FP_x-OvI/AAAAAAAAByY/9kTJDlGQ_jk/s1223/2012-10-30_144418.jpg" /></p>

<p>選擇 <strong>Classic Wizard</strong>，接著按下 <strong>Continue</strong></p>

<p><img src="https://lh5.googleusercontent.com/-k0dIMHJwYMc/UI-FQ320qmI/AAAAAAAAByg/sLJFd9FLEl0/s1223/2012-10-30_144558.jpg" /></p>

<p>如果要用free的話，記得要挑選 <strong>Root Device Size</strong> 在10G以內的服務，這裡我們選擇的是 <strong>Ubuntu Server 11.10</strong>，之後按下Select</p>

<p><img src="https://lh5.googleusercontent.com/-wmx8zWDjMBU/UI-FQzGdbkI/AAAAAAAAByk/903ECWkyYVc/s1082/2012-10-30_144823.jpg" /></p>

<p>選完要的系統以後，這邊會看到有個選項 <strong>Number of Instances</strong> 代表的是你要建立的主機數量，因為免費的計畫每個月只有提供750小時，所以如果是開兩台的話，則是兩台的時數相加計算，這裡我們建立一台即可</p>

<p>另外因為是免付費，所以能選擇的 <strong>Instance Type</strong> 只有 <strong>Micro(t1.micro, 613Mib)</strong>，其他都要花錢</p>

<p><img src="https://lh5.googleusercontent.com/-8EtQOn5sYIU/UI-FUrXpQZI/AAAAAAAAByw/JU14oyBEQTg/s923/2012-10-30_145517.jpg" /></p>

<p>再來 <strong>INSTANCE DETAILS</strong> 都用預設</p>

<p><img src="https://lh5.googleusercontent.com/-wdMLzfYkYYs/UI-FUntOkpI/AAAAAAAABy0/0i_6vntxIXQ/s928/2012-10-30_145536.jpg" /></p>

<p>設定主機的標籤，在 <strong>Value</strong> 打上你取的名字即可</p>

<p><img src="https://lh4.googleusercontent.com/-MbOIYyJvqEc/UI-FU4x1toI/AAAAAAAABy4/0J1YjC84FAE/s925/2012-10-30_145722.jpg" /></p>

<p>接下來這個步驟相當相當的重要，因為要建立等下登入的金鑰，自訂一個名稱，按下 <strong>Create &amp; Download you key Pair</strong> ，就會下載一個金鑰檔(*.pem)，請妥善保管這個檔案，有這個檔案等下你才能透過SSH登入EC2主機</p>

<p><img src="https://lh6.googleusercontent.com/-1cB05WAXDTc/UI-FWrGmNII/AAAAAAAABzI/3SldjtxLwH8/s925/2012-10-30_145856.jpg" /></p>

<p>防火牆群組沒有特別需求就選擇預設 <strong>quick-start-1</strong></p>

<p><img src="https://lh5.googleusercontent.com/-m-sDdpaLk88/UI-HR5UGR7I/AAAAAAAAB0o/HmQm9N64pqU/s873/2012-10-30_155203.jpg" /></p>

<p>列出一個結果清單，沒問題就按下Launch</p>

<p><img src="https://lh5.googleusercontent.com/-ERYFFX--ARs/UI-FXp1zUYI/AAAAAAAABzY/9tcXui8NhvY/s914/2012-10-30_150423.jpg" /></p>

<p>回到AWS後台，點選左邊的Instance，你會看到主機的狀態</p>

<p><img src="https://lh4.googleusercontent.com/-4tlmBtCA4XQ/UI-FYCQUe0I/AAAAAAAABzg/BzOz1XOpx8Y/s873/2012-10-30_150714.jpg" /></p>

<p>底下有個Public DNS，稍後建立連線時會用到Public DNS</p>

<p><img src="https://lh5.googleusercontent.com/-Q7z3TcmKTvw/UI-FZXjHSTI/AAAAAAAABzo/WC8BPmzR13A/s1222/2012-10-30_151020.jpg" /></p>

<p>接下來就要開始連到我們的EC2虛擬機器，必須透過SSH軟體來遠端登入，Windows大部分都是使用 <strong>Putty</strong> ， 不過因為因為EC2的金鑰是以.pem檔來儲存，Putty無法直接使用，所以要用一個叫做 <strong>Puttygen</strong> 來做金鑰的轉檔</p>

<p><a href="http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe" target="_blank">Putty 下載點</a></p>

<p><a href="http://the.earth.li/~sgtatham/putty/latest/x86/puttygen.exe" target="_blank">Puttygen 下載點</a></p>

<p>執行 <strong>puttygen.exe</strong> 且無需安裝，打開後按下 <strong>Load</strong>，選擇剛才下載的.pem檔</p>

<p><img src="https://lh3.googleusercontent.com/-pdtYelILnZo/UI-FbRF5hQI/AAAAAAAABzw/BAS6tI_xdEk/s496/2012-10-30_152801.jpg" /></p>

<p>選擇 <strong>Sace private key</strong>，存成一個 .ppk檔</p>

<p><img src="https://lh6.googleusercontent.com/-1UG_P7Wqw-g/UI-FdpNAfRI/AAAAAAAABz8/T0TRFtxMVVY/s495/2012-10-30_152856.jpg" /></p>

<p>接著執行剛剛下載的 <strong>Putty.exe</strong> ， 左方選擇 <strong>Connection</strong> → <strong>SSH</strong> → <strong>Auth</strong> ，然後按下 <strong>Browse</strong> 選擇剛剛儲存的.ppk檔</p>

<p><img src="https://lh4.googleusercontent.com/-sQRc74011W4/UI-FdcvHmrI/AAAAAAAABz4/f8ySGHCBkWY/s466/2012-10-30_153144.jpg" /></p>

<p>按下左方的 <strong>Session</strong> ，在Host Name欄位輸入你剛才的 <strong>Public DNS</strong> ，連線類型(Connection type)選擇 <strong>SSH</strong>，按下 <strong>Open</strong> 就可以開始連線囉~</p>

<p><img src="https://lh5.googleusercontent.com/-_Pi8UR1wsNQ/UI-FeJmaw0I/AAAAAAAAB0I/zLQMYgYx1ng/s467/2012-10-30_153603.jpg" /></p>

<p>在 <strong>login as</strong> 後面輸入 <strong>ubuntu</strong> 按下Enter</p>

<p><img src="https://lh6.googleusercontent.com/-hLdma4Q0mBQ/UI-FefgvVOI/AAAAAAAAB0M/J11ZpqvsRjs/s675/2012-10-30_153633.jpg" /></p>

<p>過一會，出現輸入指令的畫面，代表成功連線到EC2主機啦~</p>

<p><img src="https://lh4.googleusercontent.com/-F1v2Uh5v0CI/UI-FfPGHXQI/AAAAAAAAB0Y/sYuU9veEA-o/s676/2012-10-30_153720.jpg" /></p>

<p>那要怎麼把主機關掉不用呢?</p>

<p>回到剛剛的EC2後台，在主機的那一欄的狀態列按下右鍵，會看到四個狀態</p>

<p><img src="https://lh5.googleusercontent.com/-qyQ7NRYxMjg/UI-MfJ_bKoI/AAAAAAAAB1M/xHplgqf1hhQ/s538/2012-10-30_161427.jpg" /></p>

<p><strong>Terminate:</strong> 代表終止，會將主機刪除</p>

<p><strong>Reboot:</strong> 代表重新開機</p>

<p><strong>Stop:</strong> 代表關機</p>

<p><strong>Start:</strong> 代表開機</p>

<p>記住，只要一開機就會開始用一小時來計算，免費的一個月只有750小時，超過要收錢喔！</p>

<p>那如果想看目前總共花了多少錢，該去哪看呢?</p>

<p>在右上角點擊名稱，點選 <strong>Account Activity</strong></p>

<p><img src="https://lh4.googleusercontent.com/-4ZmMEDZjsE4/UI-Nm_7PFfI/AAAAAAAAB1U/RZEJGKYuGoU/s363/2012-10-30_161809.jpg" /></p>

<p>拉到最下面就可以看到囉~</p>

<p><img src="https://lh3.googleusercontent.com/-zwSmA7ZkDew/UI-NnYpkmpI/AAAAAAAAB1c/_Bnh80-i0Ds/s778/2012-10-30_161909.jpg" /></p>

<p>接下來如果還有玩出甚麼心得，再跟大家分享~</p>

<p>備註:</p>

<p>免費使用上限</p>

<p>750小時的EC2 Linux Micro Instance使用(613MB RAM, 32/64位元平台)</p>

<p>5GB的S3儲存空間(兩萬次下載/兩千次上傳)，30GB的網路總流量(上傳/下載各15GB)</p>

<p>25小時的Amazon SimpleDB使用及1GB的儲存空間 ※如果你的使用超過以上用量，則超出部份必須收費</p>

<p>以上內容以官方公告為主</p>

<p>參考資料:</p>

<p><a href="http://blog.soft.idv.tw/?p=823" target="_blank">什麼是雲端服務？阿正老師教你免費玩Amazon EC2雲端主機！(上篇)</a></p>

<p><a href="http://blog.soft.idv.tw/?p=824" target="_blank">阿正老師教你免費玩Amazon EC2雲端主機(下篇)：主機實戰篇</a></p>

<p>很多大大的指導</p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[學習筆記] 如何停止浪費時間在舊版IE的相容性]]></title>
    <link href="http://rx836.github.com/blog/stop-wasting-time-for-ie/"/>
    <updated>2012-10-26T12:25:00+08:00</updated>
    <id>http://rx836.github.com/blog/stop-wasting-time-for-ie</id>
    <content type="html"><![CDATA[<p>IE的痛&#8230;，只有遇過才可以體會到，我相信絕大多數的開發者都曾經有過這個痛，在許多開發者聚會的場合裡面，IE也是最常被拿出來開玩笑，但如何停止浪費你的時間去為了IE做開發上的調整？Mandy Barrington所寫的<a href="http://www.sitepoint.com/how-to-stop-wasting-time-developing-for-internet-explorer/" target="_blank">How to Stop Wasting Time Developing for Internet Explorer</a>或許可以供大家參考</p>

<!--more-->


<h3>1.使用分析工具</h3>

<p>使用分析工具來分析網站的訪客都用哪一個瀏覽器，如果發現只有很少數的人使用舊版IE，就別花費時間去為了那些訪客做修改，在這裡推薦很多網站都使用的<a href="http://www.google.com/analytics/" target="_blank">Google Analytics</a>，最重要的是它還是免費</p>

<h3>2.提醒用戶升級</h3>

<p>假設有些時候某些功能沒辦法在舊版的IE上執行，那善意的提醒也是不錯的效果，可以在這邊下載<a href="http://code.google.com/p/ie6-upgrade-warning/" target="_blank">IE6 Upgrade Warning</a>，這個由Google寫的Project可以幫助你在訪客是使用IE6時，跳出提醒升級的視窗，使用方式就是先下載整包Project，放進你的網站裡面，並且加入以下程式碼</p>

<pre><code>&lt;!--[if lte IE 6]&gt;&lt;script src="js/ie6/warning.js"&gt;&lt;/script&gt;&lt;script&gt;window.onload=function(){e("js/ie6/")}&lt;/script&gt;&lt;![endif]--&gt;
</code></pre>

<p><strong>warning.js</strong>這支檔案可以隨著擺放路徑而調整，假如偵測到訪客是使用IE6就會跳出以下畫面</p>

<p><img src="https://lh5.googleusercontent.com/-rsWJFxHcHAs/UIoszY9MeOI/AAAAAAAABvg/KV_7bbdkMEg/s700/upgrade.jpg" /></p>

<p>當然你也可以換成繁體中文版，只要打開warning.js這支檔案，將前三行的code換成以下的程式碼即可</p>

<pre><code>var msg1 = "你知道你的 Internet Explorer 瀏覽器已經過時了嗎？";
var msg2 = "建議你升級到較新的版本，或是改用其他的瀏覽器，以獲得更好的使用體驗。下面是一份目前廣受歡迎的瀏覽器列表。";
var msg3 = "只要點選圖示，就可以連到各自的下載頁面。";
</code></pre>

<p>記得注意UTF-8的編碼問題</p>

<h3>3.整理問題</h3>

<p>有時候好不容易處理過的BUG，記得要記錄起來，不僅造福將來也有可能碰到問題的自己，也可以幫助團隊的其他人，甚至是社群上同樣遇到相同問題的開發者</p>

<h3>4.提高預算</h3>

<p>假如真的遇到客戶要求一定要支援所有瀏覽器&#8230;.，那就大膽的開口要求提高預算吧！</p>

<p>以上就是作者建議大家的解決方式</p>

<p>IE的相容性問題我想也不是一時可以解決，但至少幾個大型的入口網站(例如Google)已經開始不再支援老舊的IE，而IE6老實說也慢慢的逐漸消失中，微軟似乎也聽見的大家的心聲，至少IE10目前看起來是中規中矩，讓我們還是用樂觀的心情來迎接未來:)</p>

<p>參考資料:</p>

<p><a href="http://www.sitepoint.com/how-to-stop-wasting-time-developing-for-internet-explorer/" target="_blank">How to Stop Wasting Time Developing for Internet Explorer</a></p>

<p><a href="http://code.google.com/p/ie6-upgrade-warning/" target="_blank">ie6-upgrade-warning</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[好書分享] 為什麼搜尋將被淘汰]]></title>
    <link href="http://rx836.github.com/blog/book-review-5/"/>
    <updated>2012-10-25T22:33:00+08:00</updated>
    <id>http://rx836.github.com/blog/book-review-5</id>
    <content type="html"><![CDATA[<p><img src="https://lh4.googleusercontent.com/-_xeoCp7o0h4/UIlc6lVxgCI/AAAAAAAABvI/aIdvp8E_NHU/s360/DJAP00-A60993607000_4f18e070e0a07.jpeg" /></p>

<p>作者:史蒂芬．羅森鮑姆（Steven Rosenbaum）</p>

<p>出版者:美商麥格羅希爾國際股</p>

<!--more-->


<p>身處於資訊爆炸的時代，尤其是近幾年的Facebook崛起，每天早上我打開臉書，塗鴉牆上來自各式各樣的訊息，扣除掉一些個人的心情感想，大部分都是新聞轉貼，科技新知，或是國際大事，也因為這樣，幾乎每一則相關訊息文章，我都會看過一遍，等於是餵我多少訊息，我就會吃下多少訊息，近似強迫症的症狀&#8230;</p>

<p>但這幾個月來，我喜歡針對某些主題去訂閱文章，例如JavaScript或是HTML5，甚至是創業、行銷、科技，而不再是漫無目的的去接受大量的資訊，原因在於其實大部分的資訊對我來說都是雜訊，但因為個性關係不想漏掉任何訊息(就跟常常會盯著通訊軟體看有沒有miss訊息一樣)，不過人的一天時間其實有限，在這資訊大海中不可能每一篇都看過，所以訂閱特定主題的BLOG或文章對我來說特別有幫助</p>

<h3>關於策展(curation)</h3>

<p>這本『為什麼搜尋將被淘汰』內容其實主要講的就是關於<strong>策展(curation)</strong>這件事情，策展就是蒐集某個主題的事情，並將它整理給有需求的人接收，在之前我可能為了想知道關於<strong>社群行銷</strong>這件事，我必須去Google相關的關鍵字，而跳出來的往往都是好幾萬筆的資料文章，在一個一個的點開消化、過濾，得出我想要的東西，但這不會是很好的方式，相反的，如果這時候有個專門在講關於社群行銷的Blog，是不是就省卻了很多時間尋找這方面的資訊?</p>

<p>本書也提到每個人都可以成為一個策展人，還有描述許多正反兩面的意見，例如有些人覺得策展是一件盜取別人的創作內容，應該給予譴責，但另外一派人卻覺得，如果沒有策展人，一篇文章只會在茫茫的資訊大海中被雜訊給淹沒</p>

<p>我個人是覺得，電腦可以利用優秀的演算法去找出『可能』適合我們的資訊，但很多關於『人』的事情電腦反而沒辦法做到像策展者如此出色，書本也提到，假如今天你去吃一家餐廳，發現主廚的手藝不是很好，回到家以後立刻寫了一篇文章告訴大家，但有可能那天主廚因為身體不適或是幾個月後主廚換人了，但這篇文章會從網路消失嗎？並不會，而且會在大家搜尋的時候一次又一次的跑出來</p>

<p>流行銷的作者Jamie，也有針對Curator寫了一篇文章，叫做<a href="http://mrjamie.cc/2012/03/09/curator/" target="_blank">為你的消費者，當一個盡責的「Curator」</a>，有興趣的人也可以去看看</p>

<p>最後我想筆記的重點是:資訊越多，策展者越重要，電腦還尚未可以取代人類</p>

<p>參考資料:</p>

<p>為什麼搜尋將被淘汰</p>

<p>如有想法，歡迎一起提出討論</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[jQuery] jQuery你一定要知道的八件事]]></title>
    <link href="http://rx836.github.com/blog/jquery-8-skill/"/>
    <updated>2012-10-24T23:18:00+08:00</updated>
    <id>http://rx836.github.com/blog/jquery-8-skill</id>
    <content type="html"><![CDATA[<p>jQuery這項技能在面試的時候，已經從&#8221;加分&#8221;變成&#8221;必備&#8221;，由此可知，如果想走web開發，jQuery已經是不可或缺的技術，但jQuery雖然好上手，網路上的教學資源也很多，但有幾件事情是在使用jQuery你一定要知道的</p>

<!--more-->


<h2>1.使用Google CDN-hosted並且保持最新版本</h2>

<p>使用Google CDN的好處是，有許多網站都有使用CDN，所以訪客在拜訪你的網站之前，可能已經先下載過jQuery，之後拜訪你的網站就可以直接從快取中使用，而不用重新下載，增加網站讀取速度，至於保持jQuery最新的版本，除了可以修復一些bug，還可以增加performance</p>

<pre><code>&lt;script type="text/javascript" src="http://rx836.github.com//ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>有些人可能會發現，為什麼少了<strong>http:</strong>，原因是假如網站遊走在http和https之間，使用這種忽略 <strong>scheme</strong> 的部分，就可以避免因為開啟了https的網頁，但jQuery是http所產生的安全性問題</p>

<h2>2.在開發時搭配Cheat Sheet</h2>

<p>其實不只是初學者，對於資深的開發者也建議使用cheat sheets，可以方便直接查詢，也省去google的麻煩</p>

<p><a href="http://oscarotero.com/jquery/" target="_blank">http://oscarotero.com/jquery/</a></p>

<p><a href="http://www.javascripttoolbox.com/jquery/cheatsheet/" target="_blank">http://www.javascripttoolbox.com/jquery/cheatsheet/</a></p>

<p><a href="http://devcheatsheet.com/tag/jquery/" target="_blank">http://devcheatsheet.com/tag/jquery/</a></p>

<h2>3.不能單純只使用CDN</h2>

<p>剛剛第一點講到建議使用Google CDN，但有一點必須要注意的是，CDN有時候會有失效的問題，像某些地區會連不到Google CDN，這時候就要有locally的jQuery可以備用，判別的JavaScript語法可以這樣寫</p>

<pre><code>&lt;script src="http://rx836.github.com//ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;script&gt;window.jQuery || document.write('&lt;script src="js/jquery-1.8.1.min.js"&gt;&lt;\/script&gt;')&lt;/script&gt;
</code></pre>

<p>這段程式碼會在抓不到Google CDN時，去抓取自家主機上的jQuery，讓網站不至於因為這樣而掛掉</p>

<h2>4.重複使用jQuery selector</h2>

<p>為了優化jQuery，千萬不要這樣寫</p>

<pre><code>$("#mySmashingID").css("color", "pink");
$("#mySmashingID").css("font", "Verdana");
$("#mySmashingID").text("Some error message goes here!");
</code></pre>

<p>假如要針對同個selectors做操作，不應該重複呼叫自己，而是要利用jQuery鏈結的特性串起來</p>

<pre><code>$("#mySmashingID").css({ "color": "pink", "font": "Verdana"}).text("Some error message goes here!!");
</code></pre>

<h2>5.將重複使用的selector宣告一個變數存起來</h2>

<p>假如你會針對一個selector在很多地方使用到</p>

<pre><code>$(‘#mySmashingGag’).appendTo(‘#mysidebar’);
$(‘#mySmashingGag’).addClass(‘widget’);
$(‘#mySmashingGag’).hide();
$(‘#mySmashingGag’).fadeIn(‘fast’);
</code></pre>

<p>你應該將他存入一個變數，並且使用變數來操作，這樣也可以增加效能，而不會一直去做selector</p>

<pre><code>var mySmashingGag = $(‘#mySmashingGag’);
mySmashingGag.appendTo(‘#mysidebar’);
mySmashingGag.addClass(‘widget’);
mySmashingGag.hide();
mySmashingGag.fadeIn(‘fast’);
</code></pre>

<h2>6.使用ID而不要使用class</h2>

<p>jQuery骨子裡其實還是JavaScript，所以不管如何速度再快也比不上原生的JavaScript快，所以如果使用ID來選取元素的話，就會使用JavaScript的原生方法 <strong>getElementByID</strong>，效能就會比較快，相反的不是使用原生方法的class效能就會比較慢</p>

<p>不要使用class</p>

<pre><code>// Selecting each item at once
for (i = 0; i &lt; 900; i++) {
    var selectedItem = $('.mySmashingItem' + i);
}
</code></pre>

<p>使用ID</p>

<pre><code>// Selecting each item at once
for (i = 0; i &lt; 900; i++) {
    var selectedItem = $('#mySmashingItem' + i);
}
</code></pre>

<h2>7.使用縮寫</h2>

<p>正常來說會這樣寫</p>

<pre><code>$(document).ready(function (){
    // your awesome code here
});
</code></pre>

<p>但其實可以這樣寫</p>

<pre><code>$(function (){
    // your awesome code here
});
</code></pre>

<h2>8.使用context</h2>

<p>當你再使用選取器(selectors)的時候，jQuery會針對整個頁面去做搜索直到找到為止，可是其實我們可以縮小範圍</p>

<p>例如原本的寫法</p>

<pre><code>$(‘.mySmashingGag’).on(‘click’, showMenu);
</code></pre>

<p>但我們可以這樣寫</p>

<pre><code>$(‘.mySmashingGag’, ‘#mySidebar’).on(‘click’, showMenu);
</code></pre>

<p>這樣他就會在ID為mySidebar去搜尋class為mySmashingGag的元素</p>

<p>這些其實不難，但都是養成正確寫jQuery的好習慣:)</p>

<p>參考資料:</p>

<p><a href="http://smashinghub.com/8-jquery-crimes-you-really-shouldnt-commit.htm" target="_blank">8 jQuery Crimes You Really Shouldn’t Commit</a></p>

<p><a href="http://blog.miniasp.com/post/2008/10/19/URL-URI-Description-and-usage-tips.aspx" target="_blank">講解 URL 結構與分享幾個相對路徑與絕對路徑的開發技巧 </a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Win8] 動態磚初體驗]]></title>
    <link href="http://rx836.github.com/blog/windows8-notifications/"/>
    <updated>2012-10-23T15:27:00+08:00</updated>
    <id>http://rx836.github.com/blog/windows8-notifications</id>
    <content type="html"><![CDATA[<p>最近正參加<a href="http://www.microsoft.com/taiwan/promo/Win8AppFest/detailedRule.htm" target="_blank">Idea × Quality × Speed – Apps 開發者聯盟</a>，想爭取快手獎前100名名額，活動辦法中有提到需符合10項建議中的其中兩項(詳情看活動辦法)，我覺得動態磚是Win8 APP很有特色的一項功能，所以決定把他加入到我的APP，順便學習如何操作動態磚:)</p>

<!--more-->


<p>如果還不太了解Win8 APP的朋友，可以參考之前的<a href="http://blog.rx836.tw/blog/first-win8-app/" target="_blank">[Win8] 入門要學說Hello World</a></p>

<p>在Win8 APP一開始可以從<strong>資訊清單</strong>裡面設定<strong>預設磚</strong>，預設磚會在應用程式第一次安裝時顯示</p>

<p>點擊package.appxmanifest兩下開啟資訊清單編輯器</p>

<p><img src="https://lh5.googleusercontent.com/-op8a6QflCRY/UIZeWzVBBTI/AAAAAAAABt4/5HGif4Mh8hY/s813/A.png" /></p>

<p><strong>標誌:</strong> 是正方形磚的圖檔設定</p>

<p><strong>寬標誌:</strong> 是寬型磚的圖檔設定</p>

<p><strong>小標誌:</strong> 是提供搜尋結果的小圖</p>

<p><img src="https://lh3.googleusercontent.com/-PxTwOp3yqSo/UIZeXz4taNI/AAAAAAAABuA/_61SB2q6UtI/s518/B.png" /></p>

<p>上面的顯示圖1為方形磚，2為寬型磚</p>

<h3>注意事項</h3>

<p>這邊有一點要<strong>特別特別注意</strong>的是，對Win8 APP來說，假如沒有在資訊清單裡面設定<strong>寬標誌</strong>，應用程式將無法切換成寬型磚，所以寬型通知將也無法顯示，小弟我就是在這邊卡了很久，想說程式都沒有錯，為什麼一直無法顯示寬型通知&#8230;</p>

<p>假設你的應用程式有提供寬標誌，對應用程式按下右鍵，就會有選項可以選擇放大或縮小</p>

<p><img src="https://lh3.googleusercontent.com/-1rzB4IyyrZI/UIZeYR6tFBI/AAAAAAAABuI/6aKtLu5S_pA/s570/C.png" /></p>

<p>OK，對動態磚有基本的認識以後，接下來就是JavaScript部份</p>

<p>先宣告一個notifications變數，這裡宣告的目的是取代完整的命名空間，省去每次都要打很長一串程式碼</p>

<pre><code>var notifications = Windows.UI.Notifications;
</code></pre>

<p>接下來就是為你的寬型磚挑選一個範本，並且抓取他的XML內容</p>

<pre><code>var template = notifications.TileTemplateType.tileWideImageAndText01;                      
var tileXml = notifications.TileUpdateManager.getTemplateContent(template);
</code></pre>

<p>動態磚裡面的顯示內容其實就是一個XML的格式，所以我們利用<strong>GetTemplateContent</strong> 方法傳回 <strong>XmlDocument</strong>，也就是下列的XML基本架構</p>

<pre><code>&lt;tile&gt;
    &lt;visual&gt;
        &lt;binding template="TileWideImageAndText01"&gt;
            &lt;image id="1" src=""/&gt;
            &lt;text id="1"&gt;&lt;/text&gt;
        &lt;/binding&gt;
    &lt;/visual&gt;
&lt;/tile&gt;
</code></pre>

<p>後續我們就是透過標準DOM函式來修改這個XML的內容，例如新增文字和新增圖片</p>

<p>新增文字</p>

<pre><code>var tileTextAttributes = tileXml.getElementsByTagName("text");   
tileTextAttributes[0].appendChild(tileXml.createTextNode("我是寬型磚通知"));
</code></pre>

<p>新增圖片</p>

<pre><code>var tileImageAttributes = tileXml.getElementsByTagName("image");
tileImageAttributes[0].setAttribute("src", "http://i.msdn.microsoft.com/dynimg/IC612768.png");
tileImageAttributes[0].setAttribute("alt", "red graphic");  
</code></pre>

<p>以上設定完寬磚型通知以後，接下來是方形磚通知</p>

<pre><code>var squareTemplate = notifications.TileTemplateType.tileSquareText04;
var squareTileXml = notifications.TileUpdateManager.getTemplateContent(squareTemplate);
var squareTileTextAttributes = squareTileXml.getElementsByTagName("text");   
squareTileTextAttributes[0].appendChild(squareTileXml.createTextNode("我是方型磚通知"));
</code></pre>

<p>然後將方型磚通知加到XML節點裡面</p>

<pre><code>var node = tileXml.importNode(squareTileXml.getElementsByTagName("binding").item(0), true);
tileXml.getElementsByTagName("visual").item(0).appendChild(node);
</code></pre>

<p>最後就是利用XML來建立新的通知</p>

<pre><code>var tileNotification = new notifications.TileNotification(tileXml);
</code></pre>

<p>按下Ctrl+F5來看看效果吧</p>

<p><img src="https://lh6.googleusercontent.com/-qKWHXg0ND0Y/UIZeZSVxekI/AAAAAAAABuQ/xU26ZDJgRIA/s771/D.png" /></p>

<p><img src="https://lh3.googleusercontent.com/-1hIF3GPJNp4/UIZeZngTBII/AAAAAAAABuU/T3AO20DhkAI/s771/E.png" /></p>

<p>另外微軟建議通知的內容需要有時效性，所以建議磚的內容不應該超過通知訊息的時效性，也就是說太老舊的訊息就不要再通知囉~，記得幫通知加個時效性，以下程式碼是指10分鐘後將會把通知從磚移除</p>

<pre><code>var currentTime = new Date();
tileNotification.expirationTime = new Date(currentTime.getTime() + 600 * 1000);

notifications.TileUpdateManager.createTileUpdaterForApplication().update(tileNotification);
</code></pre>

<p>參考資料:</p>

<p><a href="http://msdn.microsoft.com/zh-tw/library/windows/apps/hh465439.aspx" target="_blank">傳送磚更新 (使用 JavaScript 和 HTML 的 Metro 樣式應用程式)</a></p>

<p><a href="http://msdn.microsoft.com/zh-tw/library/windows/apps/hh779724.aspx" target="_blank">磚與磚通知概觀 (Metro 樣式應用程式)</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CSS3] 認識CSS3 transitions]]></title>
    <link href="http://rx836.github.com/blog/css3-transitions-guide/"/>
    <updated>2012-10-20T23:24:00+08:00</updated>
    <id>http://rx836.github.com/blog/css3-transitions-guide</id>
    <content type="html"><![CDATA[<p>一直沒有找個時間好好的了解一下CSS3 transitions，趁著看到<a href="http://www.adobe.com/devnet/html5/articles/using-css3-transitions-a-comprehensive-guide.html" target="_blank">這篇</a>文章，就來筆記一下用法，扎實一下基本功</p>

<!--more-->


<p>CSS3 transitions可以改變css屬性的值，在某個期間內做出變化，類似<a href="http://api.jquery.com/animate/" target="_blank">jQuery.animate()</a>，語法結構如下</p>

<pre><code>.example {     
    transition-property: background-color;     
    transition-duration: 2s;     
    transition-timing-function: ease-in;            
    transition-delay: 1s; 
}
</code></pre>

<p>這裡沒有特別加上prefixes，在真正使用的時候要自行加上，接著是分別講解每個屬性的用途</p>

<p><strong>transition-property:</strong> 指定你要變化的CSS屬性，至於哪些屬性是擁有transition效果可以查看<a href="http://www.w3.org/TR/css3-transitions/#animatable-properties" target="_blank">這張表</a></p>

<p><strong>transition-duration:</strong> 指定transition從開始到結束的變化時間，在數字後面加上s就是以秒計算，用ms就是微秒</p>

<p><strong>transition-timing-function:</strong> 根據時間的進行去改變屬性值的變化速率，也就是貝茲曲線，詳細的介紹可以參考<a href="http://www.w3.org/TR/css3-transitions/#transition-timing-function-property" target="_blank">這篇</a>，基本的有linear, ease-in, ease-out和ease-in-out這些值可以使用</p>

<p><strong>transition-delay:</strong> 可以指定秒或微秒來延遲transition觸發的時間</p>

<h3>Transition shorthand</h3>

<p>為了簡潔也可以這樣寫</p>

<pre><code>.example {     
    transition: background-color 2s ease-in 1s; 
} 
</code></pre>

<p>要特別注意的是，順序的重要性，另外第一個時間代表是<strong>transition-duration</strong>，第二個時間是<strong>transition-delay</strong>，如果你要定義<strong>transition-delay</strong>一定要先定義<strong>transition-duration</strong>才行</p>

<h3>Multiple transitions</h3>

<p>如果想在同個元素上定義複數個transitions，可以用下面寫法</p>

<pre><code>.example {     
    transition:  background-color  2s ease-in 1s,      
    width  2s ease-in-out,      
    height 3s ease-out; 
}
</code></pre>

<p>記得要用<strong>逗號</strong>隔開</p>

<h3>Triggering a transition</h3>

<p>但其實光寫上面那些語法並不能實現transitions，原因在於沒有<strong>觸發</strong>這個動作，所以我們可能要加些&#8221;動作&#8221;，例如比較常見的是<strong>:hover</strong></p>

<pre><code>.example {     
    background-color: green;     
    transition: background-color  2s ease-in 1s; 
    width:100px;
    height:100px;  
} 
.example:hover {     
    background-color: blue 
}
</code></pre>

<p><a href="http://jsfiddle.net/Pa5Uk/1/" target="_blank">範例</a></p>

<p>會看到如果將滑鼠移到div .example上面，會先等待一秒，接著再花兩秒的時間從綠色轉換成藍色</p>

<h3>Transitions triggered by JavaScript</h3>

<p>假如要搭配JavaScript呢？我們可以使用jQuery來示範一下</p>

<p>css</p>

<pre><code>.example {     
    background-color: green;     
    transition: background-color  2s ease-in 1s;
    width:100px;
    height:100px;  
}
.style-change {     
    background-color: blue
}
</code></pre>

<p>html</p>

<pre><code>&lt;div id="a" class="example"&gt;&lt;/div&gt;
</code></pre>

<p>js</p>

<pre><code>$("#a").click(function() {         
    $(".example").toggleClass("style-change");    
}); 
</code></pre>

<p><a href="http://jsfiddle.net/Rnebd/" target="_blank">範例</a></p>

<p>這樣就可以搭配著js來使用transition的效果</p>

<h3>Transition tricks and techniques</h3>

<p>有了前面的一些基本用法以外，接下來介紹的是一些小技巧，前面的<strong>:hover</strong>例子不管是從綠色切換成藍色，還是藍色切換回綠色，都是同樣的效果和速度，但其實可以針對這兩者去做變化，例如</p>

<pre><code>.example {     
    background-color: green;     
    transition: background-color  1s ease-out;
    width:100px;
    height:100px;    
}
.example:hover {     
    background-color: blue;
    transition: background-color  5s linear;
}
</code></pre>

<p>這段意思是從綠色到藍色要花一秒的時間，但從藍色變回綠色要花五秒，就可以做出比較不一樣的效果</p>

<pre><code>.example {     
    width: 100px;     
    height: 100px;     
    background-color: blue;     
    transition: width 0s ease-out 999999s,                 
    height 0s ease-out 999999s; } 

.example:active {     
    width: 200px;     
    height: 200px;     
    transition: width 2s,                 
    height 2s; 
}
</code></pre>

<p>當然也可以把transition-delay設為999999s，這樣就可以將效果一直保存</p>

<p>只是我目前還不知道這樣的保存可以用來做啥就是了&#8230;</p>

<p>參考資料:</p>

<p><a href="http://www.adobe.com/devnet/html5/articles/using-css3-transitions-a-comprehensive-guide.html" target="_blank">Using CSS3 transitions: A comprehensive guide</a></p>

<p><a href="http://www.w3cplus.com/content/css3-transition" target="_blank">CSS3 Transition</a></p>

<p>內容如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
</feed>
