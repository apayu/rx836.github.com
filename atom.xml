<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rx836]]></title>
  <link href="http://rx836.github.com/atom.xml" rel="self"/>
  <link href="http://rx836.github.com/"/>
  <updated>2012-09-25T00:50:24+08:00</updated>
  <id>http://rx836.github.com/</id>
  <author>
    <name><![CDATA[阿帕]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[JavaScript] 當函式需要傳遞很多參數時]]></title>
    <link href="http://rx836.github.com/blog/javascript-simple-object/"/>
    <updated>2012-09-25T00:06:00+08:00</updated>
    <id>http://rx836.github.com/blog/javascript-simple-object</id>
    <content type="html"><![CDATA[<p>有時候我們可能寫了一個函式，但裡面需要傳遞的參數非常的多，這時候除了要小心哪些是必要的哪些是不必要的參數以外，還要注意參數列的順序不能搞混，這真的是會讓人頭昏眼花&#8230;</p>

<!--more-->


<p>不過，有個方法可以解決這個困擾，就是<strong>設定值物件</strong>，平常我們使用函式可能會這樣寫</p>

<pre><code>function add(parameter1, parameter2, parameter3, parameter4, parameter5) {...}
</code></pre>

<p>可是參數一堆真的會又臭又長，還要注意先後順序，但如果改成這樣寫</p>

<pre><code>var conf = {
    parameter1: "a",
    parameter2: "b",
    parameter3: "c"
}

add(conf)
</code></pre>

<p>將參數全部包成一個物件，再傳給函式，不僅可以不用記住先後順序，還可以安全的略過選用參數，也更容易閱讀和維護，當然新增和移除也比較方便</p>

<p>不過缺點就是要特別去知道參數的名稱，而且物件的屬性名稱並無法做最小化處理</p>

<p>不過當你要設定一堆CSS樣式的時候，或是個人資料很多很繁雜的時候，這個方法倒是很好用的:)</p>

<p>參考資料:</p>

<p>JavaScript 設計模式</p>

<p>如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[學習筆記] 簡單容易，如何在VM裝Windows 8來玩玩[二]]]></title>
    <link href="http://rx836.github.com/blog/2-vmware-windows-8/"/>
    <updated>2012-09-22T14:33:00+08:00</updated>
    <id>http://rx836.github.com/blog/2-vmware-windows-8</id>
    <content type="html"><![CDATA[<p>延續上一篇<a href="http://blog.rx836.tw/blog/vmware-windows-8/" target="_blank">簡單容易，如何在VM裝Windows 8來玩玩[二]</a>，已經在VM裡面建立一個Windows 8的虛擬機器，現在就來開始安裝系統部分</p>

<!--more-->


<p>按下『Play virtual machine』以後，就會出現啟動畫面</p>

<p><img src="https://lh5.googleusercontent.com/-81H0bQbP8eA/UFyf5ev3TRI/AAAAAAAABko/QD4Y-GM2JIk/s903/12.jpg"  /></p>

<p>接著選擇時區『Chinese(Traditional, Taiwan)』，語言只有英文可以選擇</p>

<p><img src="https://lh5.googleusercontent.com/-fBKS1fGZlDk/UFyf5xfRyCI/AAAAAAAABk0/G6XGhTOasN0/s903/13.jpg"  /></p>

<p>按下『Install now』</p>

<p><img src="https://lh6.googleusercontent.com/-Ax-DPQyxZbc/UFyf57uCRkI/AAAAAAAABk4/rU9T-QxMrro/s903/14.jpg"  /></p>

<p>接著會要你輸入產品序號，這時候去之前的<a href="http://windows.microsoft.com/en-US/windows-8/iso" target="_blank">Windows 8 Consumer Preview(消費者預覽版)</a>下載頁，裡面有產品序號(Product key)</p>

<p><img src="https://lh3.googleusercontent.com/-_d98Gtqnc3c/UFyf6UuvMiI/AAAAAAAABlA/p7N_61eQRGI/s860/15.jpg"  /></p>

<p>貼到序號框裡面</p>

<p><img src="https://lh4.googleusercontent.com/-oAOyYz0Eokg/UFyf7GrLx5I/AAAAAAAABlU/y3q_YM9AnO8/s903/16.jpg"  /></p>

<p>勾選『I accept the license terms』，再點『Next』</p>

<p><img src="https://lh6.googleusercontent.com/-NfbwsgksSwI/UFyf7X8MNPI/AAAAAAAABlQ/6-uWUpfp9xc/s903/17.jpg"  /></p>

<p>點選『Custom: Install Windows only』</p>

<p><img src="https://lh6.googleusercontent.com/-Qkt-zeuyf_8/UFyf7r9zNMI/AAAAAAAABlY/bY8Szlo-ibA/s903/18.jpg"  /></p>

<p>直接點『Next』</p>

<p><img src="https://lh3.googleusercontent.com/-kCW-XYnx_SI/UFyf8Qalj0I/AAAAAAAABl0/9LZ4DNqWYeQ/s903/19.jpg"  /></p>

<p>開始安裝囉！</p>

<p><img src="https://lh6.googleusercontent.com/-JFPiO0_vHPo/UFyf8jljh2I/AAAAAAAABlo/X-ZpEfFo5_0/s903/20.jpg"  /></p>

<p>安裝好後進入設定畫面，這裡可以選擇電腦名稱和背景顏色，設定好後一樣按『Next』</p>

<p><img src="https://lh4.googleusercontent.com/-J08q-P3IoD0/UFyf9qrlE9I/AAAAAAAABl8/ZslAPvFNBmg/s903/21.jpg"  /></p>

<p>直接選預設值吧！</p>

<p><img src="https://lh4.googleusercontent.com/-bZOZ2SRntoc/UFyf-HMrfOI/AAAAAAAABmE/a0fcU4Ir3WY/s903/22.jpg"  /></p>

<p>Windows 8可以整合Windows Live Messenger或MSN帳號</p>

<p><img src="https://lh5.googleusercontent.com/-YjC4_qJCucU/UFyf_MjclJI/AAAAAAAABmc/B7zdknpEmD8/s903/23.jpg"  /></p>

<p>輸入密碼</p>

<p><img src="https://lh5.googleusercontent.com/-e7oYsxfVAaM/UFyf_E60dPI/AAAAAAAABmU/pa5aoZVvM_4/s903/24.jpg"  /></p>

<p>確認一些基本資訊，直接點選『Next』</p>

<p><img src="https://lh5.googleusercontent.com/-pZErLzdxSCY/UFyf_4S1FmI/AAAAAAAABmk/cYWchJUWOaU/s903/25.jpg"  /></p>

<p>大功告成！趕快玩玩看吧！</p>

<p><img src="https://lh3.googleusercontent.com/-62nz20DXDUM/UFygAq0QQ6I/AAAAAAAABmw/wkowZ3oShG8/s903/26.jpg"  /></p>

<p>試玩了一下發現真的蠻多東西要重新適應的，包括操作介面和使用習慣，至於好不好用就是見仁見智了:)</p>

<h2>後記</h2>

<p>一定會有人疑惑要怎麼關機，請將滑鼠移到右下角會出現『Settings』，裡面有個『Power』再點『Shut down』即可</p>

<p>其他還有IE10大家也可以玩玩看</p>

<p>參考資料:</p>

<p><a href="http://blog.xuite.net/yh96301/blog/58184430" target="_blank">VMware Player 4.0安裝Windows 8消費者預覽版本(二)</a></p>

<p>如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[學習筆記] 簡單容易，如何在VM裝Windows 8來玩玩[一]]]></title>
    <link href="http://rx836.github.com/blog/vmware-windows-8/"/>
    <updated>2012-09-21T17:37:00+08:00</updated>
    <id>http://rx836.github.com/blog/vmware-windows-8</id>
    <content type="html"><![CDATA[<p>因為想參加Microsoft的<a href="http://www.microsoft.com/taiwan/promo/Win8AppFest/">Apps開發者聯盟</a>，但其實是想拼前100名就可以得到快手獎XD，獎品是Windows 8 專業版軟體乙套，所以想來挑戰看看，但要先把windows 8安裝起來，所以這篇紀錄一下安裝過程，用的是VM</p>

<!--more-->


<p>當然前提你必須先把VM給裝起來，網路上<a href="http://blog.xuite.net/yh96301/blog/53120472" target="_blank">教學還蠻多的</a>，這篇就不多加闡述</p>

<p>一開始首先要去下載微軟所推出的<a href="http://windows.microsoft.com/en-US/windows-8/iso" target="_blank">Windows 8 Consumer Preview(消費者預覽版)</a>，直接下載32-bit (x86)這個版本就可以，但只有English版本，下載完後開啟VM</p>

<p>點選『Create a New Virtual Machine』</p>

<p><img src="https://lh5.googleusercontent.com/-otZSLwijQ0U/UFyf4XwFSyI/AAAAAAAABkc/FNIph_J7JHs/s657/1.jpg"  /></p>

<p>接著點選『I will Install the operating system later』</p>

<p><img src="https://lh5.googleusercontent.com/-xeiYkr8fudM/UFyf8en7F3I/AAAAAAAABls/swewFIyCkmE/s659/2.jpg"  /></p>

<p>作業系統選擇『Microsoft Windows』，接著再選擇『Windows 7』，因為VM沒有Windows 8可以選</p>

<p><img src="https://lh3.googleusercontent.com/-_Co3ZTLZ3bA/UFygAqiA5CI/AAAAAAAABm0/UixQmOxkxiU/s657/3.jpg"  /></p>

<p>輸入虛擬機器的名稱，這邊取名『Windows 8』，再選擇要存放的路徑，然後點選『Next』</p>

<p><img src="https://lh4.googleusercontent.com/-KRAurNJRvLk/UFygBDKQoII/AAAAAAAABm8/YwQLP43AyUQ/s658/4.jpg"  /></p>

<p>接著設定虛擬硬碟的大小，並且設定『Store virtual disk as a single files』，將虛擬硬碟存成一個資料夾，按下『Next』</p>

<p><img src="https://lh3.googleusercontent.com/-EO-2MBYjcEc/UFygBr6bmvI/AAAAAAAABnI/5JjNmotkvEw/s656/5.jpg"  /></p>

<p>再來準備要來設定記憶體和掛載Windows 8映像檔，選擇『Customize Hardware…』</p>

<p><img src="https://lh4.googleusercontent.com/-nbky8ASN0ck/UFygBw-01wI/AAAAAAAABnE/dxdanwgZcjg/s660/6.jpg"  /></p>

<p>調整記憶體，一般來說建議為實體記憶體的3分之1至2分之1之間，官方網站是說至少要1G</p>

<p><img src="https://lh5.googleusercontent.com/-btOEe35_ToI/UFygCdtCjwI/AAAAAAAABnY/P6JM4vBI9Nc/s656/7.jpg"  /></p>

<p>接著選擇『New CD/DVD』的選項，再點『Use ISO image file:』，再按「Browse…」來選擇映像檔</p>

<p><img src="https://lh6.googleusercontent.com/-WxOQRqu4nF8/UFygCyaFR9I/AAAAAAAABng/uQc30JVd0Oo/s658/8.jpg"  /></p>

<p>選擇好映像檔以後就按下『Close』</p>

<p><img src="https://lh4.googleusercontent.com/-v5ICos8qLUQ/UFygC-8bVNI/AAAAAAAABnc/9rp1LeXOO8I/s661/9.jpg"  /></p>

<p>最後按下『Finish』就新增了一個虛擬機器</p>

<p><img src="https://lh6.googleusercontent.com/-5QYBPsTQNwA/UFyf4pX33AI/AAAAAAAABkg/5rhtXII6H1s/s657/10.jpg"  /></p>

<p>按下『Play virtual machine』，開始來進行安裝囉！</p>

<p><img src="https://lh5.googleusercontent.com/-G0VcZ28gqbA/UFyf4laUtKI/AAAAAAAABkk/jvgPOqPFaOE/s659/11.jpg"  /></p>

<p>因為篇幅有點過長，為了方便閱讀，所以分成兩篇來記錄</p>

<p>參考資料:</p>

<p><a href="http://blog.xuite.net/yh96301/blog/58183942" target="_blank">VMware Player 4.0安裝Windows 8消費者預覽版本(一)</a></p>

<p>如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[jQuery] hoverpulse 滑鼠移入，圖片縮放]]></title>
    <link href="http://rx836.github.com/blog/jquery-hoverpulse/"/>
    <updated>2012-09-20T23:42:00+08:00</updated>
    <id>http://rx836.github.com/blog/jquery-hoverpulse</id>
    <content type="html"><![CDATA[<p>jQuery寫了一陣子，直到最近有個需求，想要做到滑鼠移到圖片上，會微微的放大，才發現這個很常看到的效果，我到今天都還沒實做過</p>

<!--more-->


<p>幸運的是&#8230;，就因為這麼晚才實做，所以早就有人把plugin寫好了，我所用的是<a href="http://www.malsup.com/jquery/hoverpulse/" target="_blank">hoverpulse</a>，用法相當相當的簡單</p>

<p>首先是HTML部份</p>

<pre><code>&lt;div&gt;&lt;img src="a.jpg" /&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src="b.jpg" /&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src="c.jpg" /&gt;&lt;/div&gt;
</code></pre>

<p>再來是jQuery部份</p>

<pre><code>$(document).ready(function() {
    $('div img').hoverpulse();
});
</code></pre>

<p>這樣就完成了！當然什麼值都沒有給的情況下是用default，但如果想要設定放大的幅度和變化的速度，可以這樣寫</p>

<pre><code>$(document).ready(function() {
    $('div img').hoverpulse({
        size: 40,  // number of pixels to pulse element (in each direction)
        speed: 400 // speed of the animation 
    });
});
</code></pre>

<p>真的簡單又明瞭&#8230;</p>

<p>那如果你想加入點擊的事件，你可以這樣寫</p>

<pre><code>$(document).ready(function() {
    $('div img').hoverpulse().each(function() {
        var $img = $(this);                 
        $img.click(function() {

            //點每張圖的事件

            return false;
        });
    });
});
</code></pre>

<p>接下來是我個人好奇去看他的source code，可以看到他先將每個圖片的width和height存到$.data裡面</p>

<pre><code>this.each(function() {
    var $this = $(this);
    var w = $this.width(), h = $this.height();
    $this.data('hoverpulse.size', { w: parseInt(w), h: parseInt(h) });
});
</code></pre>

<p>接著利用到<strong>.hover()</strong>的方法去做出滑鼠移到圖片和移出圖片的效果</p>

<pre><code>// bind hover event for behavior
return this.hover(
    // hover over
    function() {
        var $this = $(this);
        $this.parent().css('z-index', opts.zIndexActive);

        var size = $this.data('hoverpulse.size');
        var w = size.w, h = size.h;
        $this.stop().animate({ 
            top:  ('-'+opts.size+'px'), 
            left: ('-'+opts.size+'px'), 
            height: (h+2*opts.size)+'px', 
            width:  (w+2*opts.size)+'px' 
        }, opts.speed);
    },
    // hover out
    function() {
        var $this = $(this);
        var size = $this.data('hoverpulse.size');
        var w = size.w, h = size.h;

        $this.stop().animate({ 
            top:  0, 
            left: 0, 
            height: (h+'px'), 
            width:  (w+'px') 
        }, opts.speed, function() {
            $this.parent().css('z-index', opts.zIndexNormal);
        });
    }
);
</code></pre>

<p>在移入部份會先將包覆img的div z-index值設到100</p>

<pre><code>$this.parent().css('z-index', opts.zIndexActive);
</code></pre>

<p>然後從data取出之前放入的圖片width和height，接著用<strong>.animate()</strong>來執行放大效果</p>

<pre><code>$this.stop().animate({ 
            top:  ('-'+opts.size+'px'), 
            left: ('-'+opts.size+'px'), 
            height: (h+2*opts.size)+'px', 
            width:  (w+2*opts.size)+'px' 
        }, opts.speed);
</code></pre>

<p>這段code其實就是把你設定的size放大兩倍，並且為了有感覺從圖片中間點開始放大的效果，所以把位置top和left給予負值，等於整張圖片往左上角移動，速度是<strong>opts.speed</strong>，而圖片的position:absolute在整個plugin一開始就已經設定了</p>

<pre><code>// parent must be relatively positioned
this.parent().css({ position: 'relative' });
// pulsing element must be absolutely positioned
this.css({ position: 'absolute', top: 0, left: 0 });
</code></pre>

<p>可以看到包覆img的div是relatively，img是absolute</p>

<p>而滑鼠移開之後只是把值恢復成原來的設定</p>

<pre><code>var $this = $(this);
var size = $this.data('hoverpulse.size');
var w = size.w, h = size.h;

$this.stop().animate({ 
    top:  0, 
    left: 0, 
    height: (h+'px'), 
    width:  (w+'px') 
}, opts.speed, function() {
    $this.parent().css('z-index', opts.zIndexNormal);
});
</code></pre>

<p>將top和left歸為0，height和width恢復成原來的大小，z-index也設回預設值1</p>

<p>當然預設值在plugin的最下面可以自己修改</p>

<pre><code>$.fn.hoverpulse.defaults = {
    size:  20,
    speed: 200,
    zIndexActive: 100,
    zIndexNormal: 1
};
</code></pre>

<p>這樣plugin整個看起來就很清楚明瞭，也可以自己嘗試動手寫寫看喔！</p>

<h2>後記</h2>

<p>Aaron大大說plugin寫法有點舊，而且有點囉嗦XD，他建議我新的寫法，在此特別筆記下來</p>

<p>HTML</p>

<pre><code>&lt;img src="a.jpg" class="resize" width="250"/&gt;
</code></pre>

<p>jQuery</p>

<pre><code>var current_h = null;
var current_w = null;

$('.resize').hover(
    function(){
        current_h = $(this, 'img').height;
        current_w = $(this, 'img').width;
        $(this).stop(true, false).animate({width: (current_w * 1.3), height: (current_h * 1.3)}, 300);
    },
    function(){
        $(this).stop(true, false).animate({width: current_w + 'px', height: current_h + 'px'}, 300);
    }
);
</code></pre>

<p>不要用plugin，直接寫，至於top和left在自己加上就好，跟前面的plugin道理一樣</p>

<p>參考資料:</p>

<p><a href="http://www.malsup.com/jquery/hoverpulse/" target="_blank">hoverpulse</a></p>

<p>如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Facebook] 如何讓Page Tab的Scroll bar消失以及使用錨點?]]></title>
    <link href="http://rx836.github.com/blog/facebook-page-tab-scroll/"/>
    <updated>2012-09-19T23:53:00+08:00</updated>
    <id>http://rx836.github.com/blog/facebook-page-tab-scroll</id>
    <content type="html"><![CDATA[<p>常常會看到粉絲團裡面的頁籤活動(Page Tab)，都會出現scroll bar，老實說其實有點醜，所以這邊記錄一下怎樣讓Page Tab消失，讓你的頁籤內容有多長，整個Page Tab就有多長，另外順便記錄一下Facebook錨點的問題</p>

<!--more-->


<p>要如何讓Facebook不再出現scroll bar</p>

<p><img src="https://lh5.googleusercontent.com/-UTpcRBt6434/UFntIvLIR-I/AAAAAAAABhU/QxBuOx2nspc/s803/1.jpg" width="800px"  /></p>

<p>這是某個粉絲團裡面的頁籤活動，可以看到有一個scroll bar在右側，消失的方法就是在body裡面加上overflow</p>

<pre><code>&lt;body style="overflow:hidden"&gt;
</code></pre>

<p>但這樣其實有個問題，就是scroll bar雖然消失了，但Page Tab被切到了，也就是說下半部的內容會顯示不出來，所以要在加上JavaScript的code上去</p>

<pre><code>var _app_id = 'xxxx';
var _api_key = '';
//初始化
FB.init({
    appId: _app_id,
    status: true, // check login status
    cookie: true, // enable cookies to allow the server to access the session
    xfbml: true, // parse XFBML        
    oauth: true // enable OAuth 2.0
});
</code></pre>

<p>一般來說這是初始化Facebook的JavaScript SDK，緊接著在後面加上</p>

<pre><code>    FB.Canvas.setAutoGrow();
</code></pre>

<p>這樣就可以讓你Page Tab可以整個顯示出來，而且也不會再出現scroll bar，要注意的是，以前會用<strong>FB.Canvas.setAutoResize</strong>，不過現在不要再用這個語法囉，因為Facebook已經要刪除，不再支援這種寫法</p>

<h2>Facebook 錨點無效</h2>

<p>我們平常寫網頁，我們會這樣設錨點</p>

<pre><code>&lt;a name="h"&gt;我是錨點&lt;/a&gt;
</code></pre>

<p>接著會下這樣的超連結</p>

<pre><code>&lt;a href="#h"&gt;點我跳到我是錨點&lt;/a&gt;
</code></pre>

<p>這樣就可以到達網頁設定好的錨點，但是這樣在Facebook是無效的！因為Facebook Page Tab其實是一個iframe，所以Facebook自己有出SDK可以控制scroll的移動，寫法如下</p>

<pre><code>FB.Canvas.scrollTo(0, 0);
</code></pre>

<p>等於說你可以寫click某個HTML讓他移動到你設定好的座標位置，例如</p>

<pre><code>$('a').click(function(){
    FB.Canvas.scrollTo(0, 300);
});
</code></pre>

<p>這樣意思代表點擊a移動到Page Tab坐標(0, 300)的地方，這樣就可以取代錨點失效的問題了</p>

<p>參考資料:</p>

<p><a href="https://developers.facebook.com/docs/reference/javascript/FB.Canvas.scrollTo/" target="_blank">FB.Canvas.scrollTo</a></p>

<p><a href="https://developers.facebook.com/docs/reference/javascript/FB.Canvas.setAutoGrow/" target="_blank">FB.Canvas.setAutoGrow</a></p>

<p>如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[學習筆記] 全世界最會說故事的平台-TED]]></title>
    <link href="http://rx836.github.com/blog/introduce-ted/"/>
    <updated>2012-09-15T16:00:00+08:00</updated>
    <id>http://rx836.github.com/blog/introduce-ted</id>
    <content type="html"><![CDATA[<p>如果這是人生最後的十八分鐘，我想講什麼？這是去年受邀擔任TEDxTaipei講者-倒立先生黃明正，為了克服緊張，問自己的問題，同時也是為了講一個清楚重大的人生經驗，所需要準備的心境</p>

<!--more-->


<p><a href="http://www.ted.com/" target="_blank">TED</a>是在1984年於美國矽谷成立，是科技(technology)、娛樂(entertainment)、設計(design)的簡稱，也是一個非營利組織，每年會舉辦一次會議，一開始原本是一個私人聚會，由『資訊建築』的先驅沃曼(Richard Wurman)發想邀請最頂尖的人物來說他們的創意故事，後來TED的影響力持續發酵到今日，已經成為每年一場四天三夜的論壇</p>

<p>因為在商週上看到關於TED的敘述，裡面有提到說故事的方式，因為最近剛好準備一些快講資料，所以這邊做一些心得記錄</p>

<h2>在舞台上做好自己</h2>

<p>要用自己的風格表達，並且熱情的和大家分享自己的故事、工作和心得，要盡量用自己的角度去分享故事，例如『我經歷過最酷的事情』，而不是『我所知道最酷的事情』，像其中一名講者泰勒(Jill Bolte Taylor)所分享的『我腦內的兩個世界』，就是非常好的例子，講者用本身所經歷的中風經驗，來分享對於這個世界的感受，甚至為了讓觀眾更了解腦的構造，還當場秀出真的人腦！</p>

<object width="526" height="374">
<param name="movie" value="http://video.ted.com/assets/player/swf/EmbedPlayer.swf"></param>
<param name="allowFullScreen" value="true" />
<param name="allowScriptAccess" value="always"/>
<param name="wmode" value="transparent"></param>
<param name="bgColor" value="#ffffff"></param>
<param name="flashvars" value="vu=http://video.ted.com/talk/stream/2008/Blank/JillBolteTaylor_2008-320k.mp4&su=http://images.ted.com/images/ted/tedindex/embed-posters/JillBolteTaylor-2008.embed_thumbnail.jpg&vw=512&vh=288&ap=0&ti=229&lang=en&introDuration=15330&adDuration=4000&postAdDuration=830&adKeys=talk=jill_bolte_taylor_s_powerful_stroke_of_insight;year=2008;theme=how_the_mind_works;theme=medicine_without_borders;theme=master_storytellers;event=TED2008;tag=biology;tag=brain;tag=consciousness;tag=global+issues;tag=illness;tag=science;&preAdTag=tconf.ted/embed;tile=1;sz=512x288;" />
<embed src="http://video.ted.com/assets/player/swf/EmbedPlayer.swf" pluginspace="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" wmode="transparent" bgColor="#ffffff" width="526" height="374" allowFullScreen="true" allowScriptAccess="always" flashvars="vu=http://video.ted.com/talk/stream/2008/Blank/JillBolteTaylor_2008-320k.mp4&su=http://images.ted.com/images/ted/tedindex/embed-posters/JillBolteTaylor-2008.embed_thumbnail.jpg&vw=512&vh=288&ap=0&ti=229&lang=en&introDuration=15330&adDuration=4000&postAdDuration=830&adKeys=talk=jill_bolte_taylor_s_powerful_stroke_of_insight;year=2008;theme=how_the_mind_works;theme=medicine_without_borders;theme=master_storytellers;event=TED2008;tag=biology;tag=brain;tag=consciousness;tag=global+issues;tag=illness;tag=science;&preAdTag=tconf.ted/embed;tile=1;sz=512x288;"></embed>
</object>


<p>(可以選擇中文字幕)</p>

<p>如此的震撼讓人印象不深刻都很難</p>

<h2>當作人生最後十八分鐘</h2>

<p>將演講想成你的人生剩下十八分鐘，你會怎麼去表達一個人生經驗？重點不是表達從小到大的精華故事，而是怎麼去分享具有意義的人生體驗</p>

<h2>用上台動機取代緊張</h2>

<p>我相信每個人對於上台分享，不管是第一次還是經驗豐富者，都還是會有緊張時刻，把注意力集中在演講動機，或是釐清演講目的，比將注意力其中在令人恐懼的緊張來的好</p>

<h2>畫面比口說更夠力</h2>

<p>讓大家親身感受吧！例如比爾‧蓋茲為了讓大家重視瘧疾，當場秀出了瘧蚊的罐子擺在大家面前，英國名廚奧利佛(Jamie Oliver)為了讓聽眾注意兒童的糖分攝取，將一車的糖推倒在大家面前</p>

<object width="526" height="374"><param name="movie" value="http://video.ted.com/assets/player/swf/EmbedPlayer.swf"></param><param name="allowFullScreen" value="true" /><param name="allowScriptAccess" value="always"/><param name="wmode" value="transparent"></param><param name="bgColor" value="#ffffff"></param><param name="flashvars" value="vu=http://video.ted.com/talk/stream/2010/Blank/JamieOliver_2010-320k.mp4&su=http://images.ted.com/images/ted/tedindex/embed-posters/JamieOliver-2010.embed_thumbnail.jpg&vw=512&vh=288&ap=0&ti=765&lang=en&introDuration=15330&adDuration=4000&postAdDuration=830&adKeys=talk=jamie_oliver;year=2010;theme=food_matters;theme=ted_prize_winners;theme=listening_to_teachers;event=TED2010;tag=business;tag=education;tag=food;tag=global+issues;tag=health;&preAdTag=tconf.ted/embed;tile=1;sz=512x288;" /><embed src="http://video.ted.com/assets/player/swf/EmbedPlayer.swf" pluginspace="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" wmode="transparent" bgColor="#ffffff" width="526" height="374" allowFullScreen="true" allowScriptAccess="always" flashvars="vu=http://video.ted.com/talk/stream/2010/Blank/JamieOliver_2010-320k.mp4&su=http://images.ted.com/images/ted/tedindex/embed-posters/JamieOliver-2010.embed_thumbnail.jpg&vw=512&vh=288&ap=0&ti=765&lang=en&introDuration=15330&adDuration=4000&postAdDuration=830&adKeys=talk=jamie_oliver;year=2010;theme=food_matters;theme=ted_prize_winners;theme=listening_to_teachers;event=TED2010;tag=business;tag=education;tag=food;tag=global+issues;tag=health;&preAdTag=tconf.ted/embed;tile=1;sz=512x288;"></embed></object>


<p>影片13:20秒開始，可以選擇中文字幕</p>

<h2>說理占10%就好</h2>

<p>說故事都有目的，有些是拿來激勵人，有些是警告某些事物，但不管如何，90%的時間都是拿來說故事，最後10%才是來說道理，做結論</p>

<p>我個人認為TED是個很棒的組織，因為他是個跨領域的論壇，集合來自不同背景的人意見，來激發每個人的想法，和衝擊你的思維，很慶幸的是，在2009年TED開放品牌授權，讓全世界有心有能力的人用TED的模式去經營TED大會，而這種TED授權的就叫做TEDx。以城市為名，用在地的故事，而台灣也有一個TED就叫做<a href="http://tedxtaipei.com/" target="_blank">TEDx Taipei</a></p>

<p>文章最後，我放上我個人最喜歡的TED演講片段『定時攝影下冰河急遽流失的證據』(Time-lapse proof of extreme ice loss)，是一個叫做James Balog的攝影家，用定時攝影的方式來呈現地球暖化的證據，影片內容讓我相當的震撼，因為那些場景是我一輩子沒看過也無法想像的畫面</p>

<object width="526" height="374"><param name="movie" value="http://video.ted.com/assets/player/swf/EmbedPlayer.swf"></param><param name="allowFullScreen" value="true" /><param name="allowScriptAccess" value="always"/><param name="wmode" value="transparent"></param><param name="bgColor" value="#ffffff"></param><param name="flashvars" value="vu=http://video.ted.com/talk/stream/2009G/Blank/JamesBalog_2009G-320k.mp4&su=http://images.ted.com/images/ted/tedindex/embed-posters/JamesBalog-2009G.embed_thumbnail.jpg&vw=512&vh=288&ap=0&ti=628&lang=en&introDuration=15330&adDuration=4000&postAdDuration=830&adKeys=talk=james_balog_time_lapse_proof_of_extreme_ice_loss;year=2009;theme=a_greener_future;theme=media_that_matters;theme=to_boldly_go;event=TEDGlobal+2009;tag=climate+change;tag=global+issues;tag=photography;tag=science;tag=technology;&preAdTag=tconf.ted/embed;tile=1;sz=512x288;" /><embed src="http://video.ted.com/assets/player/swf/EmbedPlayer.swf" pluginspace="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" wmode="transparent" bgColor="#ffffff" width="526" height="374" allowFullScreen="true" allowScriptAccess="always" flashvars="vu=http://video.ted.com/talk/stream/2009G/Blank/JamesBalog_2009G-320k.mp4&su=http://images.ted.com/images/ted/tedindex/embed-posters/JamesBalog-2009G.embed_thumbnail.jpg&vw=512&vh=288&ap=0&ti=628&lang=en&introDuration=15330&adDuration=4000&postAdDuration=830&adKeys=talk=james_balog_time_lapse_proof_of_extreme_ice_loss;year=2009;theme=a_greener_future;theme=media_that_matters;theme=to_boldly_go;event=TEDGlobal+2009;tag=climate+change;tag=global+issues;tag=photography;tag=science;tag=technology;&preAdTag=tconf.ted/embed;tile=1;sz=512x288;"></embed></object>


<p>參考資料:</p>

<p>1295期商業周刊</p>

<p><a href="http://www.ted.com/" target="_blank">TED</a></p>

<p><a href="http://tedxtaipei.com/" target="_blank">TEDxTaipei</a></p>

<p><a href="https://www.facebook.com/TEDxTaipei" target="_blank">TEDxTaipei Facebook粉絲團</a></p>

<p>如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[CSS] 用了就無法回頭的Compass]]></title>
    <link href="http://rx836.github.com/blog/introduce-compass/"/>
    <updated>2012-09-14T15:24:00+08:00</updated>
    <id>http://rx836.github.com/blog/introduce-compass</id>
    <content type="html"><![CDATA[<p><a href="http://compass-style.org/" target="_blank">Compass</a>這個CSS的framework已經有一陣子了，但我始終沒有去好好了解他，印象中只知道他可以很快的寫出CSS，但可以多快其實我一直無法感受，再加上還要用Ruby的環境，感覺學習曲線就很高，也覺得現在CSS寫的也好好的，就沒多加注意，直到&#8230;</p>

<!--more-->


<p>我在看<a href="http://webdesign.tutsplus.com/tutorials/htmlcss-tutorials/css-sprite-sheets-best-practices-tools-and-helpful-applications/">CSS Sprite Sheets: Best Practices, Tools and Helpful Applications</a>這篇文章時，文章尾巴的Tools to Help又提到了Compass，說可以自動生成Sprite，讓我好奇心作祟的打算真正看一下什麼是Compass</p>

<p>沒想到，一用之下，驚為天人！我想這是很多數剛開始接觸Compass的人共同心聲吧，直接來看看怎麼使用吧！</p>

<p>首先要先把Ruby的環境安裝起來，不過因為我是用windows，所以要特別下載<a href="http://www.ruby-lang.org/zh_TW/downloads/" target="_blank">for windows</a>用的，安裝好了以後你可以到Ruby的資料夾底下有個Start Command Prompt with Ruby，開啟命令列，接著安裝Compass</p>

<pre><code>gem update --system #先更新gem
gem install compass #安裝Compass
</code></pre>

<p>安裝完Compass以後，Sass也會自動安裝起來，這邊要稍微提一下甚麼是<a href="http://sass-lang.com/" target="_blank">Sass</a></p>

<p><strong>Sass(Syntactically Awesome Stylesheets)</strong>其實就是一個拿來寫CSS樣式表的程式語言，然而還有一個因為CSS3而延伸的語法叫做Scss，兩個寫法有些微的差異，同樣的效果，寫法如下</p>

<p>Scss:</p>

<pre><code>table.hl {
  margin: 2em 0;
  td.ln {
    text-align: right;
  }
}
</code></pre>

<p>Sass:</p>

<pre><code>table.hl
  margin: 2em 0
  td.ln
    text-align: right
</code></pre>

<p>可以看到Scss的寫法比較像我們一般看到的CSS，而Sass強調的是更精簡、快速的寫法，所以是利用縮排來呈現</p>

<p>Sass/Scss的特點有可以利用變數，巢狀或是函式和繼承等，至於用法可以參考<a href="http://sass-lang.com/" target="_blank">官網</a>的首頁有簡單的範例，這邊就不提太多</p>

<p>回到Compass，其實Compass也就是一個Sass的Framework，已經把原本要寫很多次的樣式都打包好，剛剛講到安裝完Compass以後現在就來開始使用他</p>

<p>首先建立一個Compass專案</p>

<pre><code>compass creat mycompass
</code></pre>

<p>執行成功以後，會看到底下有三個資料夾，一個檔案</p>

<pre><code>.sass-cache //快取檔案
sass // sass檔/scss檔
stylesheets //css檔
config.rb //設定檔
</code></pre>

<p>接著你就可以開始編寫Sass檔，除了剛剛說的Sass/Scss的寫法以外，還可以利用Compass強大的功能，例如要做一個reset檔案首先新建一個reset.scss，然後在裡面直接加上以下這段</p>

<pre><code>@import "compass/reset";
</code></pre>

<p>接著可以用compile的方式</p>

<pre><code>compass compile [資料夾名稱或路徑]
</code></pre>

<p>或是用監控的方式</p>

<pre><code>compass watch [資料夾名稱或路徑]
</code></pre>

<p>我比較喜歡用watch方式，因為這樣改完直接存檔就會自動compile，reset.scss compile以後，就會看到stylesheets資料夾底下就出現reset.css的檔案了！</p>

<p>其他還有像文章開頭提到的自動生成Sprite，到底有多神奇，來看看怎麼做</p>

<p>首先準備兩張圖，一張是facebook的icon，另一張是plurk的icon，如下圖</p>

<p><img src="https://lh6.googleusercontent.com/-fwPpZzFYl9I/UFL6CnNIZ1I/AAAAAAAABgE/t7FFyDSX-UU/s243/1.jpg" /></p>

<p>接著這邊就是要注意的地方了，一開始我將圖放到icons的資料夾裡面，並且跟sass和stylesheets資料夾都擺在同一層</p>

<p><img src="https://lh5.googleusercontent.com/-0AQioXIX4X8/UFL6qh2A2SI/AAAAAAAABgM/cuUTLF7UcOs/s660/2.jpg" /></p>

<p>接著我就建一個sprite.scss的檔案並且在裡面加上</p>

<pre><code>@import "icons/*.png";
@include all-icons-sprites;  
</code></pre>

<p>可是後來發現怎麼compile都沒有用，一直出現以下錯誤訊息</p>

<pre><code>No files were found in the load path matching "icons/*.png". Your current load
paths
</code></pre>

<p>後來我才發現原來在設定檔config.rb裡面有指定圖檔的擺放位置</p>

<pre><code>http_path = "/"
css_dir = "stylesheets"
sass_dir = "sass"
images_dir = "images" //&lt;--指定圖檔位置
javascripts_dir = "javascripts"
</code></pre>

<p>原來是要把icons的資料夾擺在images底下才行，重新指定好位置以後，再一次的compile，就會發現，Compass已經合好圖了！而且連CSS都寫好了！</p>

<pre><code>.icons-sprite, .icons-facebook, .icons-plurk {
  background: url('/images/icons-s78250ef0c5.png') no-repeat;
}

.icons-facebook {
  background-position: 0 0;
}

.icons-plurk {
  background-position: 0 -48px;
}
</code></pre>

<p>太強大了！難怪很多人用了都回不去了，因為小弟我也是剛學沒多久，所以還有很多更強大的功能就要請各位自己去發掘了</p>

<p>參考資料:</p>

<p><a href="http://blog.visioncan.com/2011/compass-sass-your-css/" target="_blank">用強大的compass+sass寫css</a></p>

<p><a href="http://kw0006667.wordpress.com/compass-%E2%80%93-%E4%BD%BF%E7%94%A8-ruby-compass-on-windows/" target="_blank">Compass – 使用 Ruby + compass on Windows</a></p>

<p>如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[jQuery] 快樂的Happy.js]]></title>
    <link href="http://rx836.github.com/blog/jquery-happyjs/"/>
    <updated>2012-09-13T15:45:00+08:00</updated>
    <id>http://rx836.github.com/blog/jquery-happyjs</id>
    <content type="html"><![CDATA[<p>今天看到有人分享<a href="http://happyjs.com/" target="_blank">Happy.js</a>，因為名字的關係引起了我的興趣，好奇的想說用這個plugin是不是寫起來很快樂，所以決定來玩一下</p>

<!--more-->


<p>事實證明&#8230;，其實並沒有特別Happy，當然這只是取名字而已XD，Happy.js其實是一套驗證表單的plugin，官方網站強調的是它相當的輕量且容易擴充，而實際檔案大概也只有3kb左右，用法也相當的簡單</p>

<p>首先一樣是引入js部分，分別是jQuery和happy.js還有happy.methods.js，可以直接下載<a href="http://github.com/andyet/Happy.js/zipball/master" target="_blank">範例檔</a></p>

<pre><code>&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;script src="happy.js"&gt;&lt;/script&gt;
&lt;script src="happy.methods.js"&gt;&lt;/script&gt;
</code></pre>

<p>happy.js是主程式，happy.methods.js是一些擴充的驗證方法</p>

<p>接著是HTML部分</p>

<pre><code>&lt;form id="awesomeForm" action="/lights/camera" method="post"&gt;
  &lt;input id="yourName" type="text" name="name" /&gt;
  &lt;input id="email" type="text" name="email" class="" /&gt;
  &lt;input type="submit" value="go" /&gt;
&lt;/form&gt;
</code></pre>

<p>再來就是js部分</p>

<pre><code>$('#awesomeForm').isHappy({
    fields: {
      '#yourName': {
        required: true,
        message: '忘記填姓名囉！'
      },
      '#email': {
        required: true,
        message: '忘記填Email囉！',
        test: happy.email 
      }
    }
  });
</code></pre>

<p>其實蠻好理解的，主要就是fields裡面要設置需要驗證的欄位，例如像#yourName和#email的input，然後message就是看要出現甚麼錯誤訊息，test這個屬性就是指擴充的驗證方法部分，就是寫在剛剛引用的happy.methods.js裡面，所以你可以除了要求不能空白以外，還可以進一步要求Email的格式</p>

<p>而出現的錯誤訊息就如同下面所示</p>

<pre><code>&lt;span id=​"textInput1_unhappy" class=​"unhappyMessage"&gt;​忘記填Email囉！​&lt;/span&gt;
</code></pre>

<p>這個span會在發生錯誤時添加，而你會看到類別就叫<strong>unhappyMessage</strong>，作者就說他是認真的，不是開玩笑的，因為這真的不是個很開心的訊息 XD</p>

<p>所以你可以添加一些unhappyMessage的CSS樣式讓錯誤訊息更顯著</p>

<p>當然這不一定只能用在表單部分，如果有時候不是一個FORM而是用div所拼湊的表單，要做AJAX的效果，就可以把預設的submitButton改掉，如下所示</p>

<pre><code>$('#awesomeForm').isHappy({
    fields: {
      '#yourName': {
        required: true,
        message: '忘記填姓名囉！'
      },
      '#email': {
        required: true,
        message: '忘記填Email囉！',
        test: happy.email 
      }
    },
    submitButton:'#subBtn' //自己制定的submitButton
});
</code></pre>

<p>不過我後來發現一個小問題，如果是制定的話，再驗證完後要觸發AJAX卻不知道要寫哪裡，所以我後來自己稍微修改了一下原始碼，把要加到AJAX的部分寫在happy.js裡面</p>

<pre><code>function handleSubmit() {
  var errors = false, i, l;
  for (i = 0, l = fields.length; i &lt; l; i += 1) {
    if (!fields[i].testValid(true)) {
      errors = true;
    }
  }
  if (errors) {
    if (isFunction(config.unHappy)) config.unHappy();
    return false;
  } else if (config.testMode) {
    if (window.console) console.warn('would have submitted');
    return false;
  } else {          //這個else是後來自己加上去的
                    //代表通過驗證以後要做的事情，把AJAX的code寫在這裡
  }                 //
}
</code></pre>

<p>當然也可以把這個修改寫得更好看一些，但我用最快的方式來補充這個AJAX的需求</p>

<p>如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Facebook] Facebook Developer World HACK 2012]]></title>
    <link href="http://rx836.github.com/blog/facebook-world-hack/"/>
    <updated>2012-09-12T23:42:00+08:00</updated>
    <id>http://rx836.github.com/blog/facebook-world-hack</id>
    <content type="html"><![CDATA[<p>因為本身的工作是開發Facebook相關社群APP，所以長期下來有在follow<a href="https://developers.facebook.com/blog/" target="_blank">Facebook Developer Blog</a>，看到<a href="https://developers.facebook.com/blog/post/2012/08/08/facebook-developer-world-hack-2012/" target="_blank">Facebook Developer World HACK 2012</a>原本以為應該跟以前一樣，只有幾個大城市才有舉辦，沒想到仔細一看，竟然有Taipei Taiwan！著實嚇了我一大跳，想當然爾是趕緊報名參加</p>

<!--more-->


<p>入場費蠻便宜的大概七百多塊，以下是我記錄的一些相片，因為是用手機拍的畫質不是很好多見諒</p>

<p>會場是位於信義區裡的克緹國際總部大樓，因為我是第一次參加這種HACK活動，所以我是事後才知道這大概是目前所有HACK活動場地最高級的一次，光看這個view就知道多棒</p>

<p><img src="https://lh6.googleusercontent.com/-v_dRNzia9Lk/UFC9Tzbpx-I/AAAAAAAABe0/V-eKCYRGiNY/s788/IMG_2992.JPG" width="800px" /></p>

<p>整個會場都是落地窗玻璃，所以一整天參加活動甚至寫code都感到非常的舒服，尤其是下午的時候夕陽真的非常非常的漂亮</p>

<p><img src="https://lh3.googleusercontent.com/-SchSdUumDww/UFDCG6u60OI/AAAAAAAABfc/oHuqMauFcQU/s788/IMG_2985.JPG" width="800px" /></p>

<p>這是在進去會場之前的報到，其實這是個類似天橋的地方，天橋旁有個空地可以看到整個信義區的view，我想跨年煙火在這看應該超HIGH的</p>

<p><img src="https://lh5.googleusercontent.com/-PkjKD0yXXbw/UFC7Oui1G4I/AAAAAAAABeE/8cGsvgtZSP4/s788/IMG_2989.JPG" width="800px" /></p>

<p>進去後可以看到活動的大LOGO，是用中華民國的國旗所拼成的，可見Facebook多麼用心</p>

<p><img src="https://lh6.googleusercontent.com/-nX29nNMaBBA/UFC7Qiw-HVI/AAAAAAAABeM/XDv-YGQnG1k/s788/IMG_2991.JPG" width="800px" /></p>

<p>當然還有領到一些東西，例如專屬徽章、T桖、還有貼紙，左邊那台是口譯機，Facebook相當貼心的請了同步翻譯人員，讓英文較不佳的人也可以知道講者在講什麼，而且是同步翻譯喔！</p>

<p><img src="https://lh6.googleusercontent.com/-Xk3LqAjFKGg/UFC7iRksdEI/AAAAAAAABec/tX_5-Qu3fm8/s903/IMG_2994.JPG" width="800px" /></p>

<p>實體版的憤怒鳥XD，code寫累了可以來憤怒一下</p>

<p><img src="https://lh6.googleusercontent.com/-Zb7ubBYygng/UFC7ZbaPDdI/AAAAAAAABeU/VdE3fIhCaTg/s788/IMG_2993.JPG" width="800px" /></p>

<p>吃不完的零食和喝不完的飲料是必備的，啤酒當然也是少不了</p>

<p><img src="https://lh4.googleusercontent.com/-KdhIaeQwmZE/UFC9Prk4u8I/AAAAAAAABek/l-ZN1zb3XHc/s788/IMG_2998.JPG" width="800px" /></p>

<p>上午主要focus在Graph API部分，告訴大家怎麼利用Facebook做一些第三方的APP，也分享一些範例，但其實我蠻失望的，因為我原本會以為可以知道一些我從官方文件或Blog學不到的東西，不過後來想想也是，這本來就不是技術發表會，這是來推廣Facebook的Open Graph</p>

<p><img src="https://lh3.googleusercontent.com/-u-licm0d5hg/UFC9XRWECvI/AAAAAAAABe8/Z7XsaVUYquE/s788/IMG_3003.JPG" /></p>

<p>然後Berlin也是跟我們台灣一樣11號舉行，但因為時差的關係我們進行到下午他們才正要開始，所以還有視訊同步Say Hello，還聽到有人開玩笑的大喊Hello World！ XDD</p>

<p><img src="https://lh4.googleusercontent.com/-uz0E3PyUkgQ/UFC9R3twXkI/AAAAAAAABes/mWRevtEOLC4/s903/IMG_3001.JPG" /></p>

<p>因為下午時間就是開始寫code，但我大概接近中午的時候就開始寫了，因為我覺得我時間一定不夠，所以我一有想法就趕快開始動手了，順便簡單的分享一下我的心路歷程</p>

<p>第一次參加這種HACK活動，其實本來沒有什麼頭緒，甚至早上還都只是認為來這邊拜大神，吃喝一下就滿足了，可是後來在認識的前輩鼓勵之下，我也想來挑戰一下自己的極限，看看在這種氛圍底下我可以發揮到什麼程度，所以心一橫，我就決定來真的，好好拼一下</p>

<p>因為工作關係平常本來就是FB重度使用者，所以在發想要做啥這個階段，對我來說不是很困難，不過以後參加別的HACK就可能要先想好做什麼了，因為發想其實應該是最困難的，我想做的是因為我平常出去玩很喜歡用手機拍照上傳到FB，可是如果回家要寫BLOG的話，整理照片那些又很麻煩，所以我決定做一個簡單的工具，可以抓取妳出去玩的時候拍照上傳的照片，加上說明文字，並且幫你拼湊成HTML碼然後丟到HTML編輯器裡面，讓你按幾下就可以有一個BLOG的基本範本存在，而就不用煩惱BLOG要怎麼開頭</p>

<p>定好方向以後，就開始查官方文件，並且邊做邊調整細微的功能，因為是一人團隊的關係，所以我在ICON方面就用了bootstrap，省去了很多美工，Server端的code我也都沒寫，純粹都是用js來完成這個網站，結果一進入狀態以後，時間就過超快的，一下就天黑了</p>

<p><img src="https://lh3.googleusercontent.com/-858tykFHwq0/UFC9XtZTnOI/AAAAAAAABfA/j-URBx8q624/s788/IMG_3005.JPG" width="800px" /></p>

<p>到了吃晚飯時間，我起來走了一下，發現還是很多人在拼呀</p>

<p>後來因為我沒注意到要上去DEMO的人要去網站註冊，所以我錯失了上台分享的機會，這讓我覺得蠻可惜的，雖然做的不是很好，但有一個展現自己的機會應該要好好把握</p>

<p><img src="https://lh6.googleusercontent.com/-cJGtuvW_5ss/UFC9YhdCjcI/AAAAAAAABfE/dNz5OY_6rKo/s788/IMG_3007.JPG" width="800px" /></p>

<p>最後總共有30幾隊報名，大家真的都很厲害，而且評分有分好幾種得獎名額，例如最佳mobile或是最佳game，而且只要得獎都有IPAD可以拿，超大手筆的！不過只有第一名有機會去矽谷再跟全世界的人比一次</p>

<p>這是我人生的第一個HACK，真的收穫很多，也大開眼界，期許自己有一天能在上舞台分享我的東西，但在那之前可能要好好的加強自己的能力才行:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[JavaScript] 建立物件的第三招-自訂建構式函式]]></title>
    <link href="http://rx836.github.com/blog/javascript-custom-function/"/>
    <updated>2012-09-11T00:43:00+08:00</updated>
    <id>http://rx836.github.com/blog/javascript-custom-function</id>
    <content type="html"><![CDATA[<p>在前面一篇文章<a href="http://blog.rx836.tw/blog/javascript-patterns-1/" target="_blank">[JavaScript] 談物件, 實字與建構式</a>，裡面有講到關於物件的建立，不過礙於篇幅，只談到<strong>實字模式(literal patterns)</strong>和<strong>建構式函式(constructor functions)</strong>，但其實還有一個建立物件的方法，那就是<strong>自訂建構式函式</strong></p>

<!--more-->


<p>用自定義的建構式函式來建立物件，直接用範例來說明</p>

<pre><code>var kitty = new Cat('Kitty');
var kitty.say(); // "kitty:喵~"
</code></pre>

<p>跟之前的建構式不同的地方在於，之前是用內建的new Object()，這裡我們是用new Cat()，這種模式很像Java使用一個class Cat來建立物件，語法非常的相似，但其實JavaScript並沒有class，Cat只是一個函式</p>

<p>Cat的建構式定義如下</p>

<pre><code>var Cat = function (name){
    this.name = name;
    this.say = function(){
        return name+":喵~";
    }
};
</code></pre>

<p>但其實真正背後運作的方式是這樣，註解為JavaScript實際上還有做一些我們看不到的事情</p>

<pre><code>var Cat = function (name){

    //建立物件實字, 一個空物件
    //var this = {};

    //接著替this加入屬性和方法
    this.name = name;
    this.say = function(){
        return name+":喵~";
    }

    //最後return this
};
</code></pre>

<p>整個的流程首先會建立一個空物件，參考至this變數，藉由this的參考，將屬性和方法加入到此物件(this)，最後再將物件隱含的回傳出去(這邊要注意的是，回傳的情況是假設<strong>沒有其他物件被明確的指定回傳</strong>，後面則會提到)</p>

<p>範例中say()是直接加入至this，不過真正實務中，當你每次new Cat()的時候，就會建立一個新函式到記憶體裡面，很明顯的會浪費記憶體效能，所以最好的方式是加入到原型(prototype)中</p>

<pre><code>//只可以重複利用，都應該放進原型裡面
Cat.prototype.say = function(){
    return this.name+":喵~";
};
</code></pre>

<p>不過這裡有個問題，假如忘記加上new會發生甚麼事情？其實是不會有語法或執行上的錯誤，但卻會導致非預期的錯誤發生，因為沒有加new以後，所有的this都指向全域物件去了！(例如window)</p>

<pre><code>function cat(){
    this.name = "kitty";
}

var kitty = new Cat();
console.log(typeof kitty); // "object" 為物件
console.log(kitty.name);

var kitty2 = Cat();
console.log(typeof kitty2); // undefined 忘了new, 不會有物件this回傳, 變成全域
console.log(window.name); //全域變數
</code></pre>

<p>不過為了預防這種情況發生，可以利用以下寫法</p>

<pre><code>function cat(){

    //還是一樣會建立一個this
    //var this = {};

    var _self = {};     
    _self.name = "kitty";

    //不過return被_self取代了
    return _self;
}
</code></pre>

<p>所以不管User怎麼呼叫，都一定會回傳一個物件，也就是強制new的做法</p>

<pre><code>var kitty = new Cat();  
console.log(kitty.name); // "kitty"

var kitty2 = Cat(); 
console.log(kitty2.name); // "kitty"
</code></pre>

<p>參考資料:</p>

<p><a href="http://www.books.com.tw/exep/prod/booksfile.php?item=0010538538" target="_blank">JavaScript 設計模式</a></p>

<p>如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HTML5] 淺談XMLHttpRequest Level 2]]></title>
    <link href="http://rx836.github.com/blog/javascript-xmlhttprequest-level-2/"/>
    <updated>2012-09-10T15:24:00+08:00</updated>
    <id>http://rx836.github.com/blog/javascript-xmlhttprequest-level-2</id>
    <content type="html"><![CDATA[<p>HTML5近來可說是越來越火紅，在諸多優點裡面，最讓開發者期待的就是他的標準化，讓各家瀏覽器不再是各自為王，各自為政，這對於網頁開發者來說，可以說是一大利多(前提是微軟真正的統一?不過看IE10頗有那個味道)，今天要來看的是新的標準化-<strong>XMLHttpReuest Level 2</strong></p>

<!--more-->


<p>XMLHttpRequest其實是一個物件，也是AJAX的核心，微軟的IE5是最早支援這個物件，後來在Google大量應用之下，讓AJAX這項技術開始爆紅，也讓各家瀏覽器開始相繼支援，不過因為XMLHttpRequest(底下簡稱XHR)並不是標準，所以導致實做上必須小心各家瀏覽器的差異</p>

<p>早些時候我們要寫AJAX我們可能會這樣寫</p>

<pre><code>var xhr;

// 依照不同的瀏覽器，取得XMLHttpRequest物件
function CreateAJAX() {
　if (window.ActiveXObject) {
　　try {
　　　return new ActiveXObject("Msxml2.XMLHTTP");
　　} catch (e) {
　　　try {
　　　　return new ActiveXObject("Microsoft.XMLHTTP");
　　　} catch (e2) {
　　　　return null;
　　　}
　　}
　} else if (window.XMLHttpRequest) {
　　return new XMLHttpRequest();
　} else {
　　return null;
　}
}

//回傳資料
function onReponseData () {
　if (xhr.readyState == 4) {
　　if (xhr.status == 200) {

      //do something
      //console.log(xhr.responseText);

　　} else {
　　　alert ("伺服器處理錯誤");
　　}
　} 
}

//送出資料
function ajaxSendRequest(uri) {
  xhr = CreateAJAX() ;
　if (!xhr) {
　　alert ('瀏覽器不支援！');
　　return 0;
　}

  xhr.onreadystatechange = onReponseData;
  xhr.open ("GET", uri, true);
  xhr.send ("");
}
</code></pre>

<p>HTML部分</p>

<pre><code>&lt;input type="button" value="執行" onclick="ajaxSendRequest('index.php')" &gt;
</code></pre>

<p>大概提一下幾個重要屬性</p>

<p>1.xhr.readyState:XMLHttpRequest狀態，等於4表示數據已經接收完畢</p>

<p>2.xhr.status:狀態碼，200表示正常</p>

<p>3.xhr.responseText:server回應的文字數據</p>

<p>不過假如有時候要取得跨網域的API資料，受限於安全問題，會因為<a href="http://en.wikipedia.org/wiki/Same_origin_policy" target="_blank">同源限制(Same Origin Policy)</a>的關係而受阻，因此有些人可能會使用<a href="http://zh.wikipedia.org/wiki/JSONP" target="_blank">JSONP</a>來解決此類問題，不過未來在新的標準XMLHttpRequest Level 2會有解決方法</p>

<p>新的XHR的特點如下</p>

<p>1.可以設置HTTP請求時限</p>

<p>2.可以使用FormData管理表單數據</p>

<p>3.可以上傳檔案</p>

<p>4.可以跨網域請求</p>

<p>5.可以獲得server端二進制數據</p>

<p>6.可以獲得數據傳輸的進度訊息</p>

<p>這裡礙於篇幅只介紹請求時限和跨網域請求部分</p>

<h2>Setting and handling timeouts</h2>

<p>有時候我們在做AJAX時，常會無法預知會花多少時間，如果網路速度一慢，User可能會等上好一段時間，甚至會認為網站當掉而離去，這其實不是個好的User Experience</p>

<p>所以在新的標準裡面我們可以這樣做</p>

<pre><code>xhr.timeout = 3000;
</code></pre>

<p>整個範例程式大概如下</p>

<pre><code>function makeRequest() {
  var url = 'index.php';
  var onLoadHandler = function(event){
     // Parse the JSON and build a list.
  }
  var onTimeOutHandler = function(event){
    var content = document.getElementById('content'),
      p = document.createElement('p'),
      msg = document.createTextNode('Just a little bit longer!');
      p.appendChild(msg);
      content.appendChild(p);

      // Restarts the request.
      event.target.open('GET',url);

      // Optionally, set a longer timeout to override the original.
      event.target.timeout = 6000;
      event.target.send();
  }
  var xhr = new XMLHttpRequest();
  xhr.open('GET',url);
  xhr.timeout = 3000;
  xhr.onload = onLoadHandler;
  xhr.ontimeout = onTimeOutHandler;
  xhr.send();
}

makeRequest();
</code></pre>

<p>可以在index.php裡面寫延遲4秒，會發現第一次請求時，會出現<strong>Just a little bit longer!</strong>的提示文字，第二次才順利取得資料，這是因為一開始的等待時間是設定三秒，第二次是六秒</p>

<p><em>備註:Chrome和Safari尚未支援XHR timeouts，只有Oprea和Firefox還有IE10有，IE8和IE9有支援不過用的是XDomainRequest物件</em></p>

<h2>Requesting data from another domain</h2>

<p>跨網域的請求問題(Cross-origin resource sharing，簡稱CORS)，在新的XMLHttpRequest Level 2得到解答，可以針對不同的網域發出請求，但使用時除了要注意瀏覽器是否支援以外，同時Server端也要允許存取才行，而程式寫法其實跟以前一樣</p>

<p>這裡有個<a href="http://devfiles.myopera.com/articles/9482/xhr-credentials.html" target="_blank">範例</a>可以看看</p>

<p>進去範例打開開發者工具，點下Make request的按鈕，查看回應標頭</p>

<p><img src="https://lh3.googleusercontent.com/-gcWY8Edjbn8/UE2qKLxkU1I/AAAAAAAABdk/67b8otL39m8/s492/1.jpg" width="492px" /></p>

<p>會發現<strong>Access-Control-Allow-Origin</strong>的值是<strong>http://devfiles.myopera.com</strong>，也就是此範例的網域，代表只允許此網域的請求，另外<strong>access-control-allow-credentials</strong>的值為ture，表示允許跨網域請求</p>

<p>為了驗證限制某個網域的請求(Access-Control-Allow-Origin)，我自己寫了一個js去對範例中請求的server做Request</p>

<p><img src="https://lh3.googleusercontent.com/-SpkH2Sjk8Bo/UE2tLkTlrWI/AAAAAAAABd0/9sB5KOXXVE0/s707/2.jpg" width="600px" /></p>

<p>會發現雖然狀態碼為200，但實際上根本就沒有東西回應</p>

<p><em>備註:除了IE8與IE9，其他主流瀏覽器都支援此項功能</em></p>

<p>HTML5裡面實在太多可以玩了，也難怪會被譽為殺手級的技術，大家記得在使用這些功能前先查查瀏覽器支援的程度，畢竟HTML5的標準都還在制定中</p>

<p>參考資料:</p>

<p><a href="http://dev.opera.com/articles/view/xhr2/" target="_blank">Introduction to XMLHttpRequest Level 2</a></p>

<p><a href="http://dev.opera.com/articles/view/dom-access-control-using-cross-origin-resource-sharing/" target="_blank">DOM access control using cross-origin resource sharing</a></p>

<p><a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank">XMLHttpRequest Level 2 使用指南</a></p>

<p><a href="http://jck11.pixnet.net/blog/post/11624882-ajax%E6%A0%B8%E5%BF%83-xmlhttprequest%5B%E7%AD%86%E8%A8%98%5D" target="_blank">AJAX核心-XMLHttpRequest[筆記]</a></p>

<p><a href="http://caterpillar.onlyfun.net/Gossip/JavaScript/SecurityConstraint.html" target="_blank">JavaScript Essence: 安全限制</a></p>

<p><a href="http://design2u.me/blog/936/cross-domain-ajax-cross-domain-data-has-been-retrieved-jsonp" target="_blank">Cross Domain Ajax 跨網域抓取資料(JSONP)</a></p>

<p>如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[JavaScript] 談物件, 實字與建構式]]></title>
    <link href="http://rx836.github.com/blog/javascript-patterns-1/"/>
    <updated>2012-09-07T23:57:00+08:00</updated>
    <id>http://rx836.github.com/blog/javascript-patterns-1</id>
    <content type="html"><![CDATA[<p>最近在看一本書叫做<strong>JavaScript 設計模式</strong>，英文名稱是JavaScript Patterns，裡面很完整的告訴你如何寫好JavaScript，他不適合初學者看，因為他並不會從很基礎的觀念開始談起，但他卻非常適合像我這種已經知道基礎，並且正要開始往上爬的人閱讀</p>

<!--more-->


<p>所以如果有了基礎後再來看這本書，會發現收穫非常的多，就因為太多了，所以開始紀錄一些學習這本書的心得，讓我可以持續成長，而這篇要講的就是關於JavaScript『物件』這個東西</p>

<p>JavaScript是一個物件導向的語言，在程式碼裡面大部份你所看到的都可以說是物件，除了五種原始型別不是以外，分別如下</p>

<p>1.數值</p>

<p>2.字串</p>

<p>3.布林</p>

<p>4.null</p>

<p>5.undefined</p>

<p>雖然數值、字串和布林不是物件，但如果需要的話，還是可以很容易的轉換成物件來使用</p>

<p>其實當我們在做定義變數這個動作的時候，就已經接觸到物件，因為當定義變數的時候自然會成為『Activation Object』的一個屬性，另外，如果是定義全域變數，也就變成『全域物件』的屬性，更重要的是，其實變數本身也是個物件，因為他自己也擁有屬性</p>

<p>那麼講了那麼多，『物件』到底是甚麼?</p>

<p>其實物件非常的簡單，他只是一堆具名屬性的集合，或是名值對的清單，而且屬性可以是函式，這種時候我們就會叫這個函式為方法</p>

<p><img src="https://lh5.googleusercontent.com/-s9ewb766mCo/UEoidMi9O3I/AAAAAAAABa4/YsFTCbWwRpo/s416/1.jpg" width="416px" /></p>

<p>而物件建立了以後，並不是就說完全不能動他，你還是可以修改他，看是新增或移除裡面的屬性和方法都可以，再來要特別提到的是，有兩種主要的物件要認識一下</p>

<p>第一種叫做原生物件(Native)，也可以叫做內建物件，例如Array、Date或是使用者自行定義(後面會提到)</p>

<p>第二種叫做宿主物件(Host)，例如window物件和所有DOM物件</p>

<p>怎麼去分辨這兩種物件，只要看看物件能不能在瀏覽器底下執行就可以，如果只能在瀏覽器底下執行，就是Host物件，如果在非瀏覽器的地方也可以執行，那就是Native</p>

<p>什麼？你是不是覺得一直講物件物件的，是不是好像少一個東西？沒錯，JavaScript沒有Class，這對於熟悉其他語言來說是個新觀念，要試著去忘掉Class這個東西，當然，沒有了Class，也就沒有繼承，不過卻可以用其他方式來實現，最常見的就是使用原型(Prototype)，不過在往後的文章才會提到原型這個概念</p>

<h2>實字與建構式</h2>

<p>接下來我們就要開始講到如何建立物件，我們都知道物件簡單的來思考就是名值對(key-value pairs)的雜湊表，有點像是關聯式陣列(associative arrays)，而物件就包含了屬性和方法(函式)，建立物件有三種方式，不過本篇文章只會提到兩種，『自訂建構式函式』我們留到以後再說，我們先來談第一種物件實字(literal notation)</p>

<pre><code>//首先建立一個空物件
var cat = {};

//增加一個屬性
cat.name = "kitty";

//增加一個方法
cat.getName = function() {
    return cat.name;
}
</code></pre>

<p>以上就是一個物件實字模式的建立方式，除了以上的寫法，你還可以這樣寫</p>

<pre><code>var cat = {
    name : "kitty",
    getName : function() {
        return this.name;
    }
};
</code></pre>

<p>可能一開始會不太習慣這種寫法，但用久了，你會慢慢喜歡這種寫法，而外面大部份的寫法也都是用實字模式，也是比較推薦的寫法，後面也會提到為什麼推薦，而以下是物件實字的特點</p>

<p>1.將物件用大括號包起來{ }</p>

<p>2.逗號分隔每個屬性和物件，而最後可以不用逗號</p>

<p>3.用分號分隔屬性名稱和屬性值</p>

<p>4.最後別忘了要在最後面的}加上分號</p>

<p>第二個要來談的是用<strong>建構式</strong>來建立物件</p>

<p>雖然JavaScript沒有class，但他卻有一個很相似class的語法，叫做建構式函式(constructor functions)，你可以用建構式函式來建立物件，或著，使用內建的建構式(例如:Object()、Date()、String())，用法如下</p>

<pre><code>var cat = new Object();
cat.name = "kitty";
</code></pre>

<p>從以上程式碼你就可以看到，很明顯的實字程式碼比較短，建構式會比較長，而且實字比較像單純的雜湊表，不用像建構式一樣還要new一個東西出來，感覺上就來的複雜，除了這些以外，建構式其實背後還隱藏了陷阱存在，例如建立物件時有傳遞參數是動態，會導致以下情況發生</p>

<pre><code>//記住, 以下寫法都不好
//這是一個空物件
var o = new Object();
console.log(o.constructor === Object); // true

//突然變成Number
var o = new Object(1);
console.log(o.constructor === Number); // true  

//又變成字串
var o = new Object("I am a string");
console.log(o.constructor === String); // true      
</code></pre>

<p>從以上可以看出，依照參數的不同，會得到來自不同的建構式物件，造成非預期的結果產生，所以再次強調強烈建議使用<strong>實字模式</strong></p>

<p>如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[jQuery] 利用CSS3 3D Transforms做翻書效果 Flip Plugin]]></title>
    <link href="http://rx836.github.com/blog/jquery-css3-flip-plugin/"/>
    <updated>2012-09-06T12:04:00+08:00</updated>
    <id>http://rx836.github.com/blog/jquery-css3-flip-plugin</id>
    <content type="html"><![CDATA[<p>在網路上看到<a href="http://tympanus.net/Development/BookBlock/" target="_blank">翻書效果</a>感覺蠻有趣的，是利用<a href="http://www.w3schools.com/css3/css3_transitions.asp" target="_blank">CSS3 Transitions</a>和<a href="http://www.w3schools.com/css3/css3_3dtransforms.asp" target="_blank">CSS3 3D Transforms</a>的效果實現，這裡我是用<a href="http://tympanus.net/codrops/2012/09/03/bookblock-a-content-flip-plugin/" target="_blank">Flip Plugin</a></p>

<!--more-->


<p>因為已經有<a href="http://tympanus.net/Development/BookBlock/BookBlock.zip" target="_blank">範例檔</a>可以用，所以就不詳細講太多程式碼細節，首先先載入CSS和Modernizr，這兩隻檔案在範例檔裡面都有，分別在css和ja的資料夾裡面</p>

<pre><code>&lt;link rel="stylesheet" type="text/css" href="style.css" /&gt;
&lt;link rel="stylesheet" type="text/css" href="custom.css" /&gt;
&lt;script type="text/javascript" src="modernizr.custom.79639.js"&gt;&lt;/script&gt;
</code></pre>

<p>可以看到CSS其實就是一開始先將第一張照片秀出，其他都先<strong>display : none</strong>，至於modernizr是因為為了要支援IE9以下所用的，因為IE9以下不支援CSS3 Transitions和CSS3 3D Transforms，所以要利用modernizr來偵測User所用瀏覽器的支援程度來決定實現的效果</p>

<p>接下來要引用其他三支js進來</p>

<pre><code>&lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="jquerypp.custom.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="jquery.bookblock.js"&gt;&lt;/script&gt;
</code></pre>

<p>其中jquerypp.custom.js是<a href="http://jquerypp.com/" target="_blank">jQuery++</a>，擴充了<strong>swipe even</strong>這個功能，讓行動裝置用手指滑動也能觸發翻頁的效果</p>

<p>而jquery.bookblock.js就是Flip Plugin，我們可以看到裡面其中一行是</p>

<pre><code>this.support = Modernizr.csstransitions &amp;&amp; Modernizr.csstransforms3d;
</code></pre>

<p>這行就是利用Modernizr在檢查User現在的瀏覽器支援程度，所以下面就會有if判斷</p>

<pre><code>if( !this.support ) {

    this._layoutNoSupport( dir );

}
else {

    this._layout( dir );

}
</code></pre>

<p>假如不支援的話，就會用.hide() or .show()來實現換頁效果，如果有支援就會使用CSS3 3D Transforms</p>

<p>接著是基本HTML架構</p>

<pre><code>&lt;div id="bb-bookblock" class="bb-bookblock"&gt;
    &lt;div class="bb-item"&gt;
        &lt;!-- custom content --&gt;
    &lt;/div&gt;
    &lt;div class="bb-item"&gt;

    &lt;/div&gt;
    &lt;div class="bb-item"&gt;
        &lt;!-- ... --&gt;
    &lt;/div&gt;
    &lt;div class="bb-item"&gt;
        &lt;!-- ... --&gt;
    &lt;/div&gt;
    &lt;!-- ... --&gt;
&lt;/div&gt;
</code></pre>

<p><strong>bb-item</strong>就是裡面每一頁要放的內容，可以是圖片或文字</p>

<p>而js部分可以這樣寫</p>

<pre><code>$(function() {

    $( '#bb-bookblock' ).bookblock();

});
</code></pre>

<p>裡面的options設定如下</p>

<pre><code>// speed for the flip transition in ms.
speed       : 1000,

// easing for the flip transition.
easing      : 'ease-in-out',

// if set to true, both the flipping page and the sides will have an overlay to simulate shadows
shadows     : true,

// opacity value for the "shadow" on both sides (when the flipping page is over it).
// value : 0.1 - 1
shadowSides : 0.2,

// opacity value for the "shadow" on the flipping page (while it is flipping).
// value : 0.1 - 1
shadowFlip  : 0.1,

// perspective value
perspective : 1300,

// if we should show the first item after reaching the end.
circular    : false,

// if we want to specify a selector that triggers the next() function. example: '#bb-nav-next'.
nextEl      : '',

// if we want to specify a selector that triggers the prev() function.
prevEl      : '',

// callback after the flip transition.
// page is the current item's index.
// isLimit is true if the current page is the last one (or the first one).
onEndFlip   : function( page, isLimit ) { return false; },

// callback before the flip transition.
// page is the current item's index.
onBeforeFlip: function( page ) { return false; }
</code></pre>

<p>在綁定下一頁和上一頁的事件裡面，除了可以直接在<strong>bookblock()</strong>添加以外</p>

<pre><code>$( '#bb-bookblock' ).bookblock( {
    speed               : 800,
    shadowSides : 0.8,
    shadowFlip  : 0.7,
    nextEl      : '#bb-nav-next', //綁定下一頁事件
    prevEl      : '#bb-nav-prev'  //綁定上一頁事件
} )
</code></pre>

<p>也可以按照範例裡面的寫法</p>

<pre><code>var config = {
    $bookBlock: $( '#bb-bookblock' ),
    $navNext    : $( '#bb-nav-next' ),
    $navPrev    : $( '#bb-nav-prev' ),
    $navJump    : $( '#bb-nav-jump' ),
    bb              : $( '#bb-bookblock' ).bookblock( {
        speed               : 800,
        shadowSides : 0.8,
        shadowFlip  : 0.7
    } )
}

config.$navNext.on( 'click', function() {

    config.bb.next();
    return false;

} );

config.$navPrev.on( 'click', function() {

    config.bb.prev();
    return false;

} );
</code></pre>

<p>另外自己綁定click在上一頁和下一頁的DOM元素裡面</p>

<p>範例完成以後我特地拿iPone來測試swipe even的效果，還蠻頓的，而且不是很靈敏，可能有細節要再調整，也有可能是手機本身的問題，這方面就要請各位要應用在行動裝置的朋友們再多多測試了</p>

<p>參考資料:</p>

<p><a href="http://modernizr.com/docs/#features-css" target="_blank">Modernizr Documentation</a></p>

<p>如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[jQuery] jQuery scroll parallax plugin]]></title>
    <link href="http://rx836.github.com/blog/parallax-scrolling/"/>
    <updated>2012-08-31T17:55:00+08:00</updated>
    <id>http://rx836.github.com/blog/parallax-scrolling</id>
    <content type="html"><![CDATA[<p>在Facebook看到有人分享<a href="http://www.milwaukeepolicenews.com/#menu=home-page" target="_blank">這個網站</a>，有人提到是用parallax scroll來實做，因為對這個不熟悉，所以趕緊做了一些功課來看看怎麼做</p>

<!--more-->


<p>parallax scroll中文叫做<strong>視差滾動效果</strong>，意思就是指讓多層背景以不同的速度移動，形成立體的景深效果，使User有豐富的視覺體驗，像<a href="http://www.nikebetterworld.com/" target="_blank">Nike</a>一直對這方面運用的相當好，還有<a href="http://www.hksilicon.com/kb/articles/57516/30Parallax-Scrolling" target="_blank">『30個讓人興奮的視差滾動（Parallax Scrolling）效果網站』</a>也收集了很多相關方面的網站</p>

<p>為了能夠實做，找到了<a href="http://www.davecranwell.com/content/jquery-scroll-parallax-plugin" target="_blank">JQUERY SCROLL PARALLAX</a>這個plugin，用法蠻簡單的，首先準備ab兩張圖，a圖長方形(例如200x2000)，顏色隨意，b圖正方形(例如100x100)，顏色隨意，注意不要跟a圖一樣就可以，方便辨識</p>

<p>接著HTML如下:</p>

<pre><code>&lt;div class="item"&gt;
    &lt;div class="inner"&gt;&lt;/div&gt;       
&lt;/div&gt;
</code></pre>

<p>CSS如下:</p>

<pre><code>.item{
    width:100%;
    overflow:hidden;
    position:relative;
    height:2000px;
    background: white url(a.png) 0px 0px fixed no-repeat;
}

.inner{
    width:100%;
    height:100%;
    position:absolute;
    z-index:1;
    background: url(b.png) 150px 200px fixed no-repeat;
}
</code></pre>

<p>會看到我將.inner的背景圖設置了座標150,200，200就是等會js負責控制的地方，經由控制背景圖的位置來達到視差滾輪的效果</p>

<p>接著引用js</p>

<pre><code>&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min.js"&gt;&lt;/script&gt;    
&lt;script src="jquery.inview.js"&gt;&lt;/script&gt;
&lt;script src="jquery.scrollParallax.js"&gt;&lt;/script&gt;
</code></pre>

<p>共有兩個js要載，一個就是<a href="https://github.com/davecranwell/jQuery-scroll-parallax" target="_blank">scrollParallax.js</a>，另一個是<a href="https://github.com/protonet/jquery.inview" target="_blank">inview.js</a>，inview.js簡單的說也是一個plugin，藉由inview.js可以抓取目前scroll的位置和秀出對應的效果，例如『把scroll拉到最底就出現回到最上方的方塊』</p>

<p>接著是js程式碼部分</p>

<pre><code>$(function(){       
    $('.item').scrollParallax({
        'speed': 0
    });

    $('.item .inner').scrollParallax({
        'speed': 0.8        
    });
});
</code></pre>

<p>speed是調整移動的數度，只要將每個圖速度設定不一樣，就會呈現不一樣的景深效果</p>

<p>很容易吧！有興趣的人可以下載試試看，而且都有DEMO範例，方便理解</p>

<p>如有錯誤，歡迎指證</p>

<p>參考資料:</p>

<p><a href="http://www.davecranwell.com/content/jquery-scroll-parallax-plugin" target="_blank">JQUERY SCROLL PARALLAX PLUGIN</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[jQuery] $.data原理]]></title>
    <link href="http://rx836.github.com/blog/jquery-data-cache/"/>
    <updated>2012-08-30T14:10:00+08:00</updated>
    <id>http://rx836.github.com/blog/jquery-data-cache</id>
    <content type="html"><![CDATA[<p>今天在看別人寫的jQuery Plugin，發現 <strong>this[expando]</strong> 這個寫法，好奇心驅使下，決定一探究竟</p>

<!--more-->


<p>因為不了解<strong>expando</strong>是甚麼，所以特地去找了一下Google，發現在jQuery裡面有這一段程式碼</p>

<pre><code>expando: "jQuery" + ( jQuery.fn.jquery + Math.random() ).replace( /\D/g, "" );
</code></pre>

<p>原來這是在使用$.data時可以做為匹配的id，產生的邏輯就是版本代號+一組亂數，並把非數字的字元用replace替代掉，expando會在每次載入jQuery時直接生成，所以用console.log()看如下面所示</p>

<pre><code>console.log($.expando);
//jQuery18004247503886623739
</code></pre>

<p>那$.data又是甚麼呢？在jQuery的文件裡面是這樣寫</p>

<pre><code>Description: Store arbitrary data associated with the matched elements.
</code></pre>

<p>意思就是以前我們都喜歡將數據存在HTMLElement屬性上，例如下面所示</p>

<pre><code>&lt;div data="some data"&gt;my div&lt;/div&gt;
&lt;script&gt;
    div.getAttribute('data'); //some data
&lt;/script&gt;
</code></pre>

<p>但如果用這種方式添加數據，往往數據會直接曝露在原始碼當中，從安全性的角度來思考並不太好，另一方面，在DOM的元素中添加這麼多的屬性，其實對瀏覽器來說是沒有意義</p>

<p>所以jQuery很棒的提供了這方面的解決方式給我們，利用$.cache來緩存我們想要保存的數據，在說明原理之前，我們先來看幾個參數的意義，在jQuery原始碼底下看到以下這些程式碼</p>

<pre><code>jQuery.extend({

    cache: {},

    ...

    // Please use with caution
    uuid: 0,

    // Unique for each copy of jQuery on the page
    // Non-digits removed to match rinlinejQuery
    expando: "jQuery" + ( jQuery.fn.jquery + Math.random() ).replace( /\D/g, "" ),

    // The following elements throw uncatchable exceptions if you
    // attempt to add expando properties to them.
    noData: {
        "embed": true,
        // Ban all objects except for Flash (which handle expandos)
        "object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
        "applet": true
    },

    hasData: function( elem ) {
        elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
        return !!elem &amp;&amp; !isEmptyDataObject( elem );
    },

    ...

});
</code></pre>

<p><strong>jQuery.cache</strong>:空物件，用來做緩存</p>

<p><strong>jQuery.uuid</strong>:一個seed，會遞增，用來標示每個cache</p>

<p><strong>jQuery.expando</strong>:一組字串，如前面所說，由Math.random生成，同時也是DOM的屬性名稱，裡面會對映到jQuery.uuid</p>

<p><strong>jQuery.noData</strong>:檢查元素是否能使用$.data，預設是embed、object、applet不能使用</p>

<p><strong>jQuery.hasData</strong>:判斷元素是否已經擁有data</p>

<p>接下來是範例講解</p>

<pre><code>&lt;div&gt;test&lt;/div&gt;
&lt;script&gt;
    console.log($.expando);
    //jQuery180010448733290775436 
    //載入jQuery就會生成一組字串

    var div = document.getElementsByTagName('div')[0];

    console.log($.hasData(div));
    //false
    //因為div還沒使用$.data，所以為false

    $.data(div,'divName','name1');

    console.log($.hasData(div));        
    //true
    //div已經有包含data，所以為true

    console.log($.uuid);
    //1
    //第一個cache，此時seed遞增為1

    var div2 = document.getElementsByTagName('div')[1];     

    $.data(div2,'divName','name2');

    console.log($.uuid);
    //2
    //第二個chche，此時seed遞增為2

    var myObj = {};

    $.data(myObj, 'objName','name3');       

    console.log($.data(myObj, 'objName'));
    //name3
    //不只是HTMLElement可以使用$.data，物件也可以使用$.data

    console.log(myObj);     
    //myObj ={
    //  jQuery180010448733290775436:{
    //      objName:name3
    //  }
    //}
    //不過物件並沒有將data緩存到$.cache裡面，而是直接在物件裡面新增一個屬性
    //屬性名稱為$.expando，值為剛剛設定的緩存值

    console.log(div[$.expando]);
    //1
    //再回頭看看元素div會發現裡面已經添加屬性，屬性名稱就叫$.expando也就是最前面那串字串
    //而屬性值就是1       

    console.log($.cache);
    //1:{divName:'name1'}
    //2:{divName:'name2'}       
    //只有HTMLElement元素才會將值緩存到$.cache裡面，而且會發現屬性值為1可以匹配到$.cache裡面的屬性
&lt;/script&gt;
</code></pre>

<p>用圖表示關係如下</p>

<p><img src="https://lh5.googleusercontent.com/-t5d07KuRuJk/UD8Yz5NlG6I/AAAAAAAABYg/cd1cmEgctH8/s748/1.jpg" width="700px" /></p>

<p>巧妙的使用$.data，就可以不必替DOM元素新增一堆屬性了</p>

<p>參考資料:</p>

<p><a href="http://api.jquery.com/data/" target="_blank">jQuery $.data</a></p>

<p><a href="http://www.jb51.net/article/27433.htm" target="_blank">http://www.jb51.net/article/27433.htm</a></p>

<p><a href="http://hpf1908.appspot.com/2010/10/7/cache-jquery-javascript.html" target="_blank">http://hpf1908.appspot.com/2010/10/7/cache-jquery-javascript.html</a></p>

<p>如有錯誤，歡迎指正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[學習筆記] 亞馬遜帝國成功學]]></title>
    <link href="http://rx836.github.com/blog/work-1/"/>
    <updated>2012-06-24T02:27:00+08:00</updated>
    <id>http://rx836.github.com/blog/work-1</id>
    <content type="html"><![CDATA[<p>今天看到商業周刊1283期，裡面提到Amazon的成功學，讓我著實上了一課，其實應該是說六課，每一課都充滿了智慧在裡面，不僅可以套用在工作，事業，甚至是人生的規劃，都是非常好的借鏡</p>

<!--more-->


<h2>第一課:做對的事，比做有效率的事重要</h2>

<p>亞馬遜在擴建倉庫的時候，其實一般人都很不看好，大家都認為，你做網路的，為什麼要跑去建倉庫？一堆人覺得很笨，可是Amazon就堅持做對的事情，他不在乎被人長期誤解，認為只有建倉庫，才能免去消費者的等待，幾年後，事實也證明，Amazon是對的，不為了效率搶快，而是做對的事情，就算需要的時間較長，也十分值得</p>

<p>同樣用在自己的身上，你想做對的事情(長遠)，還是一昧追求效率(短期)？</p>

<h2>第二課:想未來如何改變，根本白費力氣</h2>

<p>很多人只會問，未來會怎麼變，但卻很少人問，未來5~10年，什麼是不變的基礎？掌握這些基礎，長期的投入，將會帶來可觀的收穫，這句話並不是要你不看未來，不去掌握趨勢，而是要你換另外一個角度，去想想，未來什麼是長期不變的，而不是針對那些每天都在變動的東西去思考，因為根本來不及追求</p>

<p>何不想想，甚麼東西是未來20年都不會變的需求？</p>

<h2>第三課:要創新，先懂兩個披薩原則</h2>

<p>這意思是說，要求團隊只要10人左右即可(差不多兩份披薩的人數)，不管是開會還是如何，都希望每個人都能提出意見，共同參與，而不是有些人盯著台上的人不講話，才不會浪費人力資源，要讓大家人無不言，言無不盡，會議才會有深度</p>

<h2>第四課:把Way Not？當口頭禪</h2>

<p>許多人分配到任務，最常講的是，為什麼要做？而不是為何不做？Amazon認為他們最常犯的錯，就是<strong>沒去做的錯</strong>，因為沒去做，錯失很多機會，反覆的問自己，為什麼不做？而且要想辦法去做，才能提升自己的競爭能力</p>

<h2>第五課:不必管對手，掏錢的不是他</h2>

<p>常常人們犯最多的錯誤，就是迷失焦點，因為別人的一舉一動，就當成影響自己的原因，但當你跟別人或是別家公司比較的時候，有沒有想過，你自己的人生，為何要跟別人比較？別人過的如何？會實質影響到你的人生嗎？</p>

<p>就如同公司，一直注意對手再幹什麼，卻忘記了，最後掏錢的是客戶，而不是對手，不要把焦點放在對手，而是要將專注力放在顧客身上，做專注的事情</p>

<h2>第六課:獲利不重要，現金才是王道</h2>

<p>保留給自己彈性，能應付各種突發狀況，我想這是每個人都應該做的風險管理，就跟企業一樣，留有保命的銀彈，不只可以不用擔心突然的景氣衰退，也可以不用一直看銀行臉色，不管做什麼都可以立即馬上實行，增加了企業改變很大的彈性，這點從Apple(蘋果)身上，也可以印證</p>

<p>對於我們自己來說，更不應該把所有的錢投入在股匯市上面，因為你永遠不知道明天會發生什麼事情，要給自己容錯的機會</p>

<p>Amazon的六堂課，每堂課都值得細細品嘗</p>

<p>如有疑問，歡迎一起討論</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[讀後心得] 社群效應:小圈圈如何改變世界]]></title>
    <link href="http://rx836.github.com/blog/book-review-4/"/>
    <updated>2012-06-20T23:13:00+08:00</updated>
    <id>http://rx836.github.com/blog/book-review-4</id>
    <content type="html"><![CDATA[<p>作者:Paul Adams</p>

<p>出版者:基峯資訊股份有限公司</p>

<!--more-->


<p>我一直對於社群這個詞感到興趣 ，也覺得這個世界會因為社群的關係 ，而有非常劇烈的改變 ，這程度甚至不亞於網路的興起 ，這本書其實一開始我並沒有關注到 ，是因為Facebook社團裡面的前輩所推薦(沒錯 ，Facebook幾乎可以說是改變我一生) ，才引起我的興趣</p>

<h2>我們分享的是感受 ，而非事實</h2>

<p>書裡面提到的很多觀念 ，是我以前不知道的 ，還有一些是 ，平常我就有感覺到的  ，像Facebook最常看到的是 ，大家分享某項資訊 ，會帶入個人自己的感受 ，或是照片 ，也會加上自己的評論進去 ，因為往往我們會被這種有包含朋友的觀點在裡面的事物所吸引</p>

<h2>你是唯一的途徑</h2>

<p>另一個讓我所沒想過的是 ，原來我的朋友群之間 ，真的是只有我做為唯一的連結點 ，如果沒有我 ，我的朋友群跟群之間 ，根本不可能會交會到 ，這在裡面提到的另一個重點 ，不要迷信尋找『有影響力』的人 ，而應該針對那些有連結『創意樞紐』的人 ，下足經營的工夫</p>

<h2>偏頗如何影響我們</h2>

<p>以前我就聽過人們是非理性，我一直認為怎麼會？但看完這章節後，裡面所舉的例子，讓我不得不說，人類真的是如此，我們的腦分為三個部分，意識腦是我們唯一能操控的部分，無意識腦是由兩個部分所組成，處理情緒和主導我們大部分行為的中腦，以及維持我們生命系統的原腦，在這個充斥資訊的世界裡，我們大腦會將意識資訊轉換成無意識的資訊，這就像是學習開車一樣，一開始你會使用意識腦來想每個動作，但久而久之，你可以邊想事情邊開車，就是因為你將開車這個動作轉換成無意識腦的一部份</p>

<p>可是也因為這樣的特性，導致人們常被自己給欺騙，我們很多行為都是出自無意識腦，可是我們不可能記得每一件事情，當記憶是片段的時候，我們的大腦會嘗試補足那些缺口，但那卻都不是真的，這也是為什麼我們大腦都會記得有關連性的原因，同時，外面教人如何快速記憶，大都也是利用關聯性或故事性這種方法來增強記憶，</p>

<p>書中告訴我們一些我們過去的誤解，只有你能掌握這些人與人之間的關係，對於社群的行銷才會事倍功半</p>

<p>還有，不要再期望過去那種干擾式行銷可以為你帶來甚麼效益，消費者也是會進步的，他們已經不信這一套了，在這個以人為本的社群社會裡面，要學習如何抓住這個趨勢</p>

<p>最後我想筆記的四個重點:社交行為、網絡、人們的想法、聚焦獨立的小型朋友群體</p>

<p>如有想法，歡迎一起提出討論</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Jquery] 做出Pinterest效果的介面 用jQuery Masonry + Infinite Scroll]]></title>
    <link href="http://rx836.github.com/blog/jquery-waterfall-infinitescroll/"/>
    <updated>2012-06-19T00:27:00+08:00</updated>
    <id>http://rx836.github.com/blog/jquery-waterfall-infinitescroll</id>
    <content type="html"><![CDATA[<p>相信已經有很多人已經看過<a href="http://pinterest.com/" target="_blank">pinterest</a>這個網站的介面效果，是利用一個稱為<a href="http://www.21andy.com/blog/20120527/2041.html" target="_blank">Waterfall</a>，中文叫做瀑布流布局的效果，原理是算出周圍元素的寬和高，去排列畫面的布局，利用絕對定位的方式來達到隨著螢幕大小來變動整個版面</p>

<!--more-->


<p>再加上無限滾輪( Infinite Scroll)的搭配，就可以做出類似Pinterest效果，所以上網去搜尋了一下，找到了<a href="http://masonry.desandro.com/index.html" target="_blank">jQuery Masonry</a>這個Waterfall的Plugin，在jQuery Masonry的官方文件裡面寫可以跟<a href="http://www.infinite-scroll.com/" target="_blank">Infinite scroll</a>這個Plugin一起搭配無限滾輪這個效果，但我找不到Infinite scroll使用向Server端取得元素的方法，例如.NET常用的泛型處理常式，所以我另外找了其他的Infinite Scroll來使用</p>

<p>但其實可以按照個人所需來選擇，這裡有介紹<a href="http://designbeep.com/2011/08/12/12-jquery-infinite-scrollingscroll-read-plugins-for-content-navigation/" target="_blank">12種jQuery Infinite Scrolling</a>，而我這邊是選擇<a href="http://andersonferminiano.com/jqueryscrollpagination/" target="_blank">jQuery ScrollPagination</a>，因為對我來說使用起來很簡單，但缺點就是要稍微修改一下Plugin，對於IE8來說</p>

<p>首先就是先隨意建立一個HTML，但有個比較要注意的地方就是所有的div或是其他元素包含在_container裡面的，都要盡量去宣告width，不然有時候會有不正常的情況發生</p>

<pre><code>&lt;div id="_container" style="height:800px;"&gt;         
        &lt;div class="item"&gt;&lt;div&gt;&lt;img src="images/pic1.jpg" /&gt;&lt;/div&gt;&lt;div&gt;我要講的話我要講的話我&lt;/div&gt; &lt;/div&gt;
        &lt;div class="item"&gt;&lt;div&gt;&lt;img src="images/pic2.jpg" /&gt;&lt;/div&gt;&lt;div&gt;我要講的話我要講的話我要講的話我要講&lt;/div&gt; &lt;/div&gt;
        &lt;div class="item"&gt;&lt;div&gt;&lt;img src="images/pic4.jpg" /&gt;&lt;/div&gt;&lt;div&gt;我要講的話我要講的話我&lt;/div&gt; &lt;/div&gt;
        &lt;div class="item"&gt;&lt;div&gt;&lt;img src="images/pic5.jpg" /&gt;&lt;/div&gt;&lt;div&gt;我要講的話我要講的話我要講的話我要講的話我要&lt;/div&gt; &lt;/div&gt;
        &lt;div class="item"&gt;&lt;div&gt;&lt;img src="images/pic6.jpg" /&gt;&lt;/div&gt;&lt;div&gt;我要講的話&lt;/div&gt; &lt;/div&gt;         
&lt;/div&gt;   
</code></pre>

<p>再來是js的部分，引用Jquery+jQuery Masonry+jQuery ScrollPagination</p>

<pre><code>&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="scripts/jquery.masonry.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="scripts/scrollpagination.js"&gt;&lt;/script&gt;   
</code></pre>

<p>接著是要撰寫的部分，首先是Jquery Masonry部分，也就是Waterfall</p>

<pre><code>$('#_container').imagesLoaded(function () {
        $('#_container').masonry({
            // options
            itemSelector: '.item',
            columnWidth: 240,
            singleMode: true,
            animate:true
        });
});
</code></pre>

<p><strong>imagesLoaded()</strong>:這個方法主要是因為一般來說我們用jquery用$(function(){ .. });這個方法來實做，image並不會載完，而是在DOM載完以後就會立刻執行，可是這樣並沒有辦法得知圖片大小，所以必須用imagesLoaded()來防止計算寬度和高度錯誤</p>

<p><strong>itemSelector</strong>:要套用效果的元素</p>

<p><strong>columnWidth</strong>:欄位寬度</p>

<p><strong>singleMode</strong>:因為等會在jQuery ScrollPagination裡面也會再用一次Jquery Masonry(讀取新的元素進來要套用效果)，所以這邊設定true，後面的Jquery Masonry就可以直接使用前面的設定</p>

<p><strong>animate</strong>:打開效果</p>

<p>接著是jQuery ScrollPagination的撰寫部分</p>

<pre><code>$('#_container').scrollPagination({
        'contentPage': 'GetDynamicGrid.ashx', // the page where you are searching for results
        'contentData': {  }, // you can pass the children().size() to know where is the pagination
        'scrollTarget': $(window), // who gonna scroll? in this example, the full window
        'heightOffset': 10, // how many pixels before reaching end of the page would loading start? positives numbers only please
        'beforeLoad': function () { // before load, some function, maybe display a preloader div

        },
        'afterLoad': function (elementsLoaded) { // after loading, some function to animate results and hide a preloader div

            var $newElems = $(elementsLoaded).css({ opacity: 0 });
            $newElems.imagesLoaded(function () {
                // show elems now they're ready
                $newElems.animate({ opacity: 1 });
                $('#_container').masonry('appended', $newElems, true);
            });
        }
    });
</code></pre>

<p>這裡就不細翻每個option的解釋，大概的原理就是當算出scroll到底部以後，就會觸發ajax，接著afterLoad()會callback一個參數，裡面就是server端回傳的新元素，再用Jquery Masonry將Waterfall效果套用在新元素上面</p>

<h2>IE8的空白間格問題&#8230;</h2>

<p>但我在實做過程中，就如同之前所講的，IE8會有些許的問題，會發現每當只要滾輪到底部以後，觸發後收到新的元素加到畫面上，都會發現區塊與區塊之間有白色的間隔，問題找了好久，用firebug發現到，IE8每當我滾輪移到底部時，一般都會觸發一次ajax跟server端要資料，可是IE8卻會一次觸發兩次以上，導致Jquery Masonry計算元素的高度和寬度出現誤差，才會出現空白的間隔</p>

<p>為了改善這個原因，我用比較笨的方式來解決，因為我的功力還沒辦法深入了解瀏覽器間的差異，我發現jQuery ScrollPagination它的範例裡面有用過<strong>stopScrollPagination()</strong>這個方法，看了一下Plugin的原始法，發現它是包覆在外層id名為_container的div，加上一個屬性</p>

<pre><code>$(obj).attr('scrollPagination', 'disabled');
</code></pre>

<p>可以用搜尋在jQuery ScrollPagination的原始碼裡面來尋找，所以它利用判別屬性scrollPagination是disabled還是enabled，就可以知道是不是要繼續觸發滾輪事件</p>

<p>我利用了它寫的這段程式碼，來修改一下，在原始碼這段</p>

<pre><code>$.fn.scrollPagination.loadContent = function (obj, opts) { ... }
</code></pre>

<p> 我在ajax()前面先將scrollPagination屬性先設為disabled，接著在執行完ajax以後，再將屬性設回enabled，讓滾輪事件重新觸發，以下為修改程式碼片段</p>

<pre><code> $(obj).attr('scrollPagination', 'disabled');
            $.ajax({
                type: 'POST',
                url: opts.contentPage,
                data: opts.contentData,
                success: function (data) {
                    $(obj).append(data);
                    var objectsRendered = $(obj).children('[rel!=loaded]');

                    if (opts.afterLoad != null) {
                        opts.afterLoad(objectsRendered);
                    }
                    $(obj).attr('scrollPagination', 'enabled');
                },
                dataType: 'html'
            });
</code></pre>

<p>其實這有點偷吃步，並不是真正解決核心的問題所在，但無奈底子差，只能先讓程式可以跑(這是重點呀&#8230;.!)，日後有時間再來好好探討這個問題(其實是希望等著IE8被淘汰的那天&#8230;)</p>

<p>以上如有問題或是錯誤的地方，歡迎大家一起討論</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Facebook] 如何建立facebook App 且取得FB ID]]></title>
    <link href="http://rx836.github.com/blog/facebook-app-create-getfbid/"/>
    <updated>2012-06-16T00:36:00+08:00</updated>
    <id>http://rx836.github.com/blog/facebook-app-create-getfbid</id>
    <content type="html"><![CDATA[<p>這裡將會紀錄如何建立一個Facebook App，並且讓User授權應用程式，最後取得FB ID來當會員資料或是參加活動的ID識別</p>

<!--more-->


<p>首先，你必須是個Facebook App Developers，你可以去<a href="https://developers.facebook.com/" target="_blank">facebook DEVELOPER</a>申請你的身份，我記得以前不用手機驗證，但現在則需要</p>

<p>接著你會看到以下畫面</p>

<p><img src="https://lh3.googleusercontent.com/-qsrR5jf8ieQ/T9tcfJx0g0I/AAAAAAAAAQo/ijDj_DOzoFY/s902/2012-06-15_170640.jpg" width="700px" /></p>

<p>點選右上角的Create New App</p>

<p>會跳出一個POP視窗</p>

<p><img src="https://lh4.googleusercontent.com/-b1KPFkV9kak/T9tdnIs-8LI/AAAAAAAAAQ4/Qa62h_PbpYw/s660/2012-06-15_171009.jpg" width="700px" /></p>

<p><strong>App Name</strong>:指的是你的應用程式名稱</p>

<p><strong>App Namespace</strong>:是你的網址命名</p>

<p><strong>Web Hosting</strong>:如果你有自己的Web Hosting就不用勾選</p>

<p>按下Continue以後會出現填寫驗證碼，填寫完後按下Submit</p>

<p><img src="https://lh6.googleusercontent.com/--MZXrFzYUmo/T9tdnPmoYLI/AAAAAAAAAQw/tjvCiZFjhaU/s664/2012-06-15_171639.jpg" width="700px" /></p>

<p>然後就會看到建立好的App一些資訊和設定</p>

<p><img src="https://lh3.googleusercontent.com/-HmL8gmkIbMo/T9tdnPYDjgI/AAAAAAAAAQ0/aoxRueaQ4uQ/s882/2012-06-15_171904.jpg" width="700px" /></p>

<p>因為雖然是寫Facebook App，但其實Facebook只是提供你API和外框包住你的網頁，所以你還要提供你的網頁所在位置給Facebook</p>

<p><img src="https://lh6.googleusercontent.com/-WAH8_0uqxXY/T9tdnoOUwDI/AAAAAAAAAQ8/Ol4WZwkLFI8/s729/2012-06-15_172431.jpg" width="700px" /></p>

<p>要注意的是Facebook要求<a href="https://developers.facebook.com/blog/post/497/" target="_blank">使用加密的https</a>，所以如果你如果沒有的話，可能要花錢購買這方面的憑證</p>

<p>到這邊為止，已經建立好初步的Facebook App了</p>

<h2>使用JavaScript API做授權</h2>

<p>有了App以後，我們要跟網頁串起來，因為我是.NET開發者，所以我會先建立一個index.aspx，接著一般我都會在&lt;form id=&#8221;form1&#8221; runat=&#8221;server&#8221;&gt;&lt;/form&gt;的後面加上</p>

<pre><code>&lt;div id="fb-root"&gt;&lt;/div&gt;
&lt;script type="text/javascript" src="https://connect.facebook.net/zh_TW/all.js"&gt;&lt;/script&gt;  
&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js" type="text/javascript"&gt;&lt;/script&gt;
</code></pre>

<p> 注意，如果沒有fb-root的div會導致不能使用Facebook API，另外我還多用了Jquery來方便等一下寫js程式碼</p>

<p>接下來新增一個div做為點選授權</p>

<pre><code>&lt;div id="btn"&gt;點我授權&lt;/div&gt;
</code></pre>

<p>接著是js初始化部分</p>

<pre><code>$(function () {

        var _app_id = 'Your App ID';
        var _api_key = '';
        //驗證            
        FB.init({
            appId: _app_id,
            status: true, // check login status
            cookie: true, // enable cookies to allow the server to access the session
            xfbml: true, // parse XFBML                
            oauth: true // enable OAuth 2.0
        });
        FB.Canvas.setAutoGrow(); //autoResize  → no scrollbar

   });
</code></pre>

<p><strong>Your App ID</strong>必須填入你建立好的Facebook App裡面的App ID ，接著加上點擊觸發授權的js部分</p>

<pre><code>    $('#btn').click(function () {
            getLoaginState();
        });

        //驗證
        function getLoaginState() {
            FB.getLoginStatus(function (response) {
                if (response.authResponse) {
                    var u_fb_id = response.authResponse.userID;
                    console.log(u_fb_id);
                } else {
                    login();                        
                }
            });
        }

        //跳出登入視窗
        function login() {
            FB.login(function (response) {
                if (response.authResponse) {
                     var u_fb_id = response.authResponse.userID;
                     console.log(u_fb_id);
                } else {
                    alert('須同意應用程式');
                }
            });
        }
</code></pre>

<p>這段js是綁定一個click事件，在id為btn的div上，然後去執行getLoaginState()，<strong>FB.getLoginStatus</strong>是看登入狀態，沒有登入則會跳到login()，console是等下能看到我們所取得的FB ID</p>

<p>接著在剛剛App設定網址那邊有個<strong>Canvas Page</strong>，那就是你掛在Facebook底下的網址，後面的網址名稱就是你剛剛設定的App Namespace，進入以後會看到以下畫面</p>

<p><img src="https://lh3.googleusercontent.com/-j1YbMlBI6oU/T9tgEdDILSI/AAAAAAAAARY/noBT1wLBEEs/s1223/2012-06-16_001702.jpg" width="700px" /></p>

<p>按下<strong>點我授權</strong>，就會跳出授權是否同意應用程式視窗</p>

<p><img src="https://lh5.googleusercontent.com/-ul15BASQCTk/T9th2pskfsI/AAAAAAAAARg/E9_uWLPQVFI/s1046/2012-06-16_002409.jpg" width="700px" /></p>

<p>同意以後，就可以在firebug裡面看到我們剛剛所加的console，秀出你的FB ID</p>

<p><img src="https://lh5.googleusercontent.com/-ITJVUoACd3s/T9tirDBGMOI/AAAAAAAAARo/Oy8ICJf03bw/s1008/2012-06-16_002811.jpg" width="700px" /></p>

<p>得到FB ID可以利用<a href="https://developers.facebook.com/docs/reference/api/" target="_blank">Graph API</a>再更進一步取得許多資料，當然也要先授權相關權限才行</p>

<p>以上如有問題，歡迎一起討論</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Jquery] jScrollPane的使用與注意]]></title>
    <link href="http://rx836.github.com/blog/jquery-jscrollpane-display/"/>
    <updated>2012-06-11T18:26:00+08:00</updated>
    <id>http://rx836.github.com/blog/jquery-jscrollpane-display</id>
    <content type="html"><![CDATA[<p>有些時候客戶會不想要HTML內建的Scrollbar，所以特地去找了一個Jquery Plugin來使用，但注意，如果有使用到display:none，或是類似lightbox視窗效果，要注意一下先後執行的問題</p>

<!--more-->


<p>當然，還有其他很多Plugin可以選擇<a href="http://www.net-kit.com/jquery-custom-scrollbar-plugins/" target="_blank">10 jQuery Custom Scrollbar Plugins</a>，這裡我是用jScrollPane，使用方法很簡單，先下載他的檔案回來，在載入到網頁</p>

<p>使用方法</p>

<pre><code>&lt;!-- CSS部分 --&gt;
&lt;link type="text/css" href="style/jquery.jscrollpane.css" rel="stylesheet" media="all" /&gt;

&lt;!-- 還要載入Jquery 這裡用CDN --&gt;
&lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"&gt;
&lt;/script&gt;

&lt;!-- 載入mousewheel plugin --&gt;
&lt;script type="text/javascript" src="script/jquery.mousewheel.js"&gt;&lt;/script&gt;

&lt;!-- 載入jScrollPane --&gt;
&lt;script type="text/javascript" src="script/jquery.jscrollpane.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>接著只要對包覆內容的div加上Jquery語法</p>

<pre><code>$(function()
{
    $('.your div').jScrollPane();
});
</code></pre>

<p>這樣就可以自製Scrollbar了！很簡單吧</p>

<p>這裡有<a href="http://jscrollpane.kelvinluck.com/#examples" target="_blank">更多範例</a></p>

<p>不過有時候我們會遇到一個狀況，一開始會設div為display:none，然後點了某個元件以後，用lightbox或其他方式秀出div，如下圖</p>

<p><img width="300px" src="https://lh4.googleusercontent.com/-NBEVwEqZHlY/T9XCoGfeq1I/AAAAAAAAAQc/sWHyCp2vi6M/w753-h585-k/a.jpg" /></p>

<p>但會發現，依照正常流程來套用，點開呈現的效果不如預期，那是因為你在還沒套用jScrollPane之前，為了呈現lightbox的效果，就已經先將他display:none，為了避免發生這種情況，必須先不要display:none，然後在jscrollpane套用以後，再將div做隱藏，教學如下</p>

<p>1.先找到function initialise()</p>

<p>2.接著在這個function的最後面加上$(&#8216;#your div&#8217;).hide()</p>

<p>意思就是，等所有初始化步驟結束以後，才把div的display設成none</p>

<p>其實有很多Jquery Plugin的套用，如果有用到顯示/隱藏的切換，都要注意到先後順序的問題</p>

<p>以上如有問題，歡迎一起討論</p>
]]></content>
  </entry>
  
</feed>
